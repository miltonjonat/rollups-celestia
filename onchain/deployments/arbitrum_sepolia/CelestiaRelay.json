{
  "address": "0x4e64020dc800f02decb8Bd45bB4D0f74048e7535",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IDAOracle",
          "name": "_blobstreamX",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "digests",
              "type": "bytes32[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "beginKey",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endKey",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "min",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "max",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "digest",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct NamespaceNode[]",
                  "name": "sideNodes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct NamespaceMerkleMultiproof[]",
              "name": "shareProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes1",
                  "name": "version",
                  "type": "bytes1"
                },
                {
                  "internalType": "bytes28",
                  "name": "id",
                  "type": "bytes28"
                }
              ],
              "internalType": "struct Namespace",
              "name": "namespace",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "min",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "max",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "digest",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct NamespaceNode[]",
              "name": "rowRoots",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "sideNodes",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "key",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numLeaves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BinaryMerkleProof[]",
              "name": "rowProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tupleRootNonce",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "height",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "dataRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct DataRootTuple",
                  "name": "tuple",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32[]",
                      "name": "sideNodes",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "key",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numLeaves",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct BinaryMerkleProof",
                  "name": "proof",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AttestationProof",
              "name": "attestationProof",
              "type": "tuple"
            }
          ],
          "internalType": "struct ShareDigestsProof",
          "name": "_proof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_execLayerData",
          "type": "bytes"
        }
      ],
      "name": "relayShares",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x014b10539bd8c5f246283aba55440c0178b51daafa91ff2ce93d8a35da9f0d97",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xF05D57a5BeD2d1B529C56001FC5810cc9afC0335",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "5512207",
    "logsBloom": "0x
    "blockHash": "0x4d11b6622fed4940745eddd57aeee9d47fa69b9a634c2dbeb981b55e6732caac",
    "transactionHash": "0x014b10539bd8c5f246283aba55440c0178b51daafa91ff2ce93d8a35da9f0d97",
    "logs": [],
    "blockNumber": 61387088,
    "cumulativeGasUsed": "5512207",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58Df21fE097d4bE5dCf61e01d9ea3f6B81c2E1dB",
    "0xc3e209eb245Fd59c8586777b499d6A665DF3ABD2"
  ],
  "numDeployments": 7,
  "solcInputHash": "1135eba326c5f9210912954f5d077d55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IDAOracle\",\"name\":\"_blobstreamX\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"digests\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endKey\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"sideNodes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct NamespaceMerkleMultiproof[]\",\"name\":\"shareProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"namespace\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"rowRoots\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof[]\",\"name\":\"rowProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tupleRootNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataRootTuple\",\"name\":\"tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationProof\",\"name\":\"attestationProof\",\"type\":\"tuple\"}],\"internalType\":\"struct ShareDigestsProof\",\"name\":\"_proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_execLayerData\",\"type\":\"bytes\"}],\"name\":\"relayShares\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_blobstreamX\":\"BlobstreamX contract where Celestia commitments are being stored\",\"_inputBox\":\"InputBox contract to send inputs to Cartesi DApps\"}},\"relayShares(address,(bytes32[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)\":{\"details\":\"Called by clients to securely process Celestia data in Cartesi DApps\",\"params\":{\"_dapp\":\"The address of the DApp\",\"_execLayerData\":\"Additional data to be interpreted by the execution layer\",\"_proof\":\"ShareDigestsProof object showing that a range of shares is committed to Celestia\"},\"returns\":{\"_0\":\"The hash of the input as returned by the Cartesi DApp's input box\"}}},\"title\":\"CelestiaRelay\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"relayShares(address,(bytes32[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)\":{\"notice\":\"Relay a pointer to the specified Celestia shares as an input to a DApp's input box\"}},\"notice\":\"Relays Celestia blocks as inputs to Cartesi DApps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CelestiaRelay.sol\":\"CelestiaRelay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@cartesi/rollups/contracts/inputs/IInputBox.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Provides data availability of inputs for applications.\\n/// @notice Each application has its own append-only list of inputs.\\n/// @notice Off-chain, inputs can be retrieved via events.\\n/// @notice On-chain, only the input hashes are stored.\\n/// @notice See `LibInput` for more details on how such hashes are computed.\\ninterface IInputBox {\\n    /// @notice MUST trigger when an input is added.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @param input The input blob\\n    event InputAdded(\\n        address indexed appContract,\\n        uint256 indexed index,\\n        bytes input\\n    );\\n\\n    /// @notice Input is too large.\\n    /// @param appContract The application contract address\\n    /// @param inputLength The input length\\n    /// @param maxInputLength The maximum input length\\n    error InputTooLarge(\\n        address appContract,\\n        uint256 inputLength,\\n        uint256 maxInputLength\\n    );\\n\\n    /// @notice Send an input to an application.\\n    /// @param appContract The application contract address\\n    /// @param payload The input payload\\n    /// @return The hash of the input blob\\n    /// @dev MUST fire an `InputAdded` event.\\n    function addInput(\\n        address appContract,\\n        bytes calldata payload\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs sent to an application.\\n    /// @param appContract The application contract address\\n    function getNumberOfInputs(\\n        address appContract\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in an application's input box.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @dev The provided index must be valid.\\n    function getInputHash(\\n        address appContract,\\n        uint256 index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xae7730cd7ab2b31a86d7c4933215853ea6c0b1b4dc60d4ec24e5cfc2ec005fe3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"blobstream-contracts/src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @dev bytes32 encoding of the string \\\"checkpoint\\\"\\nbytes32 constant VALIDATOR_SET_HASH_DOMAIN_SEPARATOR =\\n    0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n/// @dev bytes32 encoding of the string \\\"transactionBatch\\\"\\nbytes32 constant DATA_ROOT_TUPLE_ROOT_DOMAIN_SEPARATOR =\\n    0x7472616e73616374696f6e426174636800000000000000000000000000000000;\\n\",\"keccak256\":\"0x0236491c1b01a038105ecfb270a39db52d7591f2200dbc1af079c4d8ed689f82\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/DataRootTuple.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A tuple of data root with metadata. Each data root is associated\\n///  with a Celestia block height.\\n/// @dev `availableDataRoot` in\\n///  https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#header\\nstruct DataRootTuple {\\n    // Celestia block height the data root was included in.\\n    // Genesis block is height = 0.\\n    // First queryable block is height = 1.\\n    uint256 height;\\n    // Data root.\\n    bytes32 dataRoot;\\n}\\n\",\"keccak256\":\"0x0526597d14a6d7f258ec48e434a9b60c9a8781764a8f23c878d49926daeb5d1c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/IDAOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./DataRootTuple.sol\\\";\\nimport \\\"./lib/tree/binary/BinaryMerkleProof.sol\\\";\\n\\n/// @notice Data Availability Oracle interface.\\ninterface IDAOracle {\\n    /// @notice Verify a Data Availability attestation.\\n    /// @param _tupleRootNonce Nonce of the tuple root to prove against.\\n    /// @param _tuple Data root tuple to prove inclusion of.\\n    /// @param _proof Binary Merkle tree proof that `tuple` is in the root at `_tupleRootNonce`.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    function verifyAttestation(uint256 _tupleRootNonce, DataRootTuple memory _tuple, BinaryMerkleProof memory _proof)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xc35648b17d3587bc3a627f67a328874db536ee24c11b970c3c57226d69a32eec\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Types.sol\\\";\\n\\nlibrary Constants {\\n    ///////////////\\n    // Constants //\\n    ///////////////\\n\\n    /// @dev Maximum tree height\\n    uint256 internal constant MAX_HEIGHT = 256;\\n\\n    /// @dev The prefixes of leaves and nodes\\n    bytes1 internal constant LEAF_PREFIX = 0x00;\\n    bytes1 internal constant NODE_PREFIX = 0x01;\\n}\\n\\n/// @dev Parity share namespace.\\n/// utility function to provide the parity share namespace as a Namespace struct.\\nfunction PARITY_SHARE_NAMESPACE() pure returns (Namespace memory) {\\n    return Namespace(0xFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n}\\n\",\"keccak256\":\"0x2050b2be8a739ce250cc5cea1556936c7937915b5d7fde269dd70e8e7eb660c4\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A representation of the Celestia-app namespace ID and its version.\\n/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html\\nstruct Namespace {\\n    // The namespace version.\\n    bytes1 version;\\n    // The namespace ID.\\n    bytes28 id;\\n}\\n\\nusing {equalTo, lessThan, greaterThan, toBytes} for Namespace global;\\n\\nfunction equalTo(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() == r.toBytes();\\n}\\n\\nfunction lessThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() < r.toBytes();\\n}\\n\\nfunction greaterThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() > r.toBytes();\\n}\\n\\nfunction toBytes(Namespace memory n) pure returns (bytes29) {\\n    return bytes29(abi.encodePacked(n.version, n.id));\\n}\\n\\nfunction toNamespace(bytes29 n) pure returns (Namespace memory) {\\n    bytes memory id = new bytes(28);\\n    for (uint256 i = 1; i < 29; i++) {\\n        id[i - 1] = n[i];\\n    }\\n    return Namespace(n[0], bytes28(id));\\n}\\n\",\"keccak256\":\"0xa47e9e20fef88264acdf1fc6bc0b3bb9f23c7022f5de8d203a1014895a606958\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Constants.sol\\\";\\n\\n/// @notice Calculate the starting bit of the path to a leaf\\n/// @param numLeaves : The total number of leaves in the tree\\n/// @return startingBit : The starting bit of the path\\n// solhint-disable-next-line func-visibility\\nfunction getStartingBit(uint256 numLeaves) pure returns (uint256 startingBit) {\\n    // Determine height of the left subtree. This is the maximum path length, so all paths start at this offset from the right-most bit\\n    startingBit = 0;\\n    while ((1 << startingBit) < numLeaves) {\\n        startingBit += 1;\\n    }\\n    return Constants.MAX_HEIGHT - startingBit;\\n}\\n\\n/// @notice Calculate the length of the path to a leaf\\n/// @param key: The key of the leaf\\n/// @param numLeaves: The total number of leaves in the tree\\n/// @return pathLength : The length of the path to the leaf\\n// solhint-disable-next-line func-visibility\\nfunction pathLengthFromKey(uint256 key, uint256 numLeaves) pure returns (uint256 pathLength) {\\n    if (numLeaves <= 1) {\\n        // if the number of leaves of the tree is 1 or 0, the path always is 0.\\n        return 0;\\n    }\\n    // Get the height of the left subtree. This is equal to the offset of the starting bit of the path\\n    pathLength = Constants.MAX_HEIGHT - getStartingBit(numLeaves);\\n\\n    // Determine the number of leaves in the left subtree\\n    uint256 numLeavesLeftSubTree = (1 << (pathLength - 1));\\n\\n    // If leaf is in left subtree, path length is full height of left subtree\\n    if (key <= numLeavesLeftSubTree - 1) {\\n        return pathLength;\\n    }\\n    // If left sub tree has only one leaf but key is not there, path has one additional step\\n    else if (numLeavesLeftSubTree == 1) {\\n        return 1;\\n    }\\n    // Otherwise, add 1 to height and recurse into right subtree\\n    else {\\n        return 1 + pathLengthFromKey(key - numLeavesLeftSubTree, numLeaves - numLeavesLeftSubTree);\\n    }\\n}\\n\\n/// @notice Returns the minimum number of bits required to represent `x`; the\\n/// result is 0 for `x` == 0.\\n/// @param x Number.\\nfunction _bitsLen(uint256 x) pure returns (uint256) {\\n    uint256 count = 0;\\n\\n    while (x != 0) {\\n        count++;\\n        x >>= 1;\\n    }\\n\\n    return count;\\n}\\n\\n/// @notice Returns the largest power of 2 less than `x`.\\n/// @param x Number.\\nfunction _getSplitPoint(uint256 x) pure returns (uint256) {\\n    // Note: since `x` is always an unsigned int * 2, the only way for this\\n    // to be violated is if the input == 0. Since the input is the end\\n    // index exclusive, an input of 0 is guaranteed to be invalid (it would\\n    // be a proof of inclusion of nothing, which is vacuous).\\n    require(x >= 1);\\n\\n    uint256 bitLen = _bitsLen(x);\\n    uint256 k = 1 << (bitLen - 1);\\n    if (k == x) {\\n        k >>= 1;\\n    }\\n    return k;\\n}\\n\",\"keccak256\":\"0x9760cb3ab3d4f412949b9be1bbdf5d9e7954cad44a94a4f7fe90fcffb86fe7fa\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice Merkle Tree Proof structure.\\nstruct BinaryMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    bytes32[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x9fb953284b455b544091f058fdb11ac73928093517333909c0744d9319410688\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\nimport \\\"./BinaryMerkleProof.sol\\\";\\n\\n/// @title Binary Merkle Tree.\\nlibrary BinaryMerkleTree {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The provided side nodes count is invalid for the proof.\\n        InvalidNumberOfSideNodes,\\n        /// @notice The provided proof key is not part of the tree.\\n        KeyNotInTree,\\n        /// @notice Invalid number of leaves in proof.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The proof contains unexpected side nodes.\\n        UnexpectedInnerHashes,\\n        /// @notice The proof verification expected at least one inner hash.\\n        ExpectedAtLeastOneInnerHash\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which verify the given leaf.\\n    /// @param proof Binary Merkle proof for the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(bytes32 root, BinaryMerkleProof memory proof, bytes memory data)\\n        internal\\n        pure\\n        returns (bool, ErrorCodes)\\n    {\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n            }\\n        } else if (proof.sideNodes.length != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return (false, ErrorCodes.KeyNotInTree);\\n        }\\n\\n        // A sibling at height 1 is created by getting the hash of the data to prove.\\n        bytes32 digest = leafDigest(data);\\n\\n        // Null proof is only valid if numLeaves = 1\\n        // If so, just verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return (root == digest, ErrorCodes.NoError);\\n            } else {\\n                return (false, ErrorCodes.NoError);\\n            }\\n        }\\n\\n        (bytes32 computedHash, ErrorCodes error) = computeRootHash(proof.key, proof.numLeaves, digest, proof.sideNodes);\\n\\n        if (error != ErrorCodes.NoError) {\\n            return (false, error);\\n        }\\n\\n        return (computedHash == root, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Use the leafHash and innerHashes to get the root merkle hash.\\n    /// If the length of the innerHashes slice isn't exactly correct, the result is nil.\\n    /// Recursive impl.\\n    function computeRootHash(uint256 key, uint256 numLeaves, bytes32 leafHash, bytes32[] memory sideNodes)\\n        private\\n        pure\\n        returns (bytes32, ErrorCodes)\\n    {\\n        if (numLeaves == 0) {\\n            return (leafHash, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        if (numLeaves == 1) {\\n            if (sideNodes.length != 0) {\\n                return (leafHash, ErrorCodes.UnexpectedInnerHashes);\\n            }\\n            return (leafHash, ErrorCodes.NoError);\\n        }\\n        if (sideNodes.length == 0) {\\n            return (leafHash, ErrorCodes.ExpectedAtLeastOneInnerHash);\\n        }\\n        uint256 numLeft = _getSplitPoint(numLeaves);\\n        bytes32[] memory sideNodesLeft = slice(sideNodes, 0, sideNodes.length - 1);\\n        ErrorCodes error;\\n        if (key < numLeft) {\\n            bytes32 leftHash;\\n            (leftHash, error) = computeRootHash(key, numLeft, leafHash, sideNodesLeft);\\n            if (error != ErrorCodes.NoError) {\\n                return (leafHash, error);\\n            }\\n            return (nodeDigest(leftHash, sideNodes[sideNodes.length - 1]), ErrorCodes.NoError);\\n        }\\n        bytes32 rightHash;\\n        (rightHash, error) = computeRootHash(key - numLeft, numLeaves - numLeft, leafHash, sideNodesLeft);\\n        if (error != ErrorCodes.NoError) {\\n            return (leafHash, error);\\n        }\\n        return (nodeDigest(sideNodes[sideNodes.length - 1], rightHash), ErrorCodes.NoError);\\n    }\\n\\n    /// @notice creates a slice of bytes32 from the data slice of bytes32 containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes32[] memory _data, uint256 _begin, uint256 _end) internal pure returns (bytes32[] memory) {\\n        if (_begin > _end) {\\n            revert(\\\"Invalid range: _begin is greater than _end\\\");\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            revert(\\\"Invalid range: _begin or _end are out of bounds\\\");\\n        }\\n        bytes32[] memory out = new bytes32[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return out;\\n    }\\n}\\n\",\"keccak256\":\"0x90dc9ac613014c2d3fcebbd23f2b5af67188b7de80b2ef853f20c91a14ce68fd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\n\\n/// @notice Calculate the digest of a node.\\n/// @param left The left child.\\n/// @param right The right child.\\n/// @return digest The node digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(bytes32 left, bytes32 right) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.NODE_PREFIX, left, right));\\n}\\n\\n/// @notice Calculate the digest of a leaf.\\n/// @param data The data of the leaf.\\n/// @return digest The leaf digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(bytes memory data) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, data));\\n}\\n\",\"keccak256\":\"0x2f16501eac14f6e2a61de29d3aa10e3aaf8e0a594fc9cf8dc2d955bb2f6d54e0\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleMultiproof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Multiproof structure. Proves multiple leaves.\\nstruct NamespaceMerkleMultiproof {\\n    // The beginning key of the leaves to verify.\\n    uint256 beginKey;\\n    // The ending key of the leaves to verify.\\n    uint256 endKey;\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n}\\n\",\"keccak256\":\"0x6ae0f3e8413808e06b570202a27a08e3f1236add1b00b5cb4b4ac17049e1960c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Proof structure.\\nstruct NamespaceMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x52eef9f87e34c11d6f8eda6f4a508b420c0193430c4035f49088069b6217ab40\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./NamespaceMerkleProof.sol\\\";\\nimport \\\"./NamespaceMerkleMultiproof.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\n\\n/// @title Namespace Merkle Tree.\\nlibrary NamespaceMerkleTree {\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// @param namespace Namespace of the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        Namespace memory namespace,\\n        bytes memory data\\n    ) internal pure returns (bool) {\\n        // A sibling at height 1 is created by getting the leafDigest of the original data.\\n        NamespaceNode memory node = leafDigest(namespace, data);\\n\\n        // Since we're verifying a leaf, height parameter is 1.\\n        return verifyInner(root, proof, node, 1);\\n    }\\n\\n    /// @notice Verify if inner node exists in Merkle tree, given node, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// proof.key is any key in the subtree rooted at the inner node.\\n    /// @param node The inner node to verify.\\n    /// @param startingHeight Starting height of the proof.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verifyInner(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        NamespaceNode memory node,\\n        uint256 startingHeight\\n    ) internal pure returns (bool) {\\n        // Check starting height is at least 1\\n        if (startingHeight < 1) {\\n            return false;\\n        }\\n        uint256 heightOffset = startingHeight - 1;\\n\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return false;\\n            }\\n        } else if (proof.sideNodes.length + heightOffset != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return false;\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return false;\\n        }\\n        // Handle case where proof is empty: i.e, only one leaf exists, so verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return namespaceNodeEquals(root, node);\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        // The case where inner node is actually the root of a tree with more than one node is not relevant\\n        // to our use case, since the only case where an inner node is the root of the tree is when the tree\\n        // has only one inner node. So, there is no need to handle that case.\\n\\n        uint256 height = startingHeight;\\n        uint256 stableEnd = proof.key;\\n\\n        // While the current subtree (of height 'height') is complete, determine\\n        // the position of the next sibling using the complete subtree algorithm.\\n        // 'stableEnd' tells us the ending index of the last full subtree. It gets\\n        // initialized to 'key' because the first full subtree was the\\n        // subtree of height 1, created above (and had an ending index of\\n        // 'key').\\n\\n        while (true) {\\n            // Determine if the subtree is complete. This is accomplished by\\n            // rounding down the key to the nearest 1 << 'height', adding 1\\n            // << 'height', and comparing the result to the number of leaves in the\\n            // Merkle tree.\\n\\n            uint256 subTreeStartIndex = (proof.key / (1 << height)) * (1 << height);\\n            uint256 subTreeEndIndex = subTreeStartIndex + (1 << height) - 1;\\n\\n            // If the Merkle tree does not have a leaf at index\\n            // 'subTreeEndIndex', then the subtree of the current height is not\\n            // a complete subtree.\\n            if (subTreeEndIndex >= proof.numLeaves) {\\n                break;\\n            }\\n            stableEnd = subTreeEndIndex;\\n\\n            // Determine if the key is in the first or the second half of\\n            // the subtree.\\n            if (proof.sideNodes.length + heightOffset <= height - 1) {\\n                return false;\\n            }\\n            if (proof.key - subTreeStartIndex < (1 << (height - 1))) {\\n                node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            } else {\\n                node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            }\\n\\n            height += 1;\\n        }\\n\\n        // Determine if the next hash belongs to an orphan that was elevated. This\\n        // is the case IFF 'stableEnd' (the last index of the largest full subtree)\\n        // is equal to the number of leaves in the Merkle tree.\\n        if (stableEnd != proof.numLeaves - 1) {\\n            if (proof.sideNodes.length <= height - heightOffset - 1) {\\n                return false;\\n            }\\n            node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            height += 1;\\n        }\\n        // All remaining elements in the proof set will belong to a left sibling.\\n        while (height - heightOffset - 1 < proof.sideNodes.length) {\\n            node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            height += 1;\\n        }\\n\\n        return namespaceNodeEquals(root, node);\\n    }\\n\\n    /// @notice Verify if contiguous elements exists in Merkle tree, given leaves, mutliproof, and root.\\n    /// @param root The root of the tree in which the given leaves are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param namespace Namespace of the leaves. All leaves must have the same namespace.\\n    /// @param data The leaves to verify. Note: leaf data must be the _entire_ share (including namespace prefixing).\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMulti(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        Namespace memory namespace,\\n        bytes[] memory data\\n    ) internal pure returns (bool) {\\n        // Hash all the leaves to get leaf nodes.\\n        NamespaceNode[] memory nodes = new NamespaceNode[](data.length);\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            nodes[i] = leafDigest(namespace, data[i]);\\n        }\\n\\n        // Verify inclusion of leaf nodes.\\n        return verifyMultiHashes(root, proof, nodes);\\n    }\\n\\n    /// @notice Verify if contiguous leaf hashes exists in Merkle tree, given leaf nodes, multiproof, and root.\\n    /// @param root The root of the tree in which the given leaf nodes are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes The leaf nodes to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMultiHashes(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes\\n    ) internal pure returns (bool) {\\n        uint256 leafIndex = 0;\\n        NamespaceNode[] memory leftSubtrees = new NamespaceNode[](proof.sideNodes.length);\\n\\n        for (uint256 i = 0; leafIndex != proof.beginKey && i < proof.sideNodes.length; ++i) {\\n            uint256 subtreeSize = _nextSubtreeSize(leafIndex, proof.beginKey);\\n            leftSubtrees[i] = proof.sideNodes[i];\\n            leafIndex += subtreeSize;\\n        }\\n\\n        // estimate the leaf size of the subtree containing the proof range\\n        uint256 proofRangeSubtreeEstimate = _getSplitPoint(proof.endKey) * 2;\\n        if (proofRangeSubtreeEstimate < 1) {\\n            proofRangeSubtreeEstimate = 1;\\n        }\\n\\n        (NamespaceNode memory rootHash, uint256 proofHead,,) =\\n            _computeRoot(proof, leafNodes, 0, proofRangeSubtreeEstimate, 0, 0);\\n        for (uint256 i = proofHead; i < proof.sideNodes.length; ++i) {\\n            rootHash = nodeDigest(rootHash, proof.sideNodes[i]);\\n        }\\n\\n        return namespaceNodeEquals(rootHash, root);\\n    }\\n\\n    /// @notice Returns the size of the subtree adjacent to `begin` that does\\n    /// not overlap `end`.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    function _nextSubtreeSize(uint256 begin, uint256 end) private pure returns (uint256) {\\n        uint256 ideal = _bitsTrailingZeroes(begin);\\n        uint256 max = _bitsLen(end - begin) - 1;\\n        if (ideal > max) {\\n            return 1 << max;\\n        }\\n        return 1 << ideal;\\n    }\\n\\n    /// @notice Returns the number of trailing zero bits in `x`; the result is\\n    /// 256 for `x` == 0.\\n    /// @param x Number.\\n    function _bitsTrailingZeroes(uint256 x) private pure returns (uint256) {\\n        uint256 mask = 1;\\n        uint256 count = 0;\\n\\n        while (x != 0 && mask & x == 0) {\\n            count++;\\n            x >>= 1;\\n        }\\n\\n        return count;\\n    }\\n\\n    /// @notice Computes the NMT root recursively.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes Leaf nodes for which inclusion is proven.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    /// @param headProof Internal detail: head of proof sidenodes array. Used for recursion. Set to `0` on first call.\\n    /// @param headLeaves Internal detail: head of leaves array. Used for recursion. Set to `0` on first call.\\n    /// @return _ Subtree root.\\n    /// @return _ New proof sidenodes array head. Used for recursion.\\n    /// @return _ New leaves array head. Used for recursion.\\n    /// @return _ If the subtree root is \\\"nil.\\\"\\n    function _computeRoot(\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes,\\n        uint256 begin,\\n        uint256 end,\\n        uint256 headProof,\\n        uint256 headLeaves\\n    ) private pure returns (NamespaceNode memory, uint256, uint256, bool) {\\n        // reached a leaf\\n        if (end - begin == 1) {\\n            // if current range overlaps with proof range, pop and return a leaf\\n            if (proof.beginKey <= begin && begin < proof.endKey) {\\n                // Note: second return value is guaranteed to be `false` by\\n                // construction.\\n                return _popLeavesIfNonEmpty(leafNodes, headLeaves, leafNodes.length, headProof);\\n            }\\n\\n            // if current range does not overlap with proof range,\\n            // pop and return a proof node (leaf) if present,\\n            // else return nil because leaf doesn't exist\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // if current range does not overlap with proof range,\\n        // pop and return a proof node if present,\\n        // else return nil because subtree doesn't exist\\n        if (end <= proof.beginKey || begin >= proof.endKey) {\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // Recursively get left and right subtree\\n        uint256 k = _getSplitPoint(end - begin);\\n        (NamespaceNode memory left, uint256 newHeadProofLeft, uint256 newHeadLeavesLeft,) =\\n            _computeRoot(proof, leafNodes, begin, begin + k, headProof, headLeaves);\\n        (NamespaceNode memory right, uint256 newHeadProof, uint256 newHeadLeaves, bool rightIsNil) =\\n            _computeRoot(proof, leafNodes, begin + k, end, newHeadProofLeft, newHeadLeavesLeft);\\n\\n        // only right leaf/subtree can be non-existent\\n        if (rightIsNil == true) {\\n            return (left, newHeadProof, newHeadLeaves, false);\\n        }\\n        NamespaceNode memory hash = nodeDigest(left, right);\\n        return (hash, newHeadProof, newHeadLeaves, false);\\n    }\\n\\n    /// @notice Pop from the leaf nodes array slice if it's not empty.\\n    /// @param nodes Entire leaf nodes array.\\n    /// @param headLeaves Head of leaf nodes array slice.\\n    /// @param end End of leaf nodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ New head of leaf nodes array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popLeavesIfNonEmpty(NamespaceNode[] memory nodes, uint256 headLeaves, uint256 end, uint256 headProof)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headLeaves, end);\\n        return (node, headProof, newHead, isNil);\\n    }\\n\\n    /// @notice Pop from the proof sidenodes array slice if it's not empty.\\n    /// @param nodes Entire proof sidenodes array.\\n    /// @param headLeaves Head of proof sidenodes array slice.\\n    /// @param end End of proof sidenodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ New head of proof sidenodes array slice.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popProofIfNonEmpty(NamespaceNode[] memory nodes, uint256 headProof, uint256 end, uint256 headLeaves)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headProof, end);\\n        return (node, newHead, headLeaves, isNil);\\n    }\\n\\n    /// @notice Pop from an array slice if it's not empty.\\n    /// @param nodes Entire array.\\n    /// @param head Head of array slice.\\n    /// @param end End of array slice.\\n    /// @return _ Popped node.\\n    /// @return _ New head of array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popIfNonEmpty(NamespaceNode[] memory nodes, uint256 head, uint256 end)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, bool)\\n    {\\n        if (nodes.length == 0 || head >= nodes.length || head >= end) {\\n            NamespaceNode memory node;\\n            return (node, head, true);\\n        }\\n        return (nodes[head], head + 1, false);\\n    }\\n}\\n\",\"keccak256\":\"0xe893ae809f062ad1b77e4e3382f6f34fd78d7dffb55853cfc47b0ffd2d56d590\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceNode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Types.sol\\\";\\n\\n/// @notice Namespace Merkle Tree node.\\nstruct NamespaceNode {\\n    // Minimum namespace.\\n    Namespace min;\\n    // Maximum namespace.\\n    Namespace max;\\n    // Node value.\\n    bytes32 digest;\\n}\\n\\n/// @notice Compares two `NamespaceNode`s.\\n/// @param first First node.\\n/// @param second Second node.\\n/// @return `true` is equal, `false otherwise.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceNodeEquals(NamespaceNode memory first, NamespaceNode memory second) pure returns (bool) {\\n    return first.min.equalTo(second.min) && first.max.equalTo(second.max) && (first.digest == second.digest);\\n}\\n\",\"keccak256\":\"0xdffc1a51e6dbe88cbe1b89f947290b93070b4e4094fbb412d157c0862a2cee55\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Get the minimum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMin(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.lessThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Get the maximum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMax(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.greaterThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Hash a leaf node.\\n/// @param namespace Namespace of the leaf.\\n/// @param data Raw data of the leaf.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(Namespace memory namespace, bytes memory data) pure returns (NamespaceNode memory) {\\n    bytes32 digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, namespace.toBytes(), data));\\n    NamespaceNode memory node = NamespaceNode(namespace, namespace, digest);\\n    return node;\\n}\\n\\n/// @notice Hash an internal node.\\n/// @param l Left child.\\n/// @param r Right child.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(NamespaceNode memory l, NamespaceNode memory r) pure returns (NamespaceNode memory) {\\n    Namespace memory min = namespaceMin(l.min, r.min);\\n    Namespace memory max;\\n    if (l.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = PARITY_SHARE_NAMESPACE();\\n    } else if (r.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = l.max;\\n    } else {\\n        max = namespaceMax(l.max, r.max);\\n    }\\n\\n    bytes32 digest = sha256(\\n        abi.encodePacked(\\n            Constants.NODE_PREFIX,\\n            l.min.toBytes(),\\n            l.max.toBytes(),\\n            l.digest,\\n            r.min.toBytes(),\\n            r.max.toBytes(),\\n            r.digest\\n        )\\n    );\\n\\n    NamespaceNode memory node = NamespaceNode(min, max, digest);\\n    return node;\\n}\\n\",\"keccak256\":\"0x068b2ef59d4b63bbc495494e21bd95371af0e8bac3ae38b739d8cfe4df6722cd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/verifier/DAVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../../Constants.sol\\\";\\nimport \\\"../../DataRootTuple.sol\\\";\\nimport \\\"../../IDAOracle.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleProof.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleTree.sol\\\";\\nimport \\\"../tree/namespace/NamespaceMerkleTree.sol\\\";\\nimport \\\"../tree/Types.sol\\\";\\n\\n/// @notice Contains the necessary parameters to prove that some shares, which were posted to\\n/// the Celestia network, were committed to by the Blobstream smart contract.\\nstruct SharesProof {\\n    // The shares that were committed to.\\n    bytes[] data;\\n    // The shares proof to the row roots. If the shares span multiple rows, we will have multiple nmt proofs.\\n    NamespaceMerkleMultiproof[] shareProofs;\\n    // The namespace of the shares.\\n    Namespace namespace;\\n    // The rows where the shares belong. If the shares span multiple rows, we will have multiple rows.\\n    NamespaceNode[] rowRoots;\\n    // The proofs of the rowRoots to the data root.\\n    BinaryMerkleProof[] rowProofs;\\n    // The proof of the data root tuple to the data root tuple root that was posted to the Blobstream contract.\\n    AttestationProof attestationProof;\\n}\\n\\n/// @notice Contains the necessary parameters to prove that some shares, which were posted to\\n/// the Celestia network, were committed to by the Blobstream smart contract, without including\\n/// the data for those shares, but rather only their digests\\nstruct ShareDigestsProof {\\n    // The digests for the shares that were committed to.\\n    bytes32[] digests;\\n    // The shares proof to the row roots. If the shares span multiple rows, we will have multiple nmt proofs.\\n    NamespaceMerkleMultiproof[] shareProofs;\\n    // The namespace of the shares.\\n    Namespace namespace;\\n    // The rows where the shares belong. If the shares span multiple rows, we will have multiple rows.\\n    NamespaceNode[] rowRoots;\\n    // The proofs of the rowRoots to the data root.\\n    BinaryMerkleProof[] rowProofs;\\n    // The proof of the data root tuple to the data root tuple root that was posted to the Blobstream contract.\\n    AttestationProof attestationProof;\\n}\\n\\n/// @notice Contains the necessary parameters needed to verify that a data root tuple\\n/// was committed to, by the Blobstream smart contract, at some specif nonce.\\nstruct AttestationProof {\\n    // the attestation nonce that commits to the data root tuple.\\n    uint256 tupleRootNonce;\\n    // the data root tuple that was committed to.\\n    DataRootTuple tuple;\\n    // the binary merkle proof of the tuple to the commitment.\\n    BinaryMerkleProof proof;\\n}\\n\\n/// @title DAVerifier: Celestia -> EVM, Data Availability verifier.\\n/// @dev The DAVerifier verifies that some shares, which were posted on Celestia, were committed to\\n/// by the Blobstream smart contract.\\nlibrary DAVerifier {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The shares to the rows proof is invalid.\\n        InvalidSharesToRowsProof,\\n        /// @notice The rows to the data root proof is invalid.\\n        InvalidRowsToDataRootProof,\\n        /// @notice The row to the data root proof is invalid.\\n        InvalidRowToDataRootProof,\\n        /// @notice The data root tuple to the data root tuple roof proof is invalid.\\n        InvalidDataRootTupleToDataRootTupleRootProof,\\n        /// @notice The number of share proofs isn't equal to the number of rows roots.\\n        UnequalShareProofsAndRowRootsNumber,\\n        /// @notice The number of rows proofs isn't equal to the number of rows roots.\\n        UnequalRowProofsAndRowRootsNumber,\\n        /// @notice The verifier data length isn't equal to the number of shares in the shares proofs.\\n        UnequalDataLengthAndNumberOfSharesProofs,\\n        /// @notice The number of leaves in the binary merkle proof is not divisible by 4.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The provided range is invalid.\\n        InvalidRange,\\n        /// @notice The provided range is out of bounds.\\n        OutOfBoundsRange\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verifies that the shares, which were posted to Celestia, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _sharesProof The proof of the shares to the data root tuple root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRoot(IDAOracle _bridge, SharesProof memory _sharesProof, bytes32 _root)\\n        internal\\n        view\\n        returns (bool, ErrorCodes)\\n    {\\n        // checking that the data root was committed to by the Blobstream smart contract.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRoot(\\n            _bridge, _sharesProof.rowRoots, _sharesProof.rowProofs, _sharesProof.attestationProof, _root\\n        );\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifySharesToDataRootTupleRootProof(\\n            _sharesProof.data,\\n            _sharesProof.shareProofs,\\n            _sharesProof.namespace,\\n            _sharesProof.rowRoots,\\n            _sharesProof.rowProofs,\\n            _root\\n        );\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies that the shares, which were posted to Celestia, were committed to by the Blobstream smart contract,\\n    /// without including the data for those shares, but rather only their digests\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _shareDigestsProof The proof of the shares to the data root tuple root, including only share digests rather than their data\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyShareDigestsToDataRootTupleRoot(IDAOracle _bridge, ShareDigestsProof memory _shareDigestsProof, bytes32 _root)\\n        internal\\n        view\\n        returns (bool, ErrorCodes)\\n    {\\n        // checking that the data root was committed to by the Blobstream smart contract.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRoot(\\n            _bridge, _shareDigestsProof.rowRoots, _shareDigestsProof.rowProofs, _shareDigestsProof.attestationProof, _root\\n        );\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifyShareDigestsToDataRootTupleRootProof(\\n            _shareDigestsProof.digests,\\n            _shareDigestsProof.shareProofs,\\n            _shareDigestsProof.namespace,\\n            _shareDigestsProof.rowRoots,\\n            _shareDigestsProof.rowProofs,\\n            _root\\n        );\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the shares to data root tuple root proof.\\n    /// @param _data The data that needs to proven.\\n    /// @param _shareProofs The share to the row roots proof.\\n    /// @param _namespace The namespace of the shares.\\n    /// @param _rowRoots The row roots where the shares belong.\\n    /// @param _rowProofs The proofs of the rowRoots to the data root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRootProof(\\n        bytes[] memory _data,\\n        NamespaceMerkleMultiproof[] memory _shareProofs,\\n        Namespace memory _namespace,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // verifying the row root to data root tuple root proof.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        // checking that the shares were committed to by the rows roots.\\n        if (_shareProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalShareProofsAndRowRootsNumber);\\n        }\\n\\n        uint256 numberOfSharesInProofs = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            numberOfSharesInProofs += _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n        }\\n\\n        if (_data.length != numberOfSharesInProofs) {\\n            return (false, ErrorCodes.UnequalDataLengthAndNumberOfSharesProofs);\\n        }\\n\\n        uint256 cursor = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            uint256 sharesUsed = _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n            (bytes[] memory s, ErrorCodes err) = slice(_data, cursor, cursor + sharesUsed);\\n            if (err != ErrorCodes.NoError) {\\n                return (false, err);\\n            }\\n            if (!NamespaceMerkleTree.verifyMulti(_rowRoots[i], _shareProofs[i], _namespace, s)) {\\n                return (false, ErrorCodes.InvalidSharesToRowsProof);\\n            }\\n            cursor += sharesUsed;\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies the share digests to data root tuple root proof.\\n    /// @param _digests The data digests that need to proven.\\n    /// @param _shareProofs The share to the row roots proof.\\n    /// @param _namespace The namespace of the shares.\\n    /// @param _rowRoots The row roots where the shares belong.\\n    /// @param _rowProofs The proofs of the rowRoots to the data root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyShareDigestsToDataRootTupleRootProof(\\n        bytes32[] memory _digests,\\n        NamespaceMerkleMultiproof[] memory _shareProofs,\\n        Namespace memory _namespace,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // verifying the row root to data root tuple root proof.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        // checking that the shares were committed to by the rows roots.\\n        if (_shareProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalShareProofsAndRowRootsNumber);\\n        }\\n\\n        uint256 numberOfSharesInProofs = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            numberOfSharesInProofs += _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n        }\\n\\n        if (_digests.length != numberOfSharesInProofs) {\\n            return (false, ErrorCodes.UnequalDataLengthAndNumberOfSharesProofs);\\n        }\\n\\n        uint256 cursor = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            uint256 sharesUsed = _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n            (bytes32[] memory s, ErrorCodes err) = sliceDigests(_digests, cursor, cursor + sharesUsed);\\n            if (err != ErrorCodes.NoError) {\\n                return (false, err);\\n            }\\n            NamespaceNode[] memory nodes = new NamespaceNode[](s.length);\\n            for (uint256 iSlice = 0; iSlice < s.length; ++iSlice) {\\n                nodes[iSlice] = NamespaceNode(_namespace, _namespace, s[iSlice]);\\n            }\\n            // Verify inclusion of leaf nodes.\\n            if (!NamespaceMerkleTree.verifyMultiHashes(_rowRoots[i], _shareProofs[i], nodes)) {\\n                return (false, ErrorCodes.InvalidSharesToRowsProof);\\n            }\\n            cursor += sharesUsed;\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a row/column root, from a Celestia block, was committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifyRowRootToDataRootTupleRootProof(_rowRoot, _rowProof, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies that a row/column root proof, from a Celestia block, to the data root tuple root.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRootProof(\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        bytes memory rowRoot = abi.encodePacked(_rowRoot.min.toBytes(), _rowRoot.max.toBytes(), _rowRoot.digest);\\n        (bool valid,) = BinaryMerkleTree.verify(_root, _rowProof, rowRoot);\\n        if (!valid) {\\n            return (false, ErrorCodes.InvalidRowToDataRootProof);\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a set of rows/columns, from a Celestia block, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        // checking that the rows roots commit to the data root.\\n        (bool valid, ErrorCodes error) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the proof a set of rows/columns, from a Celestia block, to their corresponding data root.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRootProof(\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // checking that the rows roots commit to the data root.\\n        if (_rowProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalRowProofsAndRowRootsNumber);\\n        }\\n\\n        for (uint256 i = 0; i < _rowProofs.length; i++) {\\n            bytes memory rowRoot =\\n                abi.encodePacked(_rowRoots[i].min.toBytes(), _rowRoots[i].max.toBytes(), _rowRoots[i].digest);\\n            (bool valid,) = BinaryMerkleTree.verify(_root, _rowProofs[i], rowRoot);\\n            if (!valid) {\\n                return (false, ErrorCodes.InvalidRowsToDataRootProof);\\n            }\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a row/column root to data root binary merkle proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and was successfully committed to using\\n    //  the `DAVerifier.verifyRowRootToDataRootTupleRoot()` method\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof to have number of leaves equal to 0.\\n    /// @param _proof The proof of the row/column root to the data root.\\n    /// @return The square size of the corresponding block.\\n    /// @return an error code if the _proof is invalid, Errors.NoError otherwise.\\n    function computeSquareSizeFromRowProof(BinaryMerkleProof memory _proof)\\n        internal\\n        pure\\n        returns (uint256, ErrorCodes)\\n    {\\n        if (_proof.numLeaves % 4 != 0) {\\n            return (0, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        // we divide the number of leaves of the proof by 4 because the rows/columns tree is constructed\\n        // from the extended block row roots and column roots.\\n        return (_proof.numLeaves / 4, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a shares to row/column root proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and that the shares were successfully committed to using\\n    /// the `DAVerifier.verifySharesToDataRootTupleRoot()` method.\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof not to contain any side node.\\n    /// @param _proof The proof of the shares to the row/column root.\\n    /// @return The square size of the corresponding block.\\n    function computeSquareSizeFromShareProof(NamespaceMerkleMultiproof memory _proof) internal pure returns (uint256) {\\n        uint256 extendedSquareRowSize = 2 ** _proof.sideNodes.length;\\n        // we divide the extended square row size by 2 because the square size is the\\n        // the size of the row of the original square size.\\n        return extendedSquareRowSize / 2;\\n    }\\n\\n    /// @notice creates a slice of bytes from the data slice of bytes containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes[] memory _data, uint256 _begin, uint256 _end)\\n        internal\\n        pure\\n        returns (bytes[] memory, ErrorCodes)\\n    {\\n        if (_begin > _end) {\\n            return (_data, ErrorCodes.InvalidRange);\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            return (_data, ErrorCodes.OutOfBoundsRange);\\n        }\\n        bytes[] memory out = new bytes[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return (out, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice creates a slice of bytes32 from the digests slice of bytes32 containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _digests The slice that we want to select digests from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced digests.\\n    function sliceDigests(bytes32[] memory _digests, uint256 _begin, uint256 _end)\\n        internal\\n        pure\\n        returns (bytes32[] memory, ErrorCodes)\\n    {\\n        if (_begin > _end) {\\n            return (_digests, ErrorCodes.InvalidRange);\\n        }\\n        if (_begin > _digests.length || _end > _digests.length) {\\n            return (_digests, ErrorCodes.OutOfBoundsRange);\\n        }\\n        bytes32[] memory out = new bytes32[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _digests[i];\\n        }\\n        return (out, ErrorCodes.NoError);\\n    }\\n}\\n\",\"keccak256\":\"0x2f6c7ada62ca5ffee212aa2e677b8189c4ae1b4778d23eeae182413dabedfdf4\",\"license\":\"Apache-2.0\"},\"contracts/CelestiaRelay.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {IInputBox} from \\\"@cartesi/rollups/contracts/inputs/IInputBox.sol\\\";\\nimport \\\"../blobstream-contracts/src/IDAOracle.sol\\\";\\nimport \\\"../blobstream-contracts/src/lib/verifier/DAVerifier.sol\\\";\\n\\n\\n/// @title CelestiaRelay\\n/// @notice Relays Celestia blocks as inputs to Cartesi DApps\\ncontract CelestiaRelay {\\n\\n    IInputBox internal inputBox;\\n    IDAOracle internal blobstreamX;\\n\\n    /// @notice Constructor\\n    /// @param _inputBox InputBox contract to send inputs to Cartesi DApps\\n    /// @param _blobstreamX BlobstreamX contract where Celestia commitments are being stored\\n    constructor(IInputBox _inputBox, IDAOracle _blobstreamX) {\\n        inputBox = _inputBox;\\n        blobstreamX = _blobstreamX;\\n    }\\n\\n    /// @notice Relay a pointer to the specified Celestia shares as an input to a DApp's input box\\n    /// @dev Called by clients to securely process Celestia data in Cartesi DApps\\n    /// @param _dapp The address of the DApp\\n    /// @param _proof ShareDigestsProof object showing that a range of shares is committed to Celestia\\n    /// @param _execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The hash of the input as returned by the Cartesi DApp's input box\\n    function relayShares(\\n        address _dapp,\\n        ShareDigestsProof memory _proof,\\n        bytes calldata _execLayerData\\n    ) external returns (bytes32)\\n    {\\n        // retrieve \\\"dataRoot\\\" from proof (commitment for Celestia block that contains the shares)\\n        bytes32 dataRoot = _proof.attestationProof.tuple.dataRoot;\\n\\n        // verify if shares are committed to the Celestia Blobstream contract\\n        (bool verified, DAVerifier.ErrorCodes errorCode) =\\n            DAVerifier.verifyShareDigestsToDataRootTupleRoot(\\n                blobstreamX,\\n                _proof,\\n                dataRoot\\n            );\\n        require(verified, \\\"Shares not committed to Celestia BlobstreamX contract\\\");\\n\\n        // relay data specification as a Cartesi DApp input\\n        // input payload corresponds to the ABI encoding of the following fields:\\n        // - namespace: Celestia identifier for the DApp (29 bytes)\\n        // - dataRoot: commitment for the Celestia block that contains the relayed data (32 bytes)\\n        // - blockHeight: height of the Celestia block that contains the relayed data (32 bytes)\\n        // - start: index of the initial \\\"share\\\" (chunk) for the relayed data within the given Celestia block (32 bytes)\\n        // - end: index of the final \\\"share\\\" (chunk) for the relayed data within the given Celestia block (32 bytes)\\n        // - execLayerData: arbitrary additional data to be interpreted by the DApp code\\n        Namespace memory namespace = _proof.namespace;\\n        uint256 blockHeight = _proof.attestationProof.tuple.height;\\n        uint256 start = _proof.shareProofs[0].beginKey;\\n        uint256 end = _proof.shareProofs[_proof.shareProofs.length-1].endKey;\\n        return inputBox.addInput(_dapp, abi.encode(namespace, dataRoot, blockHeight, start, end, _execLayerData));\\n    }\\n}\\n\",\"keccak256\":\"0x23ba393293bd72069e4ae19ef05341f81259902af29ffe386378556c7decbb47\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346100305761001a610014610146565b9061021e565b610022610035565b612efe6102378239612efe90f35b61003b565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061006a90610040565b810190811060018060401b0382111761008257604052565b61004a565b9061009a610093610035565b9283610060565b565b600080fd5b60018060a01b031690565b6100b5906100a1565b90565b6100c1906100ac565b90565b6100cd816100b8565b036100d457565b600080fd5b905051906100e6826100c4565b565b6100f1906100ac565b90565b6100fd816100e8565b0361010457565b600080fd5b90505190610116826100f4565b565b9190604083820312610141578061013561013e92600086016100d9565b93602001610109565b90565b61009c565b6101646131358038038061015981610087565b928339810190610118565b9091565b60001b90565b9061017f60018060a01b0391610168565b9181191691161790565b90565b6101a061019b6101a5926100a1565b610189565b6100a1565b90565b6101b19061018c565b90565b6101bd906101a8565b90565b90565b906101d86101d36101df926101b4565b6101c0565b825461016e565b9055565b6101ec9061018c565b90565b6101f8906101e3565b90565b90565b9061021361020e61021a926101ef565b6101fb565b825461016e565b9055565b9061022d6102349260006101c3565b60016101fe565b56fe60806040526004361015610013575b610851565b61001e60003561002d565b63c417c6850361000e57610818565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b90565b61011e81610112565b0361012557565b600080fd5b9050359061013782610115565b565b9092919261014e610149826100f0565b6100d1565b938185526020808601920283019281841161018b57915b8383106101725750505050565b60208091610180848661012a565b815201920191610165565b61010d565b9080601f830112156101ae578160206101ab93359101610139565b90565b6100eb565b67ffffffffffffffff81116101cb5760208091020190565b610092565b90565b6101dc816101d0565b036101e357565b600080fd5b905035906101f5826101d3565b565b67ffffffffffffffff811161020f5760208091020190565b610092565b60ff60f81b1690565b61022681610214565b0361022d57565b600080fd5b9050359061023f8261021d565b565b63ffffffff191690565b61025481610241565b0361025b57565b600080fd5b9050359061026d8261024b565b565b91906040838203126102ab576102a49061028960406100d1565b936102978260008301610232565b6000860152602001610260565b6020830152565b610083565b919060a0838203126102fe576102f7906102ca60606100d1565b936102d8826000830161026f565b60008601526102ea826040830161026f565b602086015260800161012a565b6040830152565b610083565b90929192610318610313826101f7565b6100d1565b9381855260a060208601920283019281841161035757915b83831061033d5750505050565b602060a09161034c84866102b0565b815201920191610330565b61010d565b9080601f8301121561037a5781602061037793359101610303565b90565b6100eb565b9190916060818403126103e55761039660606100d1565b926103a481600084016101e8565b60008501526103b681602084016101e8565b6020850152604082013567ffffffffffffffff81116103e0576103d9920161035c565b6040830152565b6100e6565b610083565b9291906103fe6103f9826101b3565b6100d1565b93818552602080860192028101918383116104555781905b838210610424575050505050565b813567ffffffffffffffff811161045057602091610445878493870161037f565b815201910190610416565b6100eb565b61010d565b9080601f8301121561047857816020610475933591016103ea565b90565b6100eb565b67ffffffffffffffff81116104955760208091020190565b610092565b919091606081840312610501576104b160606100d1565b9260008201359167ffffffffffffffff83116104fc576104d6826104f5948301610190565b60008601526104e882602083016101e8565b60208601526040016101e8565b6040830152565b6100e6565b610083565b92919061051a6105158261047d565b6100d1565b93818552602080860192028101918383116105715781905b838210610540575050505050565b813567ffffffffffffffff811161056c57602091610561878493870161049a565b815201910190610532565b6100eb565b61010d565b9080601f830112156105945781602061059193359101610506565b90565b6100eb565b91906040838203126105d5576105ce906105b360406100d1565b936105c182600083016101e8565b600086015260200161012a565b6020830152565b610083565b919091608081840312610640576105f160606100d1565b926105ff81600084016101e8565b60008501526106118160208401610599565b6020850152606082013567ffffffffffffffff811161063b57610634920161049a565b6040830152565b6100e6565b610083565b91909160e0818403126107415761065c60c06100d1565b92600082013567ffffffffffffffff811161073c578161067d918401610190565b6000850152602082013567ffffffffffffffff811161073757816106a291840161045a565b60208501526106b4816040840161026f565b6040850152608082013567ffffffffffffffff811161073257816106d991840161035c565b606085015260a082013567ffffffffffffffff811161072d57816106fe918401610576565b608085015260c082013567ffffffffffffffff81116107285761072192016105da565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b600080fd5b909182601f830112156107855781359167ffffffffffffffff831161078057602001926001830284011161077b57565b61010d565b610746565b6100eb565b916060838303126107f0576107a28260008501610074565b92602081013567ffffffffffffffff81116107eb57836107c3918301610645565b92604082013567ffffffffffffffff81116107e6576107e2920161074b565b9091565b610043565b610043565b61003e565b6107fe90610112565b9052565b9190610816906000602085019401906107f5565b565b3461084c5761084861083761082e36600461078a565b92919091610c29565b61083f610033565b91829182610802565b0390f35b610039565b600080fd5b600090565b6108659051610112565b90565b60001c90565b60018060a01b031690565b61088561088a91610868565b61086e565b90565b6108979054610879565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b6108fe603560409261089a565b610907816108a3565b0190565b61092190602081019060008183039101526108f1565b90565b1561092b57565b610933610033565b62461bcd60e51b8152806109496004820161090b565b0390fd5b61095790516101d0565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b9061097e82610970565b81101561098f576020809102010190565b61095a565b90565b90565b6109ae6109a96109b392610994565b610997565b6101d0565b90565b90565b6109cd6109c86109d2926109b6565b610997565b6101d0565b90565b634e487b7160e01b600052601160045260246000fd5b6109fa610a00919392936101d0565b926101d0565b8203918211610a0b57565b6109d5565b60018060a01b031690565b610a27610a2c91610868565b610a10565b90565b610a399054610a1b565b90565b610a50610a4b610a5592610048565b610997565b610048565b90565b610a6190610a3c565b90565b610a6d90610a58565b90565b610a7990610214565b9052565b610a8690610241565b9052565b90602080610aae93610aa460008201516000860190610a70565b0151910190610a7d565b565b610ab9906101d0565b9052565b60209181520190565b90826000939282370152565b9190610aec81610ae581610af195610abd565b8095610ac6565b610088565b0190565b92610b539795919694610b32610b3c92610b28610b4696610b1e60e08a019c60008b0190610a8a565b60408901906107f5565b6060870190610ab0565b6080850190610ab0565b60a0830190610ab0565b60c0818503910152610ad2565b90565b60e01b90565b90505190610b6982610115565b565b90602082820312610b8557610b8291600001610b5c565b90565b61003e565b610b9390610053565b9052565b5190565b60005b838110610baf575050906000910152565b806020918301518185015201610b9e565b610bdf610be8602093610bed93610bd681610b97565b93848093610abd565b95869101610b9b565b610088565b0190565b91610c1592610c0860408201936000830190610b8a565b6020818403910152610bc0565b90565b610c20610033565b3d6000823e3d90fd5b91610d3c6000602094610c3a610856565b50610d25610c50878060a089015101510161085b565b610c6e610c68610c60600161088d565b898491610da0565b50610924565b610d17604088015197610c89868b60a084015101510161094d565b9a610ce38b610cdc610cb28a610cab84880151610ca58361099a565b90610974565b510161094d565b94610cd6610cc68480840151930151610970565b610cd060016109b9565b906109eb565b90610974565b510161094d565b98610cf5610cf089610a2f565b610a64565b99631789cd63979b959d9390919293610d0c610033565b9e8f978f8901610af5565b8882018103825203886100a8565b610d47610d30610033565b97889687958694610b56565b845260048401610bf1565b03925af1908115610d8c57600091610d5e575b5090565b610d7f915060203d8111610d85575b610d7781836100a8565b810190610b6b565b38610d5a565b503d610d6d565b610c18565b600090565b600090565b151590565b91610dd2610dda9493610db1610d91565b50610dba610d96565b506060840151608085015160a0860151918593610f94565b949015610d9b565b610e0c57610e069293506000820151916020810151604082015190608060608401519301519394611228565b91909190565b505060009190565b610e1d90610a58565b90565b610e2981610d9b565b03610e3057565b600080fd5b90505190610e4282610e20565b565b90602082820312610e5e57610e5b91600001610e35565b90565b61003e565b610e6c906101d0565b9052565b610e7990610112565b9052565b90602080610ea193610e9760008201516000860190610e63565b0151910190610e70565b565b5190565b60209181520190565b60200190565b90610ec381602093610e70565b0190565b60200190565b90610eea610ee4610edd84610ea3565b8093610ea7565b92610eb0565b9060005b818110610efb5750505090565b909192610f14610f0e6001928651610eb6565b94610ec7565b9101919091610eee565b90610f5c90604080610f3f6060840160008701518582036000870152610ecd565b94610f5260208201516020860190610e63565b0151910190610e63565b90565b610f84610f91949293610f7a60808401956000850190610ab0565b6020830190610e7d565b6060818403910152610f1e565b90565b610fb66020919593949295610fa7610d91565b50610fb0610d96565b50610e14565b631f3302a990610fec610fcb6000860161094d565b92610ff7604086880151970151610fe0610033565b97889687958695610b56565b855260048501610f5f565b03915afa80156110635761101491600091611035575b5015610d9b565b61102a57611024929190916115ab565b91909190565b505050600090600490565b611056915060203d811161105c575b61104e81836100a8565b810190610e44565b3861100d565b503d611044565b610c18565b5190565b600161107891016101d0565b90565b61108a611090919392936101d0565b926101d0565b820180921161109b57565b6109d5565b634e487b7160e01b600052602160045260246000fd5b600b11156110c057565b6110a0565b906110cf826110b6565b565b906110e36110de836101f7565b6100d1565b918252565b6110f260606100d1565b90565b6110ff60406100d1565b90565b600090565b600090565b6111146110f5565b9060208083611121611102565b81520161112c611107565b81525050565b61113a61110c565b90565b600090565b61114a6110e8565b906020808084611158611132565b815201611163611132565b81520161116e61113d565b81525050565b61117c611142565b90565b60005b82811061118e57505050565b602090611199611174565b8184015201611182565b906111c86111b0836110d1565b926020806111be86936101f7565b920191039061117f565b565b906111d482610ea3565b8110156111e5576020809102010190565b61095a565b6111f460606100d1565b90565b52565b9061120490610112565b9052565b9061121282611068565b811015611223576020809102010190565b61095a565b94611255919461124d9161123a610d91565b50611243610d96565b50859190916115ab565b919015610d9b565b611516575061126383610970565b61127d61127761127285611068565b6101d0565b916101d0565b0361150a5761128c600061099a565b94611297600061099a565b955b866112b46112ae6112a988610970565b6101d0565b916101d0565b1015611309576112fd611303916112f76112db60206112d48a8d90610974565b510161094d565b6112f160006112ea8d8c610974565b510161094d565b906109eb565b9061107b565b9661106c565b95611299565b909295509390929361132c61132661132084610ea3565b926101d0565b916101d0565b036114fd579061133c600061099a565b611346600061099a565b5b8061136261135c61135789610970565b6101d0565b916101d0565b10156114ee5761139f611382602061137b898590610974565b510161094d565b61139960006113928a8690610974565b510161094d565b906109eb565b6113b585846113af86859061107b565b91611724565b949094806113cc6113c660006110c5565b916110c5565b036114de57506113e36113de86610ea3565b6111a3565b956113ee600061099a565b5b8061140a6114046113ff8a610ea3565b6101d0565b916101d0565b101561147a576114759061146e8a61145b8a61145261143361142e859388906111ca565b61085b565b9161144961143f6111ea565b95600087016111f7565b602085016111f7565b604083016111fa565b8a83916114688383611208565b52611208565b515061106c565b6113ef565b509450946114a86114ae919493946114938b8790611208565b51906114a08b8890610974565b51909161189a565b15610d9b565b6114ce576114c6916114c0919061107b565b9161106c565b929192611347565b5050505092505050600090600190565b9850965050505050505060009190565b50509350505050600190600090565b5092505050600090600790565b50505050600090600590565b94935050505060009190565b5190565b62ffffff191690565b90565b61153e61154391611526565b61152f565b9052565b90565b61155661155b91610112565b611547565b9052565b6020939261157f601d83611577829561158797611532565b018092611532565b01809261154a565b0190565b9061159582611522565b8110156115a6576020809102010190565b61095a565b9190916115b6610d91565b506115bf610d96565b506115c983611522565b6115e36115dd6115d884611068565b6101d0565b916101d0565b036116d1576115f2600061099a565b5b8061160e61160861160387611522565b6101d0565b916101d0565b10156116c5576116a76116a0611632600061162a868690611208565b510151611b2c565b61168b61164d6020611645888890611208565b510151611b2c565b9161167c61166860406116618a8a90611208565b510161085b565b611670610033565b9485936020850161155f565b602082018103825203826100a8565b859061169888869061158b565b519091611ba3565b5015610d9b565b6116b9576116b49061106c565b6115f3565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b906116f36116ee836100f0565b6100d1565b918252565b369037565b9061172261170a836116e1565b9260208061171886936100f0565b92019103906116f8565b565b92909261172f6116dc565b50611738610d96565b508361174c611746856101d0565b916101d0565b1161181f578361176c61176661176184610ea3565b6101d0565b916101d0565b1180156117fd575b6117f35761178b6117868486906109eb565b6116fd565b91845b806117a161179b876101d0565b916101d0565b10156117e7576117e2906117dd6117c16117bc8684906111ca565b61085b565b6117d887916117d1858c906109eb565b90926111ca565b6111fa565b61106c565b61178e565b50935050905090600090565b9150915090600a90565b508261181961181361180e84610ea3565b6101d0565b916101d0565b11611774565b9150915090600990565b611832906101d0565b60001981146118415760010190565b6109d5565b90565b61185d61185861186292611846565b610997565b6101d0565b90565b61187461187a919392936101d0565b926101d0565b916118868382026101d0565b92818404149015171561189557565b6109d5565b6118a2610d91565b506118ad600061099a565b936118c36118be6040850151611068565b6111a3565b916118ce600061099a565b955b806118ee6118e86118e36000890161094d565b6101d0565b916101d0565b141580611a3d575b15611952576119468161191861194c9361191260008a0161094d565b90611da9565b61193e61192a60408a01518c90611208565b51888c916119388383611208565b52611208565b51509061107b565b96611829565b956118d0565b50939094506119c9915061198361197361196e6020860161094d565b611e7f565b61197d6002611849565b90611865565b8061199761199160016109b9565b916101d0565b10611a2d575b8391600091906000906119c36119bd6119b760009661099a565b9361099a565b9461099a565b94611f17565b505093905b846119ed6119e76119e26040870151611068565b6101d0565b916101d0565b1015611a1c57611a10611a1691611a0960408601518890611208565b51906121e0565b9461106c565b936119ce565b909350611a2a92915061234e565b90565b50611a3860016109b9565b61199d565b5086611a5d611a57611a526040890151611068565b6101d0565b916101d0565b106118f6565b600090565b611a729051610214565b90565b611a7f9051610241565b90565b90565b611a91611a9691610214565b611a82565b9052565b90565b611aa9611aae91610241565b611a9a565b9052565b600181611ac5611acd93601c9695611a85565b018092611a9d565b0190565b60200190565b611ae19051611526565b90565b1b90565b611b02611afd611af783610b97565b92611ad1565b611ad7565b90601d8110611b10575b5090565b611b259062ffffff1990601d03600802611ae4565b1638611b0c565b611b8090611b38611a63565b50611b7b611b546020611b4d60008501611a68565b9301611a75565b91611b6c611b60610033565b93849260208401611ab2565b602082018103825203826100a8565b611ae8565b90565b600090565b60061115611b9257565b6110a0565b90611ba182611b88565b565b9091611bad610d91565b50611bb6611b83565b50611bc36040840161094d565b611bd6611bd060016109b9565b916101d0565b1115600014611d2d57611bec6000840151610ea3565b611bff611bf9600061099a565b916101d0565b03611d22575b611c116020840161094d565b611c2e611c28611c236040870161094d565b6101d0565b916101d0565b1015611d1757611c3d9061254a565b91611c4b6000820151610ea3565b611c5e611c58600061099a565b916101d0565b14611ccc579182611c756020611c8e94950161094d565b916000611c846040840161094d565b91920151926125b9565b80611ca2611c9c6000611b97565b91611b97565b03611cc25750611cb5611cbb9192610112565b91610112565b1490600090565b9291505060009190565b6040611cd8910161094d565b611ceb611ce560016109b9565b916101d0565b14600014611d0d57611d00611d069192610112565b91610112565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611d3a6000840151610ea3565b611d6c611d66611d61611d4f6020880161094d565b611d5b6040890161094d565b906123f6565b6101d0565b916101d0565b0315611c0557505050600090600190565b600090565b611da190611d9b611d95611da6946101d0565b916101d0565b90611ae4565b6101d0565b90565b611dd0611dcb611de092611dbb611d7d565b50611dc5816127d7565b946109eb565b61285e565b611dda60016109b9565b906109eb565b81611df3611ded836101d0565b916101d0565b11611e0f5750611e0c90611e0760016109b9565b611d82565b90565b611e239150611e1e60016109b9565b611d82565b90565b15611e2d57565b600080fd5b60ff1690565b611e4c611e47611e51926109b6565b610997565b611e32565b90565b1c90565b611e7790611e71611e6b611e7c94611e32565b916101d0565b90611e54565b6101d0565b90565b611e87611d7d565b50611ea681611e9f611e9960016109b9565b916101d0565b1015611e26565b611ed6611eb28261285e565b611ed1611ecb600192611ec560016109b9565b906109eb565b916109b9565b611d82565b90611eea611ee483926101d0565b916101d0565b14611ef3575b90565b611f0790611f016001611e38565b90611e58565b611ef0565b611f14611142565b90565b91909293959495611f26611f0c565b50611f2f611d7d565b50611f38611d7d565b50611f41610d91565b50611f4d8583906109eb565b611f60611f5a60016109b9565b916101d0565b1461206c5784611f83611f7d611f786000870161094d565b6101d0565b916101d0565b11158015612046575b61202457611fc090611fa7611fa28785906109eb565b611e7f565b978491868590611fb8878d9061107b565b929394611f17565b91611fe3979391611fda959350949199909495969261107b565b91929394611f17565b94919092909294611ffd611ff76001610d9b565b91610d9b565b146120175761200b916121e0565b90929160009193929190565b5090929160009193929190565b939161203c95969350604091500151929091926128f7565b9193909293929190565b508161206561205f61205a6020870161094d565b6101d0565b916101d0565b1015611f8c565b93919061207f600083989597980161094d565b61209161208b836101d0565b916101d0565b111590816120de575b506120bb576120b1945060400151929091926128f7565b9193909293929190565b505090826120cd6120d4949391611068565b91926128b3565b9193909293929190565b90506120fd6120f76120f26020850161094d565b6101d0565b916101d0565b103861209a565b61210c61110c565b90565b60f81b90565b61212961212461212e926109b6565b61210f565b610214565b90565b61213b6001612115565b90565b9461218c6020601d9661218488839c9b9861217c826121949a61217461219c9f8061216c600192869f611a85565b018092611532565b018092611532565b01809261154a565b018092611532565b018092611532565b01809261154a565b0190565b60001b90565b905090565b6121d06121c7926020926121be81610b97565b948580936121a6565b93849101610b9b565b0190565b6121dd916121ab565b90565b906121e9611f0c565b50602060006122bd61220282860151838601519061293a565b9361220b612104565b506122218387015161221b6129cc565b90612a12565b831461230b576122ac6122326129cc565b965b61229e61223f612131565b9161224c87820151611b2c565b94612265604061225e8b850151611b2c565b930161085b565b61227189830151611b2c565b9061228a60406122838d860151611b2c565b940161085b565b93612293610033565b9889978d890161213e565b8682018103825203826100a8565b6122b4610033565b918291826121d4565b039060025afa1561230657612303906122fa6122da6000516121a0565b91936122f16122e76111ea565b95600087016111f7565b602085016111f7565b604083016111fa565b90565b610c18565b6123208382015161231a6129cc565b90612a12565b8314612334576122ac84870151965b612234565b6122ac612348858801518684015190612a42565b9661232f565b90612357610d91565b5061236b6000830151600083015190612a12565b806123b0575b918261237d575b505090565b6123a891925061239d6040612396816123a2940161085b565b940161085b565b610112565b91610112565b143880612378565b506123c46020830151602083015190612a12565b612371565b90565b6123e06123db6123e5926123c9565b610997565b6101d0565b90565b6123f36101006123cc565b90565b6123fe611d7d565b508161241361240d60016109b9565b916101d0565b11156124f7576124336124246123e8565b61242d84612a67565b906109eb565b9161245b60016124566124508661244a60016109b9565b906109eb565b916109b9565b611d82565b908261248261247c6124778561247160016109b9565b906109eb565b6101d0565b916101d0565b11156000146124915750505090565b90809293506124a96124a360016109b9565b916101d0565b146000146124c1575050506124be60016109b9565b90565b6124db6124e1926124d560019582906109eb565b926109eb565b906123f6565b906124ef6124f492916109b9565b61107b565b90565b5050612503600061099a565b90565b61251a61251561251f92610994565b61210f565b610214565b90565b61252c6000612506565b90565b806125406001926125479594611a85565b01906121ab565b90565b600061259b60209261255a610856565b5061258a612566612522565b61257c612571610033565b93849288840161252f565b8682018103825203826100a8565b612592610033565b918291826121d4565b039060025afa156125b4576125b16000516121a0565b90565b610c18565b9392936125c4610856565b506125cd611b83565b50816125e26125dc600061099a565b916101d0565b146127cc57816125fb6125f560016109b9565b916101d0565b1461279b5761260985610ea3565b61261c612616600061099a565b916101d0565b146127905761262a82611e7f565b61265c866000906126566126506126408b610ea3565b61264a60016109b9565b906109eb565b9261099a565b90612bd7565b91612665611b83565b5080612679612673846101d0565b916101d0565b1061270c576126a993929161269b6126a192612693610856565b5082906109eb565b936109eb565b8491926125b9565b9091816126bf6126b96000611b97565b91611b97565b036127045750506126f96126f4846126ee6126de6126fe969792610ea3565b6126e860016109b9565b906109eb565b906111ca565b61085b565b612d2c565b90600090565b915092509190565b61272c9350600096949692919250612722610856565b50918691926125b9565b90938161274261273c6000611b97565b91611b97565b0361278857505061277c61277761278293949261277161276182610ea3565b61276b60016109b9565b906109eb565b906111ca565b61085b565b90612d2c565b90600090565b915092509190565b505090915090600590565b505090916127a890610ea3565b6127bb6127b5600061099a565b916101d0565b036127c65790600090565b90600490565b505090915090600390565b6127df611d7d565b506127ea60016109b9565b916127f5600061099a565b5b8261280a612804600061099a565b916101d0565b141580612841575b1561283a5761282361283491611829565b9261282e6001611e38565b90611e58565b916127f6565b9150915090565b50838316612858612852600061099a565b916101d0565b14612812565b612866611d7d565b50612871600061099a565b5b81612886612880600061099a565b916101d0565b146128ae576128976128a891611829565b916128a26001611e38565b90611e58565b90612872565b905090565b916128e7929493946128c3611f0c565b506128cc611d7d565b506128d5611d7d565b506128de610d91565b50919091612d9e565b9391929093929193929193929190565b9161292b92949394612907611f0c565b50612910611d7d565b50612919611d7d565b50612922610d91565b50919091612d9e565b91929091929193929193929190565b90612943612104565b5061294f828290612e68565b60001461295a575090565b905090565b61296960406100d1565b90565b90565b61298361297e6129889261296c565b61210f565b610214565b90565b9061299590610214565b9052565b90565b60201b90565b6129b66129b16129bb92612999565b61299c565b610241565b90565b906129c890610241565b9052565b6129d4612104565b5060ff612a0f612a0660018060e01b03612a016129f86129f261295f565b9561296f565b6000860161298b565b6129a2565b602083016129be565b90565b612a38612a33612a2d612a3e93612a27610d91565b50611b2c565b93611b2c565b611526565b91611526565b1490565b90612a4b612104565b50612a57828290612e98565b600014612a62575090565b905090565b612a6f611d7d565b50612a7a600061099a565b5b612a8f6001612a8a83916109b9565b611d82565b612aa1612a9b846101d0565b916101d0565b1015612ac057612abb90612ab560016109b9565b9061107b565b612a7b565b612ad29150612acd6123e8565b6109eb565b90565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612b30602a60409261089a565b612b3981612ad5565b0190565b612b539060208101906000818303910152612b23565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612bb1602f60409261089a565b612bba81612b56565b0190565b612bd49060208101906000818303910152612ba4565b90565b929092612be26116dc565b5083612bf6612bf0856101d0565b916101d0565b11612cde5783612c16612c10612c0b84610ea3565b6101d0565b916101d0565b118015612cbc575b612c9a57612c35612c308486906109eb565b6116fd565b91845b80612c4b612c45876101d0565b916101d0565b1015612c9157612c8c90612c87612c6b612c668684906111ca565b61085b565b612c828791612c7b858c906109eb565b90926111ca565b6111fa565b61106c565b612c38565b50935050905090565b612ca2610033565b62461bcd60e51b815280612cb860048201612bbe565b0390fd5b5082612cd8612cd2612ccd84610ea3565b6101d0565b916101d0565b11612c1e565b612ce6610033565b62461bcd60e51b815280612cfc60048201612b3d565b0390fd5b60209392612d20600183612d188895612d2897611a85565b01809261154a565b01809261154a565b0190565b612d80602092612d6f600093612d40610856565b50612d61612d4c612131565b9193612d56610033565b948593898501612d00565b8682018103825203826100a8565b612d77610033565b918291826121d4565b039060025afa15612d9957612d966000516121a0565b90565b610c18565b9091612da8611f0c565b50612db1611d7d565b50612dba610d91565b50612dc482611068565b612dd7612dd1600061099a565b916101d0565b148015612e45575b908115612e28575b50612e1557612dfa612e0c918390611208565b5191612e0660016109b9565b9061107b565b91600091929190565b50612e1e611f0c565b9091600191929190565b9050612e3d612e3784926101d0565b916101d0565b101538612de7565b5082612e61612e5b612e5685611068565b6101d0565b916101d0565b1015612ddf565b612e8e612e89612e83612e9493612e7d610d91565b50611b2c565b93611b2c565b611526565b91611526565b1090565b612ebe612eb9612eb3612ec493612ead610d91565b50611b2c565b93611b2c565b611526565b91611526565b119056fea2646970667358221220e099a627e15a38b2cbfc7bce118d08198f6e92bbf50a995dd3d05da365deee7d64736f6c634300081a0033",
  "deployedBytecode": "0x60806040526004361015610013575b610851565b61001e60003561002d565b63c417c6850361000e57610818565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b90565b61011e81610112565b0361012557565b600080fd5b9050359061013782610115565b565b9092919261014e610149826100f0565b6100d1565b938185526020808601920283019281841161018b57915b8383106101725750505050565b60208091610180848661012a565b815201920191610165565b61010d565b9080601f830112156101ae578160206101ab93359101610139565b90565b6100eb565b67ffffffffffffffff81116101cb5760208091020190565b610092565b90565b6101dc816101d0565b036101e357565b600080fd5b905035906101f5826101d3565b565b67ffffffffffffffff811161020f5760208091020190565b610092565b60ff60f81b1690565b61022681610214565b0361022d57565b600080fd5b9050359061023f8261021d565b565b63ffffffff191690565b61025481610241565b0361025b57565b600080fd5b9050359061026d8261024b565b565b91906040838203126102ab576102a49061028960406100d1565b936102978260008301610232565b6000860152602001610260565b6020830152565b610083565b919060a0838203126102fe576102f7906102ca60606100d1565b936102d8826000830161026f565b60008601526102ea826040830161026f565b602086015260800161012a565b6040830152565b610083565b90929192610318610313826101f7565b6100d1565b9381855260a060208601920283019281841161035757915b83831061033d5750505050565b602060a09161034c84866102b0565b815201920191610330565b61010d565b9080601f8301121561037a5781602061037793359101610303565b90565b6100eb565b9190916060818403126103e55761039660606100d1565b926103a481600084016101e8565b60008501526103b681602084016101e8565b6020850152604082013567ffffffffffffffff81116103e0576103d9920161035c565b6040830152565b6100e6565b610083565b9291906103fe6103f9826101b3565b6100d1565b93818552602080860192028101918383116104555781905b838210610424575050505050565b813567ffffffffffffffff811161045057602091610445878493870161037f565b815201910190610416565b6100eb565b61010d565b9080601f8301121561047857816020610475933591016103ea565b90565b6100eb565b67ffffffffffffffff81116104955760208091020190565b610092565b919091606081840312610501576104b160606100d1565b9260008201359167ffffffffffffffff83116104fc576104d6826104f5948301610190565b60008601526104e882602083016101e8565b60208601526040016101e8565b6040830152565b6100e6565b610083565b92919061051a6105158261047d565b6100d1565b93818552602080860192028101918383116105715781905b838210610540575050505050565b813567ffffffffffffffff811161056c57602091610561878493870161049a565b815201910190610532565b6100eb565b61010d565b9080601f830112156105945781602061059193359101610506565b90565b6100eb565b91906040838203126105d5576105ce906105b360406100d1565b936105c182600083016101e8565b600086015260200161012a565b6020830152565b610083565b919091608081840312610640576105f160606100d1565b926105ff81600084016101e8565b60008501526106118160208401610599565b6020850152606082013567ffffffffffffffff811161063b57610634920161049a565b6040830152565b6100e6565b610083565b91909160e0818403126107415761065c60c06100d1565b92600082013567ffffffffffffffff811161073c578161067d918401610190565b6000850152602082013567ffffffffffffffff811161073757816106a291840161045a565b60208501526106b4816040840161026f565b6040850152608082013567ffffffffffffffff811161073257816106d991840161035c565b606085015260a082013567ffffffffffffffff811161072d57816106fe918401610576565b608085015260c082013567ffffffffffffffff81116107285761072192016105da565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b600080fd5b909182601f830112156107855781359167ffffffffffffffff831161078057602001926001830284011161077b57565b61010d565b610746565b6100eb565b916060838303126107f0576107a28260008501610074565b92602081013567ffffffffffffffff81116107eb57836107c3918301610645565b92604082013567ffffffffffffffff81116107e6576107e2920161074b565b9091565b610043565b610043565b61003e565b6107fe90610112565b9052565b9190610816906000602085019401906107f5565b565b3461084c5761084861083761082e36600461078a565b92919091610c29565b61083f610033565b91829182610802565b0390f35b610039565b600080fd5b600090565b6108659051610112565b90565b60001c90565b60018060a01b031690565b61088561088a91610868565b61086e565b90565b6108979054610879565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b6108fe603560409261089a565b610907816108a3565b0190565b61092190602081019060008183039101526108f1565b90565b1561092b57565b610933610033565b62461bcd60e51b8152806109496004820161090b565b0390fd5b61095790516101d0565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b9061097e82610970565b81101561098f576020809102010190565b61095a565b90565b90565b6109ae6109a96109b392610994565b610997565b6101d0565b90565b90565b6109cd6109c86109d2926109b6565b610997565b6101d0565b90565b634e487b7160e01b600052601160045260246000fd5b6109fa610a00919392936101d0565b926101d0565b8203918211610a0b57565b6109d5565b60018060a01b031690565b610a27610a2c91610868565b610a10565b90565b610a399054610a1b565b90565b610a50610a4b610a5592610048565b610997565b610048565b90565b610a6190610a3c565b90565b610a6d90610a58565b90565b610a7990610214565b9052565b610a8690610241565b9052565b90602080610aae93610aa460008201516000860190610a70565b0151910190610a7d565b565b610ab9906101d0565b9052565b60209181520190565b90826000939282370152565b9190610aec81610ae581610af195610abd565b8095610ac6565b610088565b0190565b92610b539795919694610b32610b3c92610b28610b4696610b1e60e08a019c60008b0190610a8a565b60408901906107f5565b6060870190610ab0565b6080850190610ab0565b60a0830190610ab0565b60c0818503910152610ad2565b90565b60e01b90565b90505190610b6982610115565b565b90602082820312610b8557610b8291600001610b5c565b90565b61003e565b610b9390610053565b9052565b5190565b60005b838110610baf575050906000910152565b806020918301518185015201610b9e565b610bdf610be8602093610bed93610bd681610b97565b93848093610abd565b95869101610b9b565b610088565b0190565b91610c1592610c0860408201936000830190610b8a565b6020818403910152610bc0565b90565b610c20610033565b3d6000823e3d90fd5b91610d3c6000602094610c3a610856565b50610d25610c50878060a089015101510161085b565b610c6e610c68610c60600161088d565b898491610da0565b50610924565b610d17604088015197610c89868b60a084015101510161094d565b9a610ce38b610cdc610cb28a610cab84880151610ca58361099a565b90610974565b510161094d565b94610cd6610cc68480840151930151610970565b610cd060016109b9565b906109eb565b90610974565b510161094d565b98610cf5610cf089610a2f565b610a64565b99631789cd63979b959d9390919293610d0c610033565b9e8f978f8901610af5565b8882018103825203886100a8565b610d47610d30610033565b97889687958694610b56565b845260048401610bf1565b03925af1908115610d8c57600091610d5e575b5090565b610d7f915060203d8111610d85575b610d7781836100a8565b810190610b6b565b38610d5a565b503d610d6d565b610c18565b600090565b600090565b151590565b91610dd2610dda9493610db1610d91565b50610dba610d96565b506060840151608085015160a0860151918593610f94565b949015610d9b565b610e0c57610e069293506000820151916020810151604082015190608060608401519301519394611228565b91909190565b505060009190565b610e1d90610a58565b90565b610e2981610d9b565b03610e3057565b600080fd5b90505190610e4282610e20565b565b90602082820312610e5e57610e5b91600001610e35565b90565b61003e565b610e6c906101d0565b9052565b610e7990610112565b9052565b90602080610ea193610e9760008201516000860190610e63565b0151910190610e70565b565b5190565b60209181520190565b60200190565b90610ec381602093610e70565b0190565b60200190565b90610eea610ee4610edd84610ea3565b8093610ea7565b92610eb0565b9060005b818110610efb5750505090565b909192610f14610f0e6001928651610eb6565b94610ec7565b9101919091610eee565b90610f5c90604080610f3f6060840160008701518582036000870152610ecd565b94610f5260208201516020860190610e63565b0151910190610e63565b90565b610f84610f91949293610f7a60808401956000850190610ab0565b6020830190610e7d565b6060818403910152610f1e565b90565b610fb66020919593949295610fa7610d91565b50610fb0610d96565b50610e14565b631f3302a990610fec610fcb6000860161094d565b92610ff7604086880151970151610fe0610033565b97889687958695610b56565b855260048501610f5f565b03915afa80156110635761101491600091611035575b5015610d9b565b61102a57611024929190916115ab565b91909190565b505050600090600490565b611056915060203d811161105c575b61104e81836100a8565b810190610e44565b3861100d565b503d611044565b610c18565b5190565b600161107891016101d0565b90565b61108a611090919392936101d0565b926101d0565b820180921161109b57565b6109d5565b634e487b7160e01b600052602160045260246000fd5b600b11156110c057565b6110a0565b906110cf826110b6565b565b906110e36110de836101f7565b6100d1565b918252565b6110f260606100d1565b90565b6110ff60406100d1565b90565b600090565b600090565b6111146110f5565b9060208083611121611102565b81520161112c611107565b81525050565b61113a61110c565b90565b600090565b61114a6110e8565b906020808084611158611132565b815201611163611132565b81520161116e61113d565b81525050565b61117c611142565b90565b60005b82811061118e57505050565b602090611199611174565b8184015201611182565b906111c86111b0836110d1565b926020806111be86936101f7565b920191039061117f565b565b906111d482610ea3565b8110156111e5576020809102010190565b61095a565b6111f460606100d1565b90565b52565b9061120490610112565b9052565b9061121282611068565b811015611223576020809102010190565b61095a565b94611255919461124d9161123a610d91565b50611243610d96565b50859190916115ab565b919015610d9b565b611516575061126383610970565b61127d61127761127285611068565b6101d0565b916101d0565b0361150a5761128c600061099a565b94611297600061099a565b955b866112b46112ae6112a988610970565b6101d0565b916101d0565b1015611309576112fd611303916112f76112db60206112d48a8d90610974565b510161094d565b6112f160006112ea8d8c610974565b510161094d565b906109eb565b9061107b565b9661106c565b95611299565b909295509390929361132c61132661132084610ea3565b926101d0565b916101d0565b036114fd579061133c600061099a565b611346600061099a565b5b8061136261135c61135789610970565b6101d0565b916101d0565b10156114ee5761139f611382602061137b898590610974565b510161094d565b61139960006113928a8690610974565b510161094d565b906109eb565b6113b585846113af86859061107b565b91611724565b949094806113cc6113c660006110c5565b916110c5565b036114de57506113e36113de86610ea3565b6111a3565b956113ee600061099a565b5b8061140a6114046113ff8a610ea3565b6101d0565b916101d0565b101561147a576114759061146e8a61145b8a61145261143361142e859388906111ca565b61085b565b9161144961143f6111ea565b95600087016111f7565b602085016111f7565b604083016111fa565b8a83916114688383611208565b52611208565b515061106c565b6113ef565b509450946114a86114ae919493946114938b8790611208565b51906114a08b8890610974565b51909161189a565b15610d9b565b6114ce576114c6916114c0919061107b565b9161106c565b929192611347565b5050505092505050600090600190565b9850965050505050505060009190565b50509350505050600190600090565b5092505050600090600790565b50505050600090600590565b94935050505060009190565b5190565b62ffffff191690565b90565b61153e61154391611526565b61152f565b9052565b90565b61155661155b91610112565b611547565b9052565b6020939261157f601d83611577829561158797611532565b018092611532565b01809261154a565b0190565b9061159582611522565b8110156115a6576020809102010190565b61095a565b9190916115b6610d91565b506115bf610d96565b506115c983611522565b6115e36115dd6115d884611068565b6101d0565b916101d0565b036116d1576115f2600061099a565b5b8061160e61160861160387611522565b6101d0565b916101d0565b10156116c5576116a76116a0611632600061162a868690611208565b510151611b2c565b61168b61164d6020611645888890611208565b510151611b2c565b9161167c61166860406116618a8a90611208565b510161085b565b611670610033565b9485936020850161155f565b602082018103825203826100a8565b859061169888869061158b565b519091611ba3565b5015610d9b565b6116b9576116b49061106c565b6115f3565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b906116f36116ee836100f0565b6100d1565b918252565b369037565b9061172261170a836116e1565b9260208061171886936100f0565b92019103906116f8565b565b92909261172f6116dc565b50611738610d96565b508361174c611746856101d0565b916101d0565b1161181f578361176c61176661176184610ea3565b6101d0565b916101d0565b1180156117fd575b6117f35761178b6117868486906109eb565b6116fd565b91845b806117a161179b876101d0565b916101d0565b10156117e7576117e2906117dd6117c16117bc8684906111ca565b61085b565b6117d887916117d1858c906109eb565b90926111ca565b6111fa565b61106c565b61178e565b50935050905090600090565b9150915090600a90565b508261181961181361180e84610ea3565b6101d0565b916101d0565b11611774565b9150915090600990565b611832906101d0565b60001981146118415760010190565b6109d5565b90565b61185d61185861186292611846565b610997565b6101d0565b90565b61187461187a919392936101d0565b926101d0565b916118868382026101d0565b92818404149015171561189557565b6109d5565b6118a2610d91565b506118ad600061099a565b936118c36118be6040850151611068565b6111a3565b916118ce600061099a565b955b806118ee6118e86118e36000890161094d565b6101d0565b916101d0565b141580611a3d575b15611952576119468161191861194c9361191260008a0161094d565b90611da9565b61193e61192a60408a01518c90611208565b51888c916119388383611208565b52611208565b51509061107b565b96611829565b956118d0565b50939094506119c9915061198361197361196e6020860161094d565b611e7f565b61197d6002611849565b90611865565b8061199761199160016109b9565b916101d0565b10611a2d575b8391600091906000906119c36119bd6119b760009661099a565b9361099a565b9461099a565b94611f17565b505093905b846119ed6119e76119e26040870151611068565b6101d0565b916101d0565b1015611a1c57611a10611a1691611a0960408601518890611208565b51906121e0565b9461106c565b936119ce565b909350611a2a92915061234e565b90565b50611a3860016109b9565b61199d565b5086611a5d611a57611a526040890151611068565b6101d0565b916101d0565b106118f6565b600090565b611a729051610214565b90565b611a7f9051610241565b90565b90565b611a91611a9691610214565b611a82565b9052565b90565b611aa9611aae91610241565b611a9a565b9052565b600181611ac5611acd93601c9695611a85565b018092611a9d565b0190565b60200190565b611ae19051611526565b90565b1b90565b611b02611afd611af783610b97565b92611ad1565b611ad7565b90601d8110611b10575b5090565b611b259062ffffff1990601d03600802611ae4565b1638611b0c565b611b8090611b38611a63565b50611b7b611b546020611b4d60008501611a68565b9301611a75565b91611b6c611b60610033565b93849260208401611ab2565b602082018103825203826100a8565b611ae8565b90565b600090565b60061115611b9257565b6110a0565b90611ba182611b88565b565b9091611bad610d91565b50611bb6611b83565b50611bc36040840161094d565b611bd6611bd060016109b9565b916101d0565b1115600014611d2d57611bec6000840151610ea3565b611bff611bf9600061099a565b916101d0565b03611d22575b611c116020840161094d565b611c2e611c28611c236040870161094d565b6101d0565b916101d0565b1015611d1757611c3d9061254a565b91611c4b6000820151610ea3565b611c5e611c58600061099a565b916101d0565b14611ccc579182611c756020611c8e94950161094d565b916000611c846040840161094d565b91920151926125b9565b80611ca2611c9c6000611b97565b91611b97565b03611cc25750611cb5611cbb9192610112565b91610112565b1490600090565b9291505060009190565b6040611cd8910161094d565b611ceb611ce560016109b9565b916101d0565b14600014611d0d57611d00611d069192610112565b91610112565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611d3a6000840151610ea3565b611d6c611d66611d61611d4f6020880161094d565b611d5b6040890161094d565b906123f6565b6101d0565b916101d0565b0315611c0557505050600090600190565b600090565b611da190611d9b611d95611da6946101d0565b916101d0565b90611ae4565b6101d0565b90565b611dd0611dcb611de092611dbb611d7d565b50611dc5816127d7565b946109eb565b61285e565b611dda60016109b9565b906109eb565b81611df3611ded836101d0565b916101d0565b11611e0f5750611e0c90611e0760016109b9565b611d82565b90565b611e239150611e1e60016109b9565b611d82565b90565b15611e2d57565b600080fd5b60ff1690565b611e4c611e47611e51926109b6565b610997565b611e32565b90565b1c90565b611e7790611e71611e6b611e7c94611e32565b916101d0565b90611e54565b6101d0565b90565b611e87611d7d565b50611ea681611e9f611e9960016109b9565b916101d0565b1015611e26565b611ed6611eb28261285e565b611ed1611ecb600192611ec560016109b9565b906109eb565b916109b9565b611d82565b90611eea611ee483926101d0565b916101d0565b14611ef3575b90565b611f0790611f016001611e38565b90611e58565b611ef0565b611f14611142565b90565b91909293959495611f26611f0c565b50611f2f611d7d565b50611f38611d7d565b50611f41610d91565b50611f4d8583906109eb565b611f60611f5a60016109b9565b916101d0565b1461206c5784611f83611f7d611f786000870161094d565b6101d0565b916101d0565b11158015612046575b61202457611fc090611fa7611fa28785906109eb565b611e7f565b978491868590611fb8878d9061107b565b929394611f17565b91611fe3979391611fda959350949199909495969261107b565b91929394611f17565b94919092909294611ffd611ff76001610d9b565b91610d9b565b146120175761200b916121e0565b90929160009193929190565b5090929160009193929190565b939161203c95969350604091500151929091926128f7565b9193909293929190565b508161206561205f61205a6020870161094d565b6101d0565b916101d0565b1015611f8c565b93919061207f600083989597980161094d565b61209161208b836101d0565b916101d0565b111590816120de575b506120bb576120b1945060400151929091926128f7565b9193909293929190565b505090826120cd6120d4949391611068565b91926128b3565b9193909293929190565b90506120fd6120f76120f26020850161094d565b6101d0565b916101d0565b103861209a565b61210c61110c565b90565b60f81b90565b61212961212461212e926109b6565b61210f565b610214565b90565b61213b6001612115565b90565b9461218c6020601d9661218488839c9b9861217c826121949a61217461219c9f8061216c600192869f611a85565b018092611532565b018092611532565b01809261154a565b018092611532565b018092611532565b01809261154a565b0190565b60001b90565b905090565b6121d06121c7926020926121be81610b97565b948580936121a6565b93849101610b9b565b0190565b6121dd916121ab565b90565b906121e9611f0c565b50602060006122bd61220282860151838601519061293a565b9361220b612104565b506122218387015161221b6129cc565b90612a12565b831461230b576122ac6122326129cc565b965b61229e61223f612131565b9161224c87820151611b2c565b94612265604061225e8b850151611b2c565b930161085b565b61227189830151611b2c565b9061228a60406122838d860151611b2c565b940161085b565b93612293610033565b9889978d890161213e565b8682018103825203826100a8565b6122b4610033565b918291826121d4565b039060025afa1561230657612303906122fa6122da6000516121a0565b91936122f16122e76111ea565b95600087016111f7565b602085016111f7565b604083016111fa565b90565b610c18565b6123208382015161231a6129cc565b90612a12565b8314612334576122ac84870151965b612234565b6122ac612348858801518684015190612a42565b9661232f565b90612357610d91565b5061236b6000830151600083015190612a12565b806123b0575b918261237d575b505090565b6123a891925061239d6040612396816123a2940161085b565b940161085b565b610112565b91610112565b143880612378565b506123c46020830151602083015190612a12565b612371565b90565b6123e06123db6123e5926123c9565b610997565b6101d0565b90565b6123f36101006123cc565b90565b6123fe611d7d565b508161241361240d60016109b9565b916101d0565b11156124f7576124336124246123e8565b61242d84612a67565b906109eb565b9161245b60016124566124508661244a60016109b9565b906109eb565b916109b9565b611d82565b908261248261247c6124778561247160016109b9565b906109eb565b6101d0565b916101d0565b11156000146124915750505090565b90809293506124a96124a360016109b9565b916101d0565b146000146124c1575050506124be60016109b9565b90565b6124db6124e1926124d560019582906109eb565b926109eb565b906123f6565b906124ef6124f492916109b9565b61107b565b90565b5050612503600061099a565b90565b61251a61251561251f92610994565b61210f565b610214565b90565b61252c6000612506565b90565b806125406001926125479594611a85565b01906121ab565b90565b600061259b60209261255a610856565b5061258a612566612522565b61257c612571610033565b93849288840161252f565b8682018103825203826100a8565b612592610033565b918291826121d4565b039060025afa156125b4576125b16000516121a0565b90565b610c18565b9392936125c4610856565b506125cd611b83565b50816125e26125dc600061099a565b916101d0565b146127cc57816125fb6125f560016109b9565b916101d0565b1461279b5761260985610ea3565b61261c612616600061099a565b916101d0565b146127905761262a82611e7f565b61265c866000906126566126506126408b610ea3565b61264a60016109b9565b906109eb565b9261099a565b90612bd7565b91612665611b83565b5080612679612673846101d0565b916101d0565b1061270c576126a993929161269b6126a192612693610856565b5082906109eb565b936109eb565b8491926125b9565b9091816126bf6126b96000611b97565b91611b97565b036127045750506126f96126f4846126ee6126de6126fe969792610ea3565b6126e860016109b9565b906109eb565b906111ca565b61085b565b612d2c565b90600090565b915092509190565b61272c9350600096949692919250612722610856565b50918691926125b9565b90938161274261273c6000611b97565b91611b97565b0361278857505061277c61277761278293949261277161276182610ea3565b61276b60016109b9565b906109eb565b906111ca565b61085b565b90612d2c565b90600090565b915092509190565b505090915090600590565b505090916127a890610ea3565b6127bb6127b5600061099a565b916101d0565b036127c65790600090565b90600490565b505090915090600390565b6127df611d7d565b506127ea60016109b9565b916127f5600061099a565b5b8261280a612804600061099a565b916101d0565b141580612841575b1561283a5761282361283491611829565b9261282e6001611e38565b90611e58565b916127f6565b9150915090565b50838316612858612852600061099a565b916101d0565b14612812565b612866611d7d565b50612871600061099a565b5b81612886612880600061099a565b916101d0565b146128ae576128976128a891611829565b916128a26001611e38565b90611e58565b90612872565b905090565b916128e7929493946128c3611f0c565b506128cc611d7d565b506128d5611d7d565b506128de610d91565b50919091612d9e565b9391929093929193929193929190565b9161292b92949394612907611f0c565b50612910611d7d565b50612919611d7d565b50612922610d91565b50919091612d9e565b91929091929193929193929190565b90612943612104565b5061294f828290612e68565b60001461295a575090565b905090565b61296960406100d1565b90565b90565b61298361297e6129889261296c565b61210f565b610214565b90565b9061299590610214565b9052565b90565b60201b90565b6129b66129b16129bb92612999565b61299c565b610241565b90565b906129c890610241565b9052565b6129d4612104565b5060ff612a0f612a0660018060e01b03612a016129f86129f261295f565b9561296f565b6000860161298b565b6129a2565b602083016129be565b90565b612a38612a33612a2d612a3e93612a27610d91565b50611b2c565b93611b2c565b611526565b91611526565b1490565b90612a4b612104565b50612a57828290612e98565b600014612a62575090565b905090565b612a6f611d7d565b50612a7a600061099a565b5b612a8f6001612a8a83916109b9565b611d82565b612aa1612a9b846101d0565b916101d0565b1015612ac057612abb90612ab560016109b9565b9061107b565b612a7b565b612ad29150612acd6123e8565b6109eb565b90565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612b30602a60409261089a565b612b3981612ad5565b0190565b612b539060208101906000818303910152612b23565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612bb1602f60409261089a565b612bba81612b56565b0190565b612bd49060208101906000818303910152612ba4565b90565b929092612be26116dc565b5083612bf6612bf0856101d0565b916101d0565b11612cde5783612c16612c10612c0b84610ea3565b6101d0565b916101d0565b118015612cbc575b612c9a57612c35612c308486906109eb565b6116fd565b91845b80612c4b612c45876101d0565b916101d0565b1015612c9157612c8c90612c87612c6b612c668684906111ca565b61085b565b612c828791612c7b858c906109eb565b90926111ca565b6111fa565b61106c565b612c38565b50935050905090565b612ca2610033565b62461bcd60e51b815280612cb860048201612bbe565b0390fd5b5082612cd8612cd2612ccd84610ea3565b6101d0565b916101d0565b11612c1e565b612ce6610033565b62461bcd60e51b815280612cfc60048201612b3d565b0390fd5b60209392612d20600183612d188895612d2897611a85565b01809261154a565b01809261154a565b0190565b612d80602092612d6f600093612d40610856565b50612d61612d4c612131565b9193612d56610033565b948593898501612d00565b8682018103825203826100a8565b612d77610033565b918291826121d4565b039060025afa15612d9957612d966000516121a0565b90565b610c18565b9091612da8611f0c565b50612db1611d7d565b50612dba610d91565b50612dc482611068565b612dd7612dd1600061099a565b916101d0565b148015612e45575b908115612e28575b50612e1557612dfa612e0c918390611208565b5191612e0660016109b9565b9061107b565b91600091929190565b50612e1e611f0c565b9091600191929190565b9050612e3d612e3784926101d0565b916101d0565b101538612de7565b5082612e61612e5b612e5685611068565b6101d0565b916101d0565b1015612ddf565b612e8e612e89612e83612e9493612e7d610d91565b50611b2c565b93611b2c565b611526565b91611526565b1090565b612ebe612eb9612eb3612ec493612ead610d91565b50611b2c565b93611b2c565b611526565b91611526565b119056fea2646970667358221220e099a627e15a38b2cbfc7bce118d08198f6e92bbf50a995dd3d05da365deee7d64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_blobstreamX": "BlobstreamX contract where Celestia commitments are being stored",
          "_inputBox": "InputBox contract to send inputs to Cartesi DApps"
        }
      },
      "relayShares(address,(bytes32[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)": {
        "details": "Called by clients to securely process Celestia data in Cartesi DApps",
        "params": {
          "_dapp": "The address of the DApp",
          "_execLayerData": "Additional data to be interpreted by the execution layer",
          "_proof": "ShareDigestsProof object showing that a range of shares is committed to Celestia"
        },
        "returns": {
          "_0": "The hash of the input as returned by the Cartesi DApp's input box"
        }
      }
    },
    "title": "CelestiaRelay",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "relayShares(address,(bytes32[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)": {
        "notice": "Relay a pointer to the specified Celestia shares as an input to a DApp's input box"
      }
    },
    "notice": "Relays Celestia blocks as inputs to Cartesi DApps",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3137,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "inputBox",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IInputBox)49"
      },
      {
        "astId": 3140,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "blobstreamX",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDAOracle)87"
      }
    ],
    "types": {
      "t_contract(IDAOracle)87": {
        "encoding": "inplace",
        "label": "contract IDAOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IInputBox)49": {
        "encoding": "inplace",
        "label": "contract IInputBox",
        "numberOfBytes": "20"
      }
    }
  }
}