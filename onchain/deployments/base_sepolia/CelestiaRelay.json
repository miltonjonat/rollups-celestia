{
  "address": "0x5512fF0fB72366F879aD1E1940cDc8a921b52aae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IDAOracle",
          "name": "_blobstreamX",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "beginKey",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endKey",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "min",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "max",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "digest",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct NamespaceNode[]",
                  "name": "sideNodes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct NamespaceMerkleMultiproof[]",
              "name": "shareProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes1",
                  "name": "version",
                  "type": "bytes1"
                },
                {
                  "internalType": "bytes28",
                  "name": "id",
                  "type": "bytes28"
                }
              ],
              "internalType": "struct Namespace",
              "name": "namespace",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "min",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "max",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "digest",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct NamespaceNode[]",
              "name": "rowRoots",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "sideNodes",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "key",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numLeaves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BinaryMerkleProof[]",
              "name": "rowProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tupleRootNonce",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "height",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "dataRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct DataRootTuple",
                  "name": "tuple",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32[]",
                      "name": "sideNodes",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "key",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numLeaves",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct BinaryMerkleProof",
                  "name": "proof",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AttestationProof",
              "name": "attestationProof",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharesProof",
          "name": "_proof",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "relayShares",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a9fad8d80ec55eae3bc7ed3aa725d7defd73c0bb36902618d4295a3c8e09f60",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0xF05D57a5BeD2d1B529C56001FC5810cc9afC0335",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "2804538",
    "logsBloom": "0x
    "blockHash": "0xeca79252482445007a79c4035e4588a4c90605afbf07f3670d9d101d98e7dd00",
    "transactionHash": "0x8a9fad8d80ec55eae3bc7ed3aa725d7defd73c0bb36902618d4295a3c8e09f60",
    "logs": [],
    "blockNumber": 11303125,
    "cumulativeGasUsed": "2949037",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58Df21fE097d4bE5dCf61e01d9ea3f6B81c2E1dB",
    "0xc3e209eb245Fd59c8586777b499d6A665DF3ABD2"
  ],
  "numDeployments": 2,
  "solcInputHash": "4753798fe045c65cdec213fe53c6a525",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IDAOracle\",\"name\":\"_blobstreamX\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endKey\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"sideNodes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct NamespaceMerkleMultiproof[]\",\"name\":\"shareProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"namespace\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"rowRoots\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof[]\",\"name\":\"rowProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tupleRootNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataRootTuple\",\"name\":\"tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationProof\",\"name\":\"attestationProof\",\"type\":\"tuple\"}],\"internalType\":\"struct SharesProof\",\"name\":\"_proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"relayShares\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_blobstreamX\":\"BlobstreamX contract where Celestia commitments are being stored\",\"_inputBox\":\"InputBox contract to send inputs to Cartesi DApps\"}},\"relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32)\":{\"details\":\"Called by clients to securely relay Celestia data to Cartesi DApps\",\"params\":{\"_dapp\":\"The address of the DApp\",\"_proof\":\"SharesProof object showing that a range of shares is committed to Celestia\",\"_root\":\"The Celestia \\\"data root\\\" for the block that contains the shares.\"},\"returns\":{\"_0\":\"The hash of the input as returned by the Cartesi DApp's input box\"}}},\"title\":\"CelestiaRelay\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32)\":{\"notice\":\"Relay the specified Celestia shares as an input to a DApp's input box\"}},\"notice\":\"Relays Celestia blocks as inputs to Cartesi DApps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CelestiaRelay.sol\":\"CelestiaRelay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@cartesi/rollups/contracts/inputs/IInputBox.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Provides data availability of inputs for applications.\\n/// @notice Each application has its own append-only list of inputs.\\n/// @notice Off-chain, inputs can be retrieved via events.\\n/// @notice On-chain, only the input hashes are stored.\\n/// @notice See `LibInput` for more details on how such hashes are computed.\\ninterface IInputBox {\\n    /// @notice MUST trigger when an input is added.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @param input The input blob\\n    event InputAdded(\\n        address indexed appContract,\\n        uint256 indexed index,\\n        bytes input\\n    );\\n\\n    /// @notice Input is too large.\\n    /// @param appContract The application contract address\\n    /// @param inputLength The input length\\n    /// @param maxInputLength The maximum input length\\n    error InputTooLarge(\\n        address appContract,\\n        uint256 inputLength,\\n        uint256 maxInputLength\\n    );\\n\\n    /// @notice Send an input to an application.\\n    /// @param appContract The application contract address\\n    /// @param payload The input payload\\n    /// @return The hash of the input blob\\n    /// @dev MUST fire an `InputAdded` event.\\n    function addInput(\\n        address appContract,\\n        bytes calldata payload\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs sent to an application.\\n    /// @param appContract The application contract address\\n    function getNumberOfInputs(\\n        address appContract\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in an application's input box.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @dev The provided index must be valid.\\n    function getInputHash(\\n        address appContract,\\n        uint256 index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xae7730cd7ab2b31a86d7c4933215853ea6c0b1b4dc60d4ec24e5cfc2ec005fe3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"blobstream-contracts/src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @dev bytes32 encoding of the string \\\"checkpoint\\\"\\nbytes32 constant VALIDATOR_SET_HASH_DOMAIN_SEPARATOR =\\n    0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n/// @dev bytes32 encoding of the string \\\"transactionBatch\\\"\\nbytes32 constant DATA_ROOT_TUPLE_ROOT_DOMAIN_SEPARATOR =\\n    0x7472616e73616374696f6e426174636800000000000000000000000000000000;\\n\",\"keccak256\":\"0x0236491c1b01a038105ecfb270a39db52d7591f2200dbc1af079c4d8ed689f82\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/DataRootTuple.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A tuple of data root with metadata. Each data root is associated\\n///  with a Celestia block height.\\n/// @dev `availableDataRoot` in\\n///  https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#header\\nstruct DataRootTuple {\\n    // Celestia block height the data root was included in.\\n    // Genesis block is height = 0.\\n    // First queryable block is height = 1.\\n    uint256 height;\\n    // Data root.\\n    bytes32 dataRoot;\\n}\\n\",\"keccak256\":\"0x0526597d14a6d7f258ec48e434a9b60c9a8781764a8f23c878d49926daeb5d1c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/IDAOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./DataRootTuple.sol\\\";\\nimport \\\"./lib/tree/binary/BinaryMerkleProof.sol\\\";\\n\\n/// @notice Data Availability Oracle interface.\\ninterface IDAOracle {\\n    /// @notice Verify a Data Availability attestation.\\n    /// @param _tupleRootNonce Nonce of the tuple root to prove against.\\n    /// @param _tuple Data root tuple to prove inclusion of.\\n    /// @param _proof Binary Merkle tree proof that `tuple` is in the root at `_tupleRootNonce`.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    function verifyAttestation(uint256 _tupleRootNonce, DataRootTuple memory _tuple, BinaryMerkleProof memory _proof)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xc35648b17d3587bc3a627f67a328874db536ee24c11b970c3c57226d69a32eec\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Types.sol\\\";\\n\\nlibrary Constants {\\n    ///////////////\\n    // Constants //\\n    ///////////////\\n\\n    /// @dev Maximum tree height\\n    uint256 internal constant MAX_HEIGHT = 256;\\n\\n    /// @dev The prefixes of leaves and nodes\\n    bytes1 internal constant LEAF_PREFIX = 0x00;\\n    bytes1 internal constant NODE_PREFIX = 0x01;\\n}\\n\\n/// @dev Parity share namespace.\\n/// utility function to provide the parity share namespace as a Namespace struct.\\nfunction PARITY_SHARE_NAMESPACE() pure returns (Namespace memory) {\\n    return Namespace(0xFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n}\\n\",\"keccak256\":\"0x2050b2be8a739ce250cc5cea1556936c7937915b5d7fde269dd70e8e7eb660c4\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A representation of the Celestia-app namespace ID and its version.\\n/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html\\nstruct Namespace {\\n    // The namespace version.\\n    bytes1 version;\\n    // The namespace ID.\\n    bytes28 id;\\n}\\n\\nusing {equalTo, lessThan, greaterThan, toBytes} for Namespace global;\\n\\nfunction equalTo(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() == r.toBytes();\\n}\\n\\nfunction lessThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() < r.toBytes();\\n}\\n\\nfunction greaterThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() > r.toBytes();\\n}\\n\\nfunction toBytes(Namespace memory n) pure returns (bytes29) {\\n    return bytes29(abi.encodePacked(n.version, n.id));\\n}\\n\\nfunction toNamespace(bytes29 n) pure returns (Namespace memory) {\\n    bytes memory id = new bytes(28);\\n    for (uint256 i = 1; i < 29; i++) {\\n        id[i - 1] = n[i];\\n    }\\n    return Namespace(n[0], bytes28(id));\\n}\\n\",\"keccak256\":\"0xa47e9e20fef88264acdf1fc6bc0b3bb9f23c7022f5de8d203a1014895a606958\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Constants.sol\\\";\\n\\n/// @notice Calculate the starting bit of the path to a leaf\\n/// @param numLeaves : The total number of leaves in the tree\\n/// @return startingBit : The starting bit of the path\\n// solhint-disable-next-line func-visibility\\nfunction getStartingBit(uint256 numLeaves) pure returns (uint256 startingBit) {\\n    // Determine height of the left subtree. This is the maximum path length, so all paths start at this offset from the right-most bit\\n    startingBit = 0;\\n    while ((1 << startingBit) < numLeaves) {\\n        startingBit += 1;\\n    }\\n    return Constants.MAX_HEIGHT - startingBit;\\n}\\n\\n/// @notice Calculate the length of the path to a leaf\\n/// @param key: The key of the leaf\\n/// @param numLeaves: The total number of leaves in the tree\\n/// @return pathLength : The length of the path to the leaf\\n// solhint-disable-next-line func-visibility\\nfunction pathLengthFromKey(uint256 key, uint256 numLeaves) pure returns (uint256 pathLength) {\\n    if (numLeaves <= 1) {\\n        // if the number of leaves of the tree is 1 or 0, the path always is 0.\\n        return 0;\\n    }\\n    // Get the height of the left subtree. This is equal to the offset of the starting bit of the path\\n    pathLength = Constants.MAX_HEIGHT - getStartingBit(numLeaves);\\n\\n    // Determine the number of leaves in the left subtree\\n    uint256 numLeavesLeftSubTree = (1 << (pathLength - 1));\\n\\n    // If leaf is in left subtree, path length is full height of left subtree\\n    if (key <= numLeavesLeftSubTree - 1) {\\n        return pathLength;\\n    }\\n    // If left sub tree has only one leaf but key is not there, path has one additional step\\n    else if (numLeavesLeftSubTree == 1) {\\n        return 1;\\n    }\\n    // Otherwise, add 1 to height and recurse into right subtree\\n    else {\\n        return 1 + pathLengthFromKey(key - numLeavesLeftSubTree, numLeaves - numLeavesLeftSubTree);\\n    }\\n}\\n\\n/// @notice Returns the minimum number of bits required to represent `x`; the\\n/// result is 0 for `x` == 0.\\n/// @param x Number.\\nfunction _bitsLen(uint256 x) pure returns (uint256) {\\n    uint256 count = 0;\\n\\n    while (x != 0) {\\n        count++;\\n        x >>= 1;\\n    }\\n\\n    return count;\\n}\\n\\n/// @notice Returns the largest power of 2 less than `x`.\\n/// @param x Number.\\nfunction _getSplitPoint(uint256 x) pure returns (uint256) {\\n    // Note: since `x` is always an unsigned int * 2, the only way for this\\n    // to be violated is if the input == 0. Since the input is the end\\n    // index exclusive, an input of 0 is guaranteed to be invalid (it would\\n    // be a proof of inclusion of nothing, which is vacuous).\\n    require(x >= 1);\\n\\n    uint256 bitLen = _bitsLen(x);\\n    uint256 k = 1 << (bitLen - 1);\\n    if (k == x) {\\n        k >>= 1;\\n    }\\n    return k;\\n}\\n\",\"keccak256\":\"0x9760cb3ab3d4f412949b9be1bbdf5d9e7954cad44a94a4f7fe90fcffb86fe7fa\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice Merkle Tree Proof structure.\\nstruct BinaryMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    bytes32[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x9fb953284b455b544091f058fdb11ac73928093517333909c0744d9319410688\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\nimport \\\"./BinaryMerkleProof.sol\\\";\\n\\n/// @title Binary Merkle Tree.\\nlibrary BinaryMerkleTree {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The provided side nodes count is invalid for the proof.\\n        InvalidNumberOfSideNodes,\\n        /// @notice The provided proof key is not part of the tree.\\n        KeyNotInTree,\\n        /// @notice Invalid number of leaves in proof.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The proof contains unexpected side nodes.\\n        UnexpectedInnerHashes,\\n        /// @notice The proof verification expected at least one inner hash.\\n        ExpectedAtLeastOneInnerHash\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which verify the given leaf.\\n    /// @param proof Binary Merkle proof for the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(bytes32 root, BinaryMerkleProof memory proof, bytes memory data)\\n        internal\\n        pure\\n        returns (bool, ErrorCodes)\\n    {\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n            }\\n        } else if (proof.sideNodes.length != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return (false, ErrorCodes.KeyNotInTree);\\n        }\\n\\n        // A sibling at height 1 is created by getting the hash of the data to prove.\\n        bytes32 digest = leafDigest(data);\\n\\n        // Null proof is only valid if numLeaves = 1\\n        // If so, just verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return (root == digest, ErrorCodes.NoError);\\n            } else {\\n                return (false, ErrorCodes.NoError);\\n            }\\n        }\\n\\n        (bytes32 computedHash, ErrorCodes error) = computeRootHash(proof.key, proof.numLeaves, digest, proof.sideNodes);\\n\\n        if (error != ErrorCodes.NoError) {\\n            return (false, error);\\n        }\\n\\n        return (computedHash == root, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Use the leafHash and innerHashes to get the root merkle hash.\\n    /// If the length of the innerHashes slice isn't exactly correct, the result is nil.\\n    /// Recursive impl.\\n    function computeRootHash(uint256 key, uint256 numLeaves, bytes32 leafHash, bytes32[] memory sideNodes)\\n        private\\n        pure\\n        returns (bytes32, ErrorCodes)\\n    {\\n        if (numLeaves == 0) {\\n            return (leafHash, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        if (numLeaves == 1) {\\n            if (sideNodes.length != 0) {\\n                return (leafHash, ErrorCodes.UnexpectedInnerHashes);\\n            }\\n            return (leafHash, ErrorCodes.NoError);\\n        }\\n        if (sideNodes.length == 0) {\\n            return (leafHash, ErrorCodes.ExpectedAtLeastOneInnerHash);\\n        }\\n        uint256 numLeft = _getSplitPoint(numLeaves);\\n        bytes32[] memory sideNodesLeft = slice(sideNodes, 0, sideNodes.length - 1);\\n        ErrorCodes error;\\n        if (key < numLeft) {\\n            bytes32 leftHash;\\n            (leftHash, error) = computeRootHash(key, numLeft, leafHash, sideNodesLeft);\\n            if (error != ErrorCodes.NoError) {\\n                return (leafHash, error);\\n            }\\n            return (nodeDigest(leftHash, sideNodes[sideNodes.length - 1]), ErrorCodes.NoError);\\n        }\\n        bytes32 rightHash;\\n        (rightHash, error) = computeRootHash(key - numLeft, numLeaves - numLeft, leafHash, sideNodesLeft);\\n        if (error != ErrorCodes.NoError) {\\n            return (leafHash, error);\\n        }\\n        return (nodeDigest(sideNodes[sideNodes.length - 1], rightHash), ErrorCodes.NoError);\\n    }\\n\\n    /// @notice creates a slice of bytes32 from the data slice of bytes32 containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes32[] memory _data, uint256 _begin, uint256 _end) internal pure returns (bytes32[] memory) {\\n        if (_begin > _end) {\\n            revert(\\\"Invalid range: _begin is greater than _end\\\");\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            revert(\\\"Invalid range: _begin or _end are out of bounds\\\");\\n        }\\n        bytes32[] memory out = new bytes32[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return out;\\n    }\\n}\\n\",\"keccak256\":\"0x90dc9ac613014c2d3fcebbd23f2b5af67188b7de80b2ef853f20c91a14ce68fd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\n\\n/// @notice Calculate the digest of a node.\\n/// @param left The left child.\\n/// @param right The right child.\\n/// @return digest The node digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(bytes32 left, bytes32 right) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.NODE_PREFIX, left, right));\\n}\\n\\n/// @notice Calculate the digest of a leaf.\\n/// @param data The data of the leaf.\\n/// @return digest The leaf digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(bytes memory data) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, data));\\n}\\n\",\"keccak256\":\"0x2f16501eac14f6e2a61de29d3aa10e3aaf8e0a594fc9cf8dc2d955bb2f6d54e0\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleMultiproof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Multiproof structure. Proves multiple leaves.\\nstruct NamespaceMerkleMultiproof {\\n    // The beginning key of the leaves to verify.\\n    uint256 beginKey;\\n    // The ending key of the leaves to verify.\\n    uint256 endKey;\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n}\\n\",\"keccak256\":\"0x6ae0f3e8413808e06b570202a27a08e3f1236add1b00b5cb4b4ac17049e1960c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Proof structure.\\nstruct NamespaceMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x52eef9f87e34c11d6f8eda6f4a508b420c0193430c4035f49088069b6217ab40\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./NamespaceMerkleProof.sol\\\";\\nimport \\\"./NamespaceMerkleMultiproof.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\n\\n/// @title Namespace Merkle Tree.\\nlibrary NamespaceMerkleTree {\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// @param namespace Namespace of the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        Namespace memory namespace,\\n        bytes memory data\\n    ) internal pure returns (bool) {\\n        // A sibling at height 1 is created by getting the leafDigest of the original data.\\n        NamespaceNode memory node = leafDigest(namespace, data);\\n\\n        // Since we're verifying a leaf, height parameter is 1.\\n        return verifyInner(root, proof, node, 1);\\n    }\\n\\n    /// @notice Verify if inner node exists in Merkle tree, given node, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// proof.key is any key in the subtree rooted at the inner node.\\n    /// @param node The inner node to verify.\\n    /// @param startingHeight Starting height of the proof.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verifyInner(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        NamespaceNode memory node,\\n        uint256 startingHeight\\n    ) internal pure returns (bool) {\\n        // Check starting height is at least 1\\n        if (startingHeight < 1) {\\n            return false;\\n        }\\n        uint256 heightOffset = startingHeight - 1;\\n\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return false;\\n            }\\n        } else if (proof.sideNodes.length + heightOffset != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return false;\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return false;\\n        }\\n        // Handle case where proof is empty: i.e, only one leaf exists, so verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return namespaceNodeEquals(root, node);\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        // The case where inner node is actually the root of a tree with more than one node is not relevant\\n        // to our use case, since the only case where an inner node is the root of the tree is when the tree\\n        // has only one inner node. So, there is no need to handle that case.\\n\\n        uint256 height = startingHeight;\\n        uint256 stableEnd = proof.key;\\n\\n        // While the current subtree (of height 'height') is complete, determine\\n        // the position of the next sibling using the complete subtree algorithm.\\n        // 'stableEnd' tells us the ending index of the last full subtree. It gets\\n        // initialized to 'key' because the first full subtree was the\\n        // subtree of height 1, created above (and had an ending index of\\n        // 'key').\\n\\n        while (true) {\\n            // Determine if the subtree is complete. This is accomplished by\\n            // rounding down the key to the nearest 1 << 'height', adding 1\\n            // << 'height', and comparing the result to the number of leaves in the\\n            // Merkle tree.\\n\\n            uint256 subTreeStartIndex = (proof.key / (1 << height)) * (1 << height);\\n            uint256 subTreeEndIndex = subTreeStartIndex + (1 << height) - 1;\\n\\n            // If the Merkle tree does not have a leaf at index\\n            // 'subTreeEndIndex', then the subtree of the current height is not\\n            // a complete subtree.\\n            if (subTreeEndIndex >= proof.numLeaves) {\\n                break;\\n            }\\n            stableEnd = subTreeEndIndex;\\n\\n            // Determine if the key is in the first or the second half of\\n            // the subtree.\\n            if (proof.sideNodes.length + heightOffset <= height - 1) {\\n                return false;\\n            }\\n            if (proof.key - subTreeStartIndex < (1 << (height - 1))) {\\n                node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            } else {\\n                node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            }\\n\\n            height += 1;\\n        }\\n\\n        // Determine if the next hash belongs to an orphan that was elevated. This\\n        // is the case IFF 'stableEnd' (the last index of the largest full subtree)\\n        // is equal to the number of leaves in the Merkle tree.\\n        if (stableEnd != proof.numLeaves - 1) {\\n            if (proof.sideNodes.length <= height - heightOffset - 1) {\\n                return false;\\n            }\\n            node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            height += 1;\\n        }\\n        // All remaining elements in the proof set will belong to a left sibling.\\n        while (height - heightOffset - 1 < proof.sideNodes.length) {\\n            node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            height += 1;\\n        }\\n\\n        return namespaceNodeEquals(root, node);\\n    }\\n\\n    /// @notice Verify if contiguous elements exists in Merkle tree, given leaves, mutliproof, and root.\\n    /// @param root The root of the tree in which the given leaves are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param namespace Namespace of the leaves. All leaves must have the same namespace.\\n    /// @param data The leaves to verify. Note: leaf data must be the _entire_ share (including namespace prefixing).\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMulti(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        Namespace memory namespace,\\n        bytes[] memory data\\n    ) internal pure returns (bool) {\\n        // Hash all the leaves to get leaf nodes.\\n        NamespaceNode[] memory nodes = new NamespaceNode[](data.length);\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            nodes[i] = leafDigest(namespace, data[i]);\\n        }\\n\\n        // Verify inclusion of leaf nodes.\\n        return verifyMultiHashes(root, proof, nodes);\\n    }\\n\\n    /// @notice Verify if contiguous leaf hashes exists in Merkle tree, given leaf nodes, multiproof, and root.\\n    /// @param root The root of the tree in which the given leaf nodes are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes The leaf nodes to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMultiHashes(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes\\n    ) internal pure returns (bool) {\\n        uint256 leafIndex = 0;\\n        NamespaceNode[] memory leftSubtrees = new NamespaceNode[](proof.sideNodes.length);\\n\\n        for (uint256 i = 0; leafIndex != proof.beginKey && i < proof.sideNodes.length; ++i) {\\n            uint256 subtreeSize = _nextSubtreeSize(leafIndex, proof.beginKey);\\n            leftSubtrees[i] = proof.sideNodes[i];\\n            leafIndex += subtreeSize;\\n        }\\n\\n        // estimate the leaf size of the subtree containing the proof range\\n        uint256 proofRangeSubtreeEstimate = _getSplitPoint(proof.endKey) * 2;\\n        if (proofRangeSubtreeEstimate < 1) {\\n            proofRangeSubtreeEstimate = 1;\\n        }\\n\\n        (NamespaceNode memory rootHash, uint256 proofHead,,) =\\n            _computeRoot(proof, leafNodes, 0, proofRangeSubtreeEstimate, 0, 0);\\n        for (uint256 i = proofHead; i < proof.sideNodes.length; ++i) {\\n            rootHash = nodeDigest(rootHash, proof.sideNodes[i]);\\n        }\\n\\n        return namespaceNodeEquals(rootHash, root);\\n    }\\n\\n    /// @notice Returns the size of the subtree adjacent to `begin` that does\\n    /// not overlap `end`.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    function _nextSubtreeSize(uint256 begin, uint256 end) private pure returns (uint256) {\\n        uint256 ideal = _bitsTrailingZeroes(begin);\\n        uint256 max = _bitsLen(end - begin) - 1;\\n        if (ideal > max) {\\n            return 1 << max;\\n        }\\n        return 1 << ideal;\\n    }\\n\\n    /// @notice Returns the number of trailing zero bits in `x`; the result is\\n    /// 256 for `x` == 0.\\n    /// @param x Number.\\n    function _bitsTrailingZeroes(uint256 x) private pure returns (uint256) {\\n        uint256 mask = 1;\\n        uint256 count = 0;\\n\\n        while (x != 0 && mask & x == 0) {\\n            count++;\\n            x >>= 1;\\n        }\\n\\n        return count;\\n    }\\n\\n    /// @notice Computes the NMT root recursively.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes Leaf nodes for which inclusion is proven.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    /// @param headProof Internal detail: head of proof sidenodes array. Used for recursion. Set to `0` on first call.\\n    /// @param headLeaves Internal detail: head of leaves array. Used for recursion. Set to `0` on first call.\\n    /// @return _ Subtree root.\\n    /// @return _ New proof sidenodes array head. Used for recursion.\\n    /// @return _ New leaves array head. Used for recursion.\\n    /// @return _ If the subtree root is \\\"nil.\\\"\\n    function _computeRoot(\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes,\\n        uint256 begin,\\n        uint256 end,\\n        uint256 headProof,\\n        uint256 headLeaves\\n    ) private pure returns (NamespaceNode memory, uint256, uint256, bool) {\\n        // reached a leaf\\n        if (end - begin == 1) {\\n            // if current range overlaps with proof range, pop and return a leaf\\n            if (proof.beginKey <= begin && begin < proof.endKey) {\\n                // Note: second return value is guaranteed to be `false` by\\n                // construction.\\n                return _popLeavesIfNonEmpty(leafNodes, headLeaves, leafNodes.length, headProof);\\n            }\\n\\n            // if current range does not overlap with proof range,\\n            // pop and return a proof node (leaf) if present,\\n            // else return nil because leaf doesn't exist\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // if current range does not overlap with proof range,\\n        // pop and return a proof node if present,\\n        // else return nil because subtree doesn't exist\\n        if (end <= proof.beginKey || begin >= proof.endKey) {\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // Recursively get left and right subtree\\n        uint256 k = _getSplitPoint(end - begin);\\n        (NamespaceNode memory left, uint256 newHeadProofLeft, uint256 newHeadLeavesLeft,) =\\n            _computeRoot(proof, leafNodes, begin, begin + k, headProof, headLeaves);\\n        (NamespaceNode memory right, uint256 newHeadProof, uint256 newHeadLeaves, bool rightIsNil) =\\n            _computeRoot(proof, leafNodes, begin + k, end, newHeadProofLeft, newHeadLeavesLeft);\\n\\n        // only right leaf/subtree can be non-existent\\n        if (rightIsNil == true) {\\n            return (left, newHeadProof, newHeadLeaves, false);\\n        }\\n        NamespaceNode memory hash = nodeDigest(left, right);\\n        return (hash, newHeadProof, newHeadLeaves, false);\\n    }\\n\\n    /// @notice Pop from the leaf nodes array slice if it's not empty.\\n    /// @param nodes Entire leaf nodes array.\\n    /// @param headLeaves Head of leaf nodes array slice.\\n    /// @param end End of leaf nodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ New head of leaf nodes array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popLeavesIfNonEmpty(NamespaceNode[] memory nodes, uint256 headLeaves, uint256 end, uint256 headProof)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headLeaves, end);\\n        return (node, headProof, newHead, isNil);\\n    }\\n\\n    /// @notice Pop from the proof sidenodes array slice if it's not empty.\\n    /// @param nodes Entire proof sidenodes array.\\n    /// @param headLeaves Head of proof sidenodes array slice.\\n    /// @param end End of proof sidenodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ New head of proof sidenodes array slice.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popProofIfNonEmpty(NamespaceNode[] memory nodes, uint256 headProof, uint256 end, uint256 headLeaves)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headProof, end);\\n        return (node, newHead, headLeaves, isNil);\\n    }\\n\\n    /// @notice Pop from an array slice if it's not empty.\\n    /// @param nodes Entire array.\\n    /// @param head Head of array slice.\\n    /// @param end End of array slice.\\n    /// @return _ Popped node.\\n    /// @return _ New head of array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popIfNonEmpty(NamespaceNode[] memory nodes, uint256 head, uint256 end)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, bool)\\n    {\\n        if (nodes.length == 0 || head >= nodes.length || head >= end) {\\n            NamespaceNode memory node;\\n            return (node, head, true);\\n        }\\n        return (nodes[head], head + 1, false);\\n    }\\n}\\n\",\"keccak256\":\"0xe893ae809f062ad1b77e4e3382f6f34fd78d7dffb55853cfc47b0ffd2d56d590\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceNode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Types.sol\\\";\\n\\n/// @notice Namespace Merkle Tree node.\\nstruct NamespaceNode {\\n    // Minimum namespace.\\n    Namespace min;\\n    // Maximum namespace.\\n    Namespace max;\\n    // Node value.\\n    bytes32 digest;\\n}\\n\\n/// @notice Compares two `NamespaceNode`s.\\n/// @param first First node.\\n/// @param second Second node.\\n/// @return `true` is equal, `false otherwise.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceNodeEquals(NamespaceNode memory first, NamespaceNode memory second) pure returns (bool) {\\n    return first.min.equalTo(second.min) && first.max.equalTo(second.max) && (first.digest == second.digest);\\n}\\n\",\"keccak256\":\"0xdffc1a51e6dbe88cbe1b89f947290b93070b4e4094fbb412d157c0862a2cee55\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Get the minimum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMin(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.lessThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Get the maximum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMax(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.greaterThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Hash a leaf node.\\n/// @param namespace Namespace of the leaf.\\n/// @param data Raw data of the leaf.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(Namespace memory namespace, bytes memory data) pure returns (NamespaceNode memory) {\\n    bytes32 digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, namespace.toBytes(), data));\\n    NamespaceNode memory node = NamespaceNode(namespace, namespace, digest);\\n    return node;\\n}\\n\\n/// @notice Hash an internal node.\\n/// @param l Left child.\\n/// @param r Right child.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(NamespaceNode memory l, NamespaceNode memory r) pure returns (NamespaceNode memory) {\\n    Namespace memory min = namespaceMin(l.min, r.min);\\n    Namespace memory max;\\n    if (l.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = PARITY_SHARE_NAMESPACE();\\n    } else if (r.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = l.max;\\n    } else {\\n        max = namespaceMax(l.max, r.max);\\n    }\\n\\n    bytes32 digest = sha256(\\n        abi.encodePacked(\\n            Constants.NODE_PREFIX,\\n            l.min.toBytes(),\\n            l.max.toBytes(),\\n            l.digest,\\n            r.min.toBytes(),\\n            r.max.toBytes(),\\n            r.digest\\n        )\\n    );\\n\\n    NamespaceNode memory node = NamespaceNode(min, max, digest);\\n    return node;\\n}\\n\",\"keccak256\":\"0x068b2ef59d4b63bbc495494e21bd95371af0e8bac3ae38b739d8cfe4df6722cd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/verifier/DAVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../../Constants.sol\\\";\\nimport \\\"../../DataRootTuple.sol\\\";\\nimport \\\"../../IDAOracle.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleProof.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleTree.sol\\\";\\nimport \\\"../tree/namespace/NamespaceMerkleTree.sol\\\";\\nimport \\\"../tree/Types.sol\\\";\\n\\n/// @notice Contains the necessary parameters to prove that some shares, which were posted to\\n/// the Celestia network, were committed to by the Blobstream smart contract.\\nstruct SharesProof {\\n    // The shares that were committed to.\\n    bytes[] data;\\n    // The shares proof to the row roots. If the shares span multiple rows, we will have multiple nmt proofs.\\n    NamespaceMerkleMultiproof[] shareProofs;\\n    // The namespace of the shares.\\n    Namespace namespace;\\n    // The rows where the shares belong. If the shares span multiple rows, we will have multiple rows.\\n    NamespaceNode[] rowRoots;\\n    // The proofs of the rowRoots to the data root.\\n    BinaryMerkleProof[] rowProofs;\\n    // The proof of the data root tuple to the data root tuple root that was posted to the Blobstream contract.\\n    AttestationProof attestationProof;\\n}\\n\\n/// @notice Contains the necessary parameters needed to verify that a data root tuple\\n/// was committed to, by the Blobstream smart contract, at some specif nonce.\\nstruct AttestationProof {\\n    // the attestation nonce that commits to the data root tuple.\\n    uint256 tupleRootNonce;\\n    // the data root tuple that was committed to.\\n    DataRootTuple tuple;\\n    // the binary merkle proof of the tuple to the commitment.\\n    BinaryMerkleProof proof;\\n}\\n\\n/// @title DAVerifier: Celestia -> EVM, Data Availability verifier.\\n/// @dev The DAVerifier verifies that some shares, which were posted on Celestia, were committed to\\n/// by the Blobstream smart contract.\\nlibrary DAVerifier {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The shares to the rows proof is invalid.\\n        InvalidSharesToRowsProof,\\n        /// @notice The rows to the data root proof is invalid.\\n        InvalidRowsToDataRootProof,\\n        /// @notice The row to the data root proof is invalid.\\n        InvalidRowToDataRootProof,\\n        /// @notice The data root tuple to the data root tuple roof proof is invalid.\\n        InvalidDataRootTupleToDataRootTupleRootProof,\\n        /// @notice The number of share proofs isn't equal to the number of rows roots.\\n        UnequalShareProofsAndRowRootsNumber,\\n        /// @notice The number of rows proofs isn't equal to the number of rows roots.\\n        UnequalRowProofsAndRowRootsNumber,\\n        /// @notice The verifier data length isn't equal to the number of shares in the shares proofs.\\n        UnequalDataLengthAndNumberOfSharesProofs,\\n        /// @notice The number of leaves in the binary merkle proof is not divisible by 4.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The provided range is invalid.\\n        InvalidRange,\\n        /// @notice The provided range is out of bounds.\\n        OutOfBoundsRange\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verifies that the shares, which were posted to Celestia, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _sharesProof The proof of the shares to the data root tuple root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRoot(IDAOracle _bridge, SharesProof memory _sharesProof, bytes32 _root)\\n        internal\\n        view\\n        returns (bool, ErrorCodes)\\n    {\\n        // checking that the data root was committed to by the Blobstream smart contract.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRoot(\\n            _bridge, _sharesProof.rowRoots, _sharesProof.rowProofs, _sharesProof.attestationProof, _root\\n        );\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifySharesToDataRootTupleRootProof(\\n            _sharesProof.data,\\n            _sharesProof.shareProofs,\\n            _sharesProof.namespace,\\n            _sharesProof.rowRoots,\\n            _sharesProof.rowProofs,\\n            _root\\n        );\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the shares to data root tuple root proof.\\n    /// @param _data The data that needs to proven.\\n    /// @param _shareProofs The share to the row roots proof.\\n    /// @param _namespace The namespace of the shares.\\n    /// @param _rowRoots The row roots where the shares belong.\\n    /// @param _rowProofs The proofs of the rowRoots to the data root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRootProof(\\n        bytes[] memory _data,\\n        NamespaceMerkleMultiproof[] memory _shareProofs,\\n        Namespace memory _namespace,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // verifying the row root to data root tuple root proof.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        // checking that the shares were committed to by the rows roots.\\n        if (_shareProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalShareProofsAndRowRootsNumber);\\n        }\\n\\n        uint256 numberOfSharesInProofs = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            numberOfSharesInProofs += _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n        }\\n\\n        if (_data.length != numberOfSharesInProofs) {\\n            return (false, ErrorCodes.UnequalDataLengthAndNumberOfSharesProofs);\\n        }\\n\\n        uint256 cursor = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            uint256 sharesUsed = _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n            (bytes[] memory s, ErrorCodes err) = slice(_data, cursor, cursor + sharesUsed);\\n            if (err != ErrorCodes.NoError) {\\n                return (false, err);\\n            }\\n            if (!NamespaceMerkleTree.verifyMulti(_rowRoots[i], _shareProofs[i], _namespace, s)) {\\n                return (false, ErrorCodes.InvalidSharesToRowsProof);\\n            }\\n            cursor += sharesUsed;\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a row/column root, from a Celestia block, was committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifyRowRootToDataRootTupleRootProof(_rowRoot, _rowProof, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies that a row/column root proof, from a Celestia block, to the data root tuple root.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRootProof(\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        bytes memory rowRoot = abi.encodePacked(_rowRoot.min.toBytes(), _rowRoot.max.toBytes(), _rowRoot.digest);\\n        (bool valid,) = BinaryMerkleTree.verify(_root, _rowProof, rowRoot);\\n        if (!valid) {\\n            return (false, ErrorCodes.InvalidRowToDataRootProof);\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a set of rows/columns, from a Celestia block, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        // checking that the rows roots commit to the data root.\\n        (bool valid, ErrorCodes error) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the proof a set of rows/columns, from a Celestia block, to their corresponding data root.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRootProof(\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // checking that the rows roots commit to the data root.\\n        if (_rowProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalRowProofsAndRowRootsNumber);\\n        }\\n\\n        for (uint256 i = 0; i < _rowProofs.length; i++) {\\n            bytes memory rowRoot =\\n                abi.encodePacked(_rowRoots[i].min.toBytes(), _rowRoots[i].max.toBytes(), _rowRoots[i].digest);\\n            (bool valid,) = BinaryMerkleTree.verify(_root, _rowProofs[i], rowRoot);\\n            if (!valid) {\\n                return (false, ErrorCodes.InvalidRowsToDataRootProof);\\n            }\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a row/column root to data root binary merkle proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and was successfully committed to using\\n    //  the `DAVerifier.verifyRowRootToDataRootTupleRoot()` method\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof to have number of leaves equal to 0.\\n    /// @param _proof The proof of the row/column root to the data root.\\n    /// @return The square size of the corresponding block.\\n    /// @return an error code if the _proof is invalid, Errors.NoError otherwise.\\n    function computeSquareSizeFromRowProof(BinaryMerkleProof memory _proof)\\n        internal\\n        pure\\n        returns (uint256, ErrorCodes)\\n    {\\n        if (_proof.numLeaves % 4 != 0) {\\n            return (0, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        // we divide the number of leaves of the proof by 4 because the rows/columns tree is constructed\\n        // from the extended block row roots and column roots.\\n        return (_proof.numLeaves / 4, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a shares to row/column root proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and that the shares were successfully committed to using\\n    /// the `DAVerifier.verifySharesToDataRootTupleRoot()` method.\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof not to contain any side node.\\n    /// @param _proof The proof of the shares to the row/column root.\\n    /// @return The square size of the corresponding block.\\n    function computeSquareSizeFromShareProof(NamespaceMerkleMultiproof memory _proof) internal pure returns (uint256) {\\n        uint256 extendedSquareRowSize = 2 ** _proof.sideNodes.length;\\n        // we divide the extended square row size by 2 because the square size is the\\n        // the size of the row of the original square size.\\n        return extendedSquareRowSize / 2;\\n    }\\n\\n    /// @notice creates a slice of bytes from the data slice of bytes containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes[] memory _data, uint256 _begin, uint256 _end)\\n        internal\\n        pure\\n        returns (bytes[] memory, ErrorCodes)\\n    {\\n        if (_begin > _end) {\\n            return (_data, ErrorCodes.InvalidRange);\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            return (_data, ErrorCodes.OutOfBoundsRange);\\n        }\\n        bytes[] memory out = new bytes[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return (out, ErrorCodes.NoError);\\n    }\\n}\\n\",\"keccak256\":\"0x7015893047e509bfe8637df5ce17e658998259aa709d0e653358f774a77e9e7b\",\"license\":\"Apache-2.0\"},\"contracts/CelestiaRelay.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {IInputBox} from \\\"@cartesi/rollups/contracts/inputs/IInputBox.sol\\\";\\nimport \\\"../blobstream-contracts/src/IDAOracle.sol\\\";\\nimport \\\"../blobstream-contracts/src/lib/verifier/DAVerifier.sol\\\";\\n\\n\\n/// @title CelestiaRelay\\n/// @notice Relays Celestia blocks as inputs to Cartesi DApps\\ncontract CelestiaRelay {\\n\\n    IInputBox internal inputBox;\\n    IDAOracle internal blobstreamX;\\n\\n    /// @notice Constructor\\n    /// @param _inputBox InputBox contract to send inputs to Cartesi DApps\\n    /// @param _blobstreamX BlobstreamX contract where Celestia commitments are being stored\\n    constructor(IInputBox _inputBox, IDAOracle _blobstreamX) {\\n        inputBox = _inputBox;\\n        blobstreamX = _blobstreamX;\\n    }\\n\\n    /// @notice Relay the specified Celestia shares as an input to a DApp's input box\\n    /// @dev Called by clients to securely relay Celestia data to Cartesi DApps\\n    /// @param _dapp The address of the DApp\\n    /// @param _proof SharesProof object showing that a range of shares is committed to Celestia\\n    /// @param _root The Celestia \\\"data root\\\" for the block that contains the shares.\\n    /// @return The hash of the input as returned by the Cartesi DApp's input box\\n    function relayShares(\\n        address _dapp,\\n        SharesProof memory _proof,\\n        bytes32 _root\\n    ) external returns (bytes32)\\n    {\\n        // verify if shares are committed to the Celestia Blobstream contract\\n        (bool verified, DAVerifier.ErrorCodes errorCode) =\\n            DAVerifier.verifySharesToDataRootTupleRoot(\\n                blobstreamX,\\n                _proof,\\n                _root\\n            );\\n        require(verified, \\\"Shares not committed to Celestia BlobstreamX contract\\\");\\n\\n        // relay data as a Cartesi DApp input\\n        Namespace memory namespace = _proof.namespace;\\n        bytes32 dataRoot = _proof.attestationProof.tuple.dataRoot;\\n        uint256 blockHeight = _proof.attestationProof.tuple.height;\\n        uint256 index = _proof.shareProofs[0].beginKey;\\n        return inputBox.addInput(_dapp, abi.encode(namespace, dataRoot, blockHeight, index));\\n    }\\n}\\n\",\"keccak256\":\"0x0cd58c9378e1a4af3e014d834a6af6852614a1126a8d7ab0968905b1150bc13e\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346100305761001a610014610146565b9061021e565b610022610035565b6130ad61023782396130ad90f35b61003b565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061006a90610040565b810190811060018060401b0382111761008257604052565b61004a565b9061009a610093610035565b9283610060565b565b600080fd5b60018060a01b031690565b6100b5906100a1565b90565b6100c1906100ac565b90565b6100cd816100b8565b036100d457565b600080fd5b905051906100e6826100c4565b565b6100f1906100ac565b90565b6100fd816100e8565b0361010457565b600080fd5b90505190610116826100f4565b565b9190604083820312610141578061013561013e92600086016100d9565b93602001610109565b90565b61009c565b6101646132e48038038061015981610087565b928339810190610118565b9091565b60001b90565b9061017f60018060a01b0391610168565b9181191691161790565b90565b6101a061019b6101a5926100a1565b610189565b6100a1565b90565b6101b19061018c565b90565b6101bd906101a8565b90565b90565b906101d86101d36101df926101b4565b6101c0565b825461016e565b9055565b6101ec9061018c565b90565b6101f8906101e3565b90565b90565b9061021361020e61021a926101ef565b6101fb565b825461016e565b9055565b9061022d6102349260006101c3565b60016101fe565b56fe60806040526004361015610013575b610930565b61001e60003561002d565b631ffcf1a90361000e576108fa565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b600080fd5b67ffffffffffffffff811161013557610131602091610088565b0190565b610092565b90826000939282370152565b9092919261015b61015682610117565b6100d1565b93818552602085019082840111610177576101759261013a565b565b610112565b9080601f8301121561019a5781602061019793359101610146565b90565b6100eb565b9291906101b36101ae826100f0565b6100d1565b938185526020808601920281019183831161020a5781905b8382106101d9575050505050565b813567ffffffffffffffff8111610205576020916101fa878493870161017c565b8152019101906101cb565b6100eb565b61010d565b9080601f8301121561022d5781602061022a9335910161019f565b90565b6100eb565b67ffffffffffffffff811161024a5760208091020190565b610092565b90565b61025b8161024f565b0361026257565b600080fd5b9050359061027482610252565b565b67ffffffffffffffff811161028e5760208091020190565b610092565b60ff60f81b1690565b6102a581610293565b036102ac57565b600080fd5b905035906102be8261029c565b565b63ffffffff191690565b6102d3816102c0565b036102da57565b600080fd5b905035906102ec826102ca565b565b919060408382031261032a576103239061030860406100d1565b9361031682600083016102b1565b60008601526020016102df565b6020830152565b610083565b90565b61033b8161032f565b0361034257565b600080fd5b9050359061035482610332565b565b919060a0838203126103a45761039d9061037060606100d1565b9361037e82600083016102ee565b600086015261039082604083016102ee565b6020860152608001610347565b6040830152565b610083565b909291926103be6103b982610276565b6100d1565b9381855260a06020860192028301928184116103fd57915b8383106103e35750505050565b602060a0916103f28486610356565b8152019201916103d6565b61010d565b9080601f830112156104205781602061041d933591016103a9565b90565b6100eb565b91909160608184031261048b5761043c60606100d1565b9261044a8160008401610267565b600085015261045c8160208401610267565b6020850152604082013567ffffffffffffffff81116104865761047f9201610402565b6040830152565b6100e6565b610083565b9291906104a461049f82610232565b6100d1565b93818552602080860192028101918383116104fb5781905b8382106104ca575050505050565b813567ffffffffffffffff81116104f6576020916104eb8784938701610425565b8152019101906104bc565b6100eb565b61010d565b9080601f8301121561051e5781602061051b93359101610490565b90565b6100eb565b67ffffffffffffffff811161053b5760208091020190565b610092565b67ffffffffffffffff81116105585760208091020190565b610092565b9092919261057261056d82610540565b6100d1565b93818552602080860192028301928184116105af57915b8383106105965750505050565b602080916105a48486610347565b815201920191610589565b61010d565b9080601f830112156105d2578160206105cf9335910161055d565b90565b6100eb565b91909160608184031261063e576105ee60606100d1565b9260008201359167ffffffffffffffff831161063957610613826106329483016105b4565b60008601526106258260208301610267565b6020860152604001610267565b6040830152565b6100e6565b610083565b92919061065761065282610523565b6100d1565b93818552602080860192028101918383116106ae5781905b83821061067d575050505050565b813567ffffffffffffffff81116106a95760209161069e87849387016105d7565b81520191019061066f565b6100eb565b61010d565b9080601f830112156106d1578160206106ce93359101610643565b90565b6100eb565b91906040838203126107125761070b906106f060406100d1565b936106fe8260008301610267565b6000860152602001610347565b6020830152565b610083565b91909160808184031261077d5761072e60606100d1565b9261073c8160008401610267565b600085015261074e81602084016106d6565b6020850152606082013567ffffffffffffffff81116107785761077192016105d7565b6040830152565b6100e6565b610083565b91909160e08184031261087e5761079960c06100d1565b92600082013567ffffffffffffffff811161087957816107ba91840161020f565b6000850152602082013567ffffffffffffffff811161087457816107df918401610500565b60208501526107f181604084016102ee565b6040850152608082013567ffffffffffffffff811161086f5781610816918401610402565b606085015260a082013567ffffffffffffffff811161086a578161083b9184016106b3565b608085015260c082013567ffffffffffffffff81116108655761085e9201610717565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b90916060828403126108d25761089c8360008401610074565b9260208301359067ffffffffffffffff82116108cd576108c1816108ca938601610782565b93604001610347565b90565b610043565b61003e565b6108e09061032f565b9052565b91906108f8906000602085019401906108d7565b565b3461092b57610927610916610910366004610883565b91610c5d565b61091e610033565b918291826108e4565b0390f35b610039565b600080fd5b600090565b60001c90565b60018060a01b031690565b61095761095c9161093a565b610940565b90565b610969905461094b565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b6109d0603560409261096c565b6109d981610975565b0190565b6109f390602081019060008183039101526109c3565b90565b156109fd57565b610a05610033565b62461bcd60e51b815280610a1b600482016109dd565b0390fd5b610a29905161032f565b90565b610a36905161024f565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b90610a5d82610a4f565b811015610a6e576020809102010190565b610a39565b90565b90565b610a8d610a88610a9292610a73565b610a76565b61024f565b90565b60018060a01b031690565b610aac610ab19161093a565b610a95565b90565b610abe9054610aa0565b90565b610ad5610ad0610ada92610048565b610a76565b610048565b90565b610ae690610ac1565b90565b610af290610add565b90565b610afe90610293565b9052565b610b0b906102c0565b9052565b90602080610b3393610b2960008201516000860190610af5565b0151910190610b02565b565b610b3e9061024f565b9052565b610b78610b7f94610b6e608094989795610b6460a086019a6000870190610b0f565b60408501906108d7565b6060830190610b35565b0190610b35565b565b60e01b90565b90505190610b9482610332565b565b90602082820312610bb057610bad91600001610b87565b90565b61003e565b610bbe90610053565b9052565b5190565b60209181520190565b60005b838110610be3575050906000910152565b806020918301518185015201610bd2565b610c13610c1c602093610c2193610c0a81610bc2565b93848093610bc6565b95869101610bcf565b610088565b0190565b91610c4992610c3c60408201936000830190610bb5565b6020818403910152610bf4565b90565b610c54610033565b3d6000823e3d90fd5b9091610c67610935565b50610c72600161095f565b9083610c7d92610dad565b50610c87906109f6565b8160400151918060a0015160200151602001610ca290610a1f565b918160a0015160200151600001610cb890610a2c565b91602001516000610cc890610a79565b610cd191610a53565b51600001610cde90610a2c565b91610ce96000610ab4565b610cf290610ae9565b93631789cd639295909193610d05610033565b9485936020850193610d1694610b42565b602082018103825203610d2990836100a8565b610d31610033565b938492610d3e8493610b81565b83526004830191610d4e92610c25565b03815a602094600091f1908115610d9957600091610d6b575b5090565b610d8c915060203d8111610d92575b610d8481836100a8565b810190610b96565b38610d67565b503d610d7a565b610c4c565b600090565b600090565b151590565b91610ddf610de79493610dbe610d9e565b50610dc7610da3565b506060840151608085015160a0860151918593610fa1565b949015610da8565b610e1957610e13929350600082015191602081015160408201519060806060840151930151939461113d565b91909190565b505060009190565b610e2a90610add565b90565b610e3681610da8565b03610e3d57565b600080fd5b90505190610e4f82610e2d565b565b90602082820312610e6b57610e6891600001610e42565b90565b61003e565b610e799061024f565b9052565b610e869061032f565b9052565b90602080610eae93610ea460008201516000860190610e70565b0151910190610e7d565b565b5190565b60209181520190565b60200190565b90610ed081602093610e7d565b0190565b60200190565b90610ef7610ef1610eea84610eb0565b8093610eb4565b92610ebd565b9060005b818110610f085750505090565b909192610f21610f1b6001928651610ec3565b94610ed4565b9101919091610efb565b90610f6990604080610f4c6060840160008701518582036000870152610eda565b94610f5f60208201516020860190610e70565b0151910190610e70565b90565b610f91610f9e949293610f8760808401956000850190610b35565b6020830190610e8a565b6060818403910152610f2b565b90565b610fc36020919593949295610fb4610d9e565b50610fbd610da3565b50610e21565b631f3302a990610ff9610fd860008601610a2c565b92611004604086880151970151610fed610033565b97889687958695610b81565b855260048501610f6c565b03915afa80156110705761102191600091611042575b5015610da8565b6110375761103192919091611410565b91909190565b505050600090600490565b611063915060203d8111611069575b61105b81836100a8565b810190610e51565b3861101a565b503d611051565b610c4c565b5190565b6001611085910161024f565b90565b634e487b7160e01b600052601160045260246000fd5b6110ad6110b39193929361024f565b9261024f565b82039182116110be57565b611088565b6110d26110d89193929361024f565b9261024f565b82018092116110e357565b611088565b5190565b634e487b7160e01b600052602160045260246000fd5b600b111561110c57565b6110ec565b9061111b82611102565b565b9061112782611075565b811015611138576020809102010190565b610a39565b936111639061116b929796611150610d9e565b50611159610da3565b5085919091611410565b919015610da8565b61137c575061117985610a4f565b61119361118d61118885611075565b61024f565b9161024f565b0361136f576111a26000610a79565b926111ad6000610a79565b935b846111ca6111c46111bf8a610a4f565b61024f565b9161024f565b10156112205761121461121a9161120e6111f160206111ea8c8b90610a53565b5101610a2c565b61120860006112018d8c90610a53565b5101610a2c565b9061109e565b906110c3565b94611079565b936111af565b909350949093919461124361123d611237866110e8565b9261024f565b9161024f565b03611362576112526000610a79565b9461125d6000610a79565b955b8661127a61127461126f86610a4f565b61024f565b9161024f565b1015611353576112b761129a6020611293868b90610a53565b5101610a2c565b6112b160006112aa878c90610a53565b5101610a2c565b9061109e565b6112cd86836112c78585906110c3565b916115cd565b806112e16112db6000611111565b91611111565b03611343575061130f611315916112f9868c9061111d565b5190611306888d90610a53565b518b91926117c6565b15610da8565b6113335761132d9161132791906110c3565b96611079565b9561125f565b5050505092505050600090600190565b9850505050505091505060009190565b50505092505050600190600090565b5092505050600090600790565b5050509050600090600590565b945050505060009190565b5190565b62ffffff191690565b90565b6113a36113a89161138b565b611394565b9052565b90565b6113bb6113c09161032f565b6113ac565b9052565b602093926113e4601d836113dc82956113ec97611397565b018092611397565b0180926113af565b0190565b906113fa82611387565b81101561140b576020809102010190565b610a39565b91909161141b610d9e565b50611424610da3565b5061142e83611387565b61144861144261143d84611075565b61024f565b9161024f565b03611536576114576000610a79565b5b8061147361146d61146887611387565b61024f565b9161024f565b101561152a5761150c611505611497600061148f86869061111d565b51015161192b565b6114f06114b260206114aa88889061111d565b51015161192b565b916114e16114cd60406114c68a8a9061111d565b5101610a1f565b6114d5610033565b948593602085016113c4565b602082018103825203826100a8565b85906114fd8886906113f0565b5190916119c1565b5015610da8565b61151e5761151990611079565b611458565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b90611558611553836100f0565b6100d1565b918252565b606090565b60005b82811061157157505050565b60209061157c61155d565b8184015201611565565b906115ab61159383611546565b926020806115a186936100f0565b9201910390611562565b565b906115b7826110e8565b8110156115c8576020809102010190565b610a39565b9291926115d8611541565b506115e1610da3565b50816115f56115ef8661024f565b9161024f565b116116c3578161161561160f61160a846110e8565b61024f565b9161024f565b1180156116a1575b6116975761163461162f85849061109e565b611586565b92825b8061164a6116448861024f565b9161024f565b101561168c57611687906116806116628583906115ad565b518761166f84899061109e565b9161167a83836115ad565b526115ad565b5150611079565b611637565b509350505090600090565b9192505090600a90565b50836116bd6116b76116b2846110e8565b61024f565b9161024f565b1161161d565b9192505090600990565b906116df6116da83610276565b6100d1565b918252565b6116ee60606100d1565b90565b6116fb60406100d1565b90565b600090565b600090565b6117106116f1565b906020808361171d6116fe565b815201611728611703565b81525050565b611736611708565b90565b600090565b6117466116e4565b90602080808461175461172e565b81520161175f61172e565b81520161176a611739565b81525050565b61177861173e565b90565b60005b82811061178a57505050565b602090611795611770565b818401520161177e565b906117c46117ac836116cd565b926020806117ba8693610276565b920191039061177b565b565b929190936117d2610d9e565b506117e46117df846110e8565b61179f565b946117ef6000610a79565b5b8061180b611805611800886110e8565b61024f565b9161024f565b101561184d576118489061184161182e866118278985906115ad565b5190611c5c565b89839161183b838361111d565b5261111d565b5150611079565b6117f0565b50925093905061185f92919091611d75565b90565b600090565b6118719051610293565b90565b61187e90516102c0565b90565b90565b61189061189591610293565b611881565b9052565b90565b6118a86118ad916102c0565b611899565b9052565b6001816118c46118cc93601c9695611884565b01809261189c565b0190565b60200190565b6118e0905161138b565b90565b1b90565b6119016118fc6118f683610bc2565b926118d0565b6118d6565b90601d811061190f575b5090565b6119249062ffffff1990601d036008026118e3565b163861190b565b61197f90611937611862565b5061197a611953602061194c60008501611867565b9301611874565b9161196b61195f610033565b938492602084016118b1565b602082018103825203826100a8565b6118e7565b90565b600090565b90565b61199e6119996119a392611987565b610a76565b61024f565b90565b600611156119b057565b6110ec565b906119bf826119a6565b565b90916119cb610d9e565b506119d4611982565b506119e160408401610a2c565b6119f46119ee600161198a565b9161024f565b1115600014611b4b57611a0a6000840151610eb0565b611a1d611a176000610a79565b9161024f565b03611b40575b611a2f60208401610a2c565b611a4c611a46611a4160408701610a2c565b61024f565b9161024f565b1015611b3557611a5b906120c2565b91611a696000820151610eb0565b611a7c611a766000610a79565b9161024f565b14611aea579182611a936020611aac949501610a2c565b916000611aa260408401610a2c565b9192015192612151565b80611ac0611aba60006119b5565b916119b5565b03611ae05750611ad3611ad9919261032f565b9161032f565b1490600090565b9291505060009190565b6040611af69101610a2c565b611b09611b03600161198a565b9161024f565b14600014611b2b57611b1e611b24919261032f565b9161032f565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611b586000840151610eb0565b611b8a611b84611b7f611b6d60208801610a2c565b611b7960408901610a2c565b90611f97565b61024f565b9161024f565b0315611a2357505050600090600190565b611ba361173e565b90565b60f81b90565b611bc0611bbb611bc592610a73565b611ba6565b610293565b90565b611bd26000611bac565b90565b905090565b611bff611bf692602092611bed81610bc2565b94858093611bd5565b93849101610bcf565b0190565b91611c22600184611c1a611c299796601d96611884565b018092611397565b0190611bda565b90565b60001b90565b611c3b91611bda565b90565b611c4860606100d1565b90565b52565b90611c589061032f565b9052565b906000611cb8602092611c6d611b9b565b50611ca7611c79611bc8565b611c99611c858861192b565b93611c8e610033565b948593898501611c03565b8682018103825203826100a8565b611caf610033565b91829182611c32565b039060025afa15611cff57611cfc611cd1600051611c2c565b611cf383611cea611ce0611c3e565b9560008701611c4b565b60208501611c4b565b60408301611c4e565b90565b610c4c565b611d0d9061024f565b6000198114611d1c5760010190565b611088565b90565b611d38611d33611d3d92611d21565b610a76565b61024f565b90565b611d4f611d559193929361024f565b9261024f565b91611d6183820261024f565b928184041490151715611d7057565b611088565b611d7d610d9e565b50611d886000610a79565b93611d9e611d996040850151611075565b61179f565b91611da96000610a79565b955b80611dc9611dc3611dbe60008901610a2c565b61024f565b9161024f565b141580611f18575b15611e2d57611e2181611df3611e2793611ded60008a01610a2c565b9061236f565b611e19611e0560408a01518c9061111d565b51888c91611e13838361111d565b5261111d565b5150906110c3565b96611d04565b95611dab565b5093909450611ea49150611e5e611e4e611e4960208601610a2c565b612445565b611e586002611d24565b90611d40565b80611e72611e6c600161198a565b9161024f565b10611f08575b839160009190600090611e9e611e98611e92600096610a79565b93610a79565b94610a79565b946124d2565b505093905b84611ec8611ec2611ebd6040870151611075565b61024f565b9161024f565b1015611ef757611eeb611ef191611ee46040860151889061111d565b5190612755565b94611079565b93611ea9565b909350611f059291506128c3565b90565b50611f13600161198a565b611e78565b5086611f38611f32611f2d6040890151611075565b61024f565b9161024f565b10611dd1565b600090565b90565b611f5a611f55611f5f92611f43565b610a76565b61024f565b90565b611f6d610100611f46565b90565b611f8f90611f89611f83611f949461024f565b9161024f565b906118e3565b61024f565b90565b611f9f611f3e565b5081611fb4611fae600161198a565b9161024f565b111561209857611fd4611fc5611f62565b611fce8461293e565b9061109e565b91611ffc6001611ff7611ff186611feb600161198a565b9061109e565b9161198a565b611f70565b908261202361201d61201885612012600161198a565b9061109e565b61024f565b9161024f565b11156000146120325750505090565b908092935061204a612044600161198a565b9161024f565b146000146120625750505061205f600161198a565b90565b61207c61208292612076600195829061109e565b9261109e565b90611f97565b90612090612095929161198a565b6110c3565b90565b50506120a46000610a79565b90565b806120b86001926120bf9594611884565b0190611bda565b90565b60006121136020926120d2610935565b506121026120de611bc8565b6120f46120e9610033565b9384928884016120a7565b8682018103825203826100a8565b61210a610033565b91829182611c32565b039060025afa1561212c57612129600051611c2c565b90565b610c4c565b9061213b82610eb0565b81101561214c576020809102010190565b610a39565b93929361215c610935565b50612165611982565b508161217a6121746000610a79565b9161024f565b14612364578161219361218d600161198a565b9161024f565b14612333576121a185610eb0565b6121b46121ae6000610a79565b9161024f565b14612328576121c282612445565b6121f4866000906121ee6121e86121d88b610eb0565b6121e2600161198a565b9061109e565b92610a79565b90612af6565b916121fd611982565b508061221161220b8461024f565b9161024f565b106122a4576122419392916122336122399261222b610935565b50829061109e565b9361109e565b849192612151565b90918161225761225160006119b5565b916119b5565b0361229c57505061229161228c84612286612276612296969792610eb0565b612280600161198a565b9061109e565b90612131565b610a1f565b612c4b565b90600090565b915092509190565b6122c493506000969496929192506122ba610935565b5091869192612151565b9093816122da6122d460006119b5565b916119b5565b0361232057505061231461230f61231a9394926123096122f982610eb0565b612303600161198a565b9061109e565b90612131565b610a1f565b90612c4b565b90600090565b915092509190565b505090915090600590565b5050909161234090610eb0565b61235361234d6000610a79565b9161024f565b0361235e5790600090565b90600490565b505090915090600390565b6123966123916123a692612381611f3e565b5061238b81612cbd565b9461109e565b612d44565b6123a0600161198a565b9061109e565b816123b96123b38361024f565b9161024f565b116123d557506123d2906123cd600161198a565b611f70565b90565b6123e991506123e4600161198a565b611f70565b90565b156123f357565b600080fd5b60ff1690565b61241261240d61241792611987565b610a76565b6123f8565b90565b1c90565b61243d90612437612431612442946123f8565b9161024f565b9061241a565b61024f565b90565b61244d611f3e565b5061246c8161246561245f600161198a565b9161024f565b10156123ec565b61249c61247882612d44565b61249761249160019261248b600161198a565b9061109e565b9161198a565b611f70565b906124b06124aa839261024f565b9161024f565b146124b9575b90565b6124cd906124c760016123fe565b9061241e565b6124b6565b919092939594956124e1611b9b565b506124ea611f3e565b506124f3611f3e565b506124fc610d9e565b5061250885839061109e565b61251b612515600161198a565b9161024f565b14612627578461253e61253861253360008701610a2c565b61024f565b9161024f565b11158015612601575b6125df5761257b9061256261255d87859061109e565b612445565b978491868590612573878d906110c3565b9293946124d2565b9161259e97939161259595935094919990949596926110c3565b919293946124d2565b949190929092946125b86125b26001610da8565b91610da8565b146125d2576125c691612755565b90929160009193929190565b5090929160009193929190565b93916125f79596935060409150015192909192612ddd565b9193909293929190565b508161262061261a61261560208701610a2c565b61024f565b9161024f565b1015612547565b93919061263a6000839895979801610a2c565b61264c6126468361024f565b9161024f565b11159081612699575b506126765761266c94506040015192909192612ddd565b9193909293929190565b5050908261268861268f949391611075565b9192612d99565b9193909293929190565b90506126b86126b26126ad60208501610a2c565b61024f565b9161024f565b1038612655565b6126c7611708565b90565b6126de6126d96126e392611987565b611ba6565b610293565b90565b6126f060016126ca565b90565b946127416020601d9661273988839c9b98612731826127499a6127296127519f80612721600192869f611884565b018092611397565b018092611397565b0180926113af565b018092611397565b018092611397565b0180926113af565b0190565b9061275e611b9b565b5060206000612832612777828601518386015190612e20565b936127806126bf565b5061279683870151612790612eb2565b90612ef8565b8314612880576128216127a7612eb2565b965b6128136127b46126e6565b916127c18782015161192b565b946127da60406127d38b85015161192b565b9301610a1f565b6127e68983015161192b565b906127ff60406127f88d86015161192b565b9401610a1f565b93612808610033565b9889978d89016126f3565b8682018103825203826100a8565b612829610033565b91829182611c32565b039060025afa1561287b576128789061286f61284f600051611c2c565b919361286661285c611c3e565b9560008701611c4b565b60208501611c4b565b60408301611c4e565b90565b610c4c565b6128958382015161288f612eb2565b90612ef8565b83146128a95761282184870151965b6127a9565b6128216128bd858801518684015190612f28565b966128a4565b906128cc610d9e565b506128e06000830151600083015190612ef8565b80612925575b91826128f2575b505090565b61291d919250612912604061290b816129179401610a1f565b9401610a1f565b61032f565b9161032f565b1438806128ed565b506129396020830151602083015190612ef8565b6128e6565b612946611f3e565b506129516000610a79565b5b6129666001612961839161198a565b611f70565b6129786129728461024f565b9161024f565b1015612997576129929061298c600161198a565b906110c3565b612952565b6129a991506129a4611f62565b61109e565b90565b606090565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612a0c602a60409261096c565b612a15816129b1565b0190565b612a2f90602081019060008183039101526129ff565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612a8d602f60409261096c565b612a9681612a32565b0190565b612ab09060208101906000818303910152612a80565b90565b90612ac5612ac083610540565b6100d1565b918252565b369037565b90612af4612adc83612ab3565b92602080612aea8693610540565b9201910390612aca565b565b929092612b016129ac565b5083612b15612b0f8561024f565b9161024f565b11612bfd5783612b35612b2f612b2a84610eb0565b61024f565b9161024f565b118015612bdb575b612bb957612b54612b4f84869061109e565b612acf565b91845b80612b6a612b648761024f565b9161024f565b1015612bb057612bab90612ba6612b8a612b85868490612131565b610a1f565b612ba18791612b9a858c9061109e565b9092612131565b611c4e565b611079565b612b57565b50935050905090565b612bc1610033565b62461bcd60e51b815280612bd760048201612a9a565b0390fd5b5082612bf7612bf1612bec84610eb0565b61024f565b9161024f565b11612b3d565b612c05610033565b62461bcd60e51b815280612c1b60048201612a19565b0390fd5b60209392612c3f600183612c378895612c4797611884565b0180926113af565b0180926113af565b0190565b612c9f602092612c8e600093612c5f610935565b50612c80612c6b6126e6565b9193612c75610033565b948593898501612c1f565b8682018103825203826100a8565b612c96610033565b91829182611c32565b039060025afa15612cb857612cb5600051611c2c565b90565b610c4c565b612cc5611f3e565b50612cd0600161198a565b91612cdb6000610a79565b5b82612cf0612cea6000610a79565b9161024f565b141580612d27575b15612d2057612d09612d1a91611d04565b92612d1460016123fe565b9061241e565b91612cdc565b9150915090565b50838316612d3e612d386000610a79565b9161024f565b14612cf8565b612d4c611f3e565b50612d576000610a79565b5b81612d6c612d666000610a79565b9161024f565b14612d9457612d7d612d8e91611d04565b91612d8860016123fe565b9061241e565b90612d58565b905090565b91612dcd92949394612da9611b9b565b50612db2611f3e565b50612dbb611f3e565b50612dc4610d9e565b50919091612f4d565b9391929093929193929193929190565b91612e1192949394612ded611b9b565b50612df6611f3e565b50612dff611f3e565b50612e08610d9e565b50919091612f4d565b91929091929193929193929190565b90612e296126bf565b50612e35828290613017565b600014612e40575090565b905090565b612e4f60406100d1565b90565b90565b612e69612e64612e6e92612e52565b611ba6565b610293565b90565b90612e7b90610293565b9052565b90565b60201b90565b612e9c612e97612ea192612e7f565b612e82565b6102c0565b90565b90612eae906102c0565b9052565b612eba6126bf565b5060ff612ef5612eec60018060e01b03612ee7612ede612ed8612e45565b95612e55565b60008601612e71565b612e88565b60208301612ea4565b90565b612f1e612f19612f13612f2493612f0d610d9e565b5061192b565b9361192b565b61138b565b9161138b565b1490565b90612f316126bf565b50612f3d828290613047565b600014612f48575090565b905090565b9091612f57611b9b565b50612f60611f3e565b50612f69610d9e565b50612f7382611075565b612f86612f806000610a79565b9161024f565b148015612ff4575b908115612fd7575b50612fc457612fa9612fbb91839061111d565b5191612fb5600161198a565b906110c3565b91600091929190565b50612fcd611b9b565b9091600191929190565b9050612fec612fe6849261024f565b9161024f565b101538612f96565b508261301061300a61300585611075565b61024f565b9161024f565b1015612f8e565b61303d6130386130326130439361302c610d9e565b5061192b565b9361192b565b61138b565b9161138b565b1090565b61306d6130686130626130739361305c610d9e565b5061192b565b9361192b565b61138b565b9161138b565b119056fea26469706673582212201ae3d0193439c0eccd6519edb9e8e35c8a110f6ee8f1a8c3467145a0ed311c7264736f6c634300081a0033",
  "deployedBytecode": "0x60806040526004361015610013575b610930565b61001e60003561002d565b631ffcf1a90361000e576108fa565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b600080fd5b67ffffffffffffffff811161013557610131602091610088565b0190565b610092565b90826000939282370152565b9092919261015b61015682610117565b6100d1565b93818552602085019082840111610177576101759261013a565b565b610112565b9080601f8301121561019a5781602061019793359101610146565b90565b6100eb565b9291906101b36101ae826100f0565b6100d1565b938185526020808601920281019183831161020a5781905b8382106101d9575050505050565b813567ffffffffffffffff8111610205576020916101fa878493870161017c565b8152019101906101cb565b6100eb565b61010d565b9080601f8301121561022d5781602061022a9335910161019f565b90565b6100eb565b67ffffffffffffffff811161024a5760208091020190565b610092565b90565b61025b8161024f565b0361026257565b600080fd5b9050359061027482610252565b565b67ffffffffffffffff811161028e5760208091020190565b610092565b60ff60f81b1690565b6102a581610293565b036102ac57565b600080fd5b905035906102be8261029c565b565b63ffffffff191690565b6102d3816102c0565b036102da57565b600080fd5b905035906102ec826102ca565b565b919060408382031261032a576103239061030860406100d1565b9361031682600083016102b1565b60008601526020016102df565b6020830152565b610083565b90565b61033b8161032f565b0361034257565b600080fd5b9050359061035482610332565b565b919060a0838203126103a45761039d9061037060606100d1565b9361037e82600083016102ee565b600086015261039082604083016102ee565b6020860152608001610347565b6040830152565b610083565b909291926103be6103b982610276565b6100d1565b9381855260a06020860192028301928184116103fd57915b8383106103e35750505050565b602060a0916103f28486610356565b8152019201916103d6565b61010d565b9080601f830112156104205781602061041d933591016103a9565b90565b6100eb565b91909160608184031261048b5761043c60606100d1565b9261044a8160008401610267565b600085015261045c8160208401610267565b6020850152604082013567ffffffffffffffff81116104865761047f9201610402565b6040830152565b6100e6565b610083565b9291906104a461049f82610232565b6100d1565b93818552602080860192028101918383116104fb5781905b8382106104ca575050505050565b813567ffffffffffffffff81116104f6576020916104eb8784938701610425565b8152019101906104bc565b6100eb565b61010d565b9080601f8301121561051e5781602061051b93359101610490565b90565b6100eb565b67ffffffffffffffff811161053b5760208091020190565b610092565b67ffffffffffffffff81116105585760208091020190565b610092565b9092919261057261056d82610540565b6100d1565b93818552602080860192028301928184116105af57915b8383106105965750505050565b602080916105a48486610347565b815201920191610589565b61010d565b9080601f830112156105d2578160206105cf9335910161055d565b90565b6100eb565b91909160608184031261063e576105ee60606100d1565b9260008201359167ffffffffffffffff831161063957610613826106329483016105b4565b60008601526106258260208301610267565b6020860152604001610267565b6040830152565b6100e6565b610083565b92919061065761065282610523565b6100d1565b93818552602080860192028101918383116106ae5781905b83821061067d575050505050565b813567ffffffffffffffff81116106a95760209161069e87849387016105d7565b81520191019061066f565b6100eb565b61010d565b9080601f830112156106d1578160206106ce93359101610643565b90565b6100eb565b91906040838203126107125761070b906106f060406100d1565b936106fe8260008301610267565b6000860152602001610347565b6020830152565b610083565b91909160808184031261077d5761072e60606100d1565b9261073c8160008401610267565b600085015261074e81602084016106d6565b6020850152606082013567ffffffffffffffff81116107785761077192016105d7565b6040830152565b6100e6565b610083565b91909160e08184031261087e5761079960c06100d1565b92600082013567ffffffffffffffff811161087957816107ba91840161020f565b6000850152602082013567ffffffffffffffff811161087457816107df918401610500565b60208501526107f181604084016102ee565b6040850152608082013567ffffffffffffffff811161086f5781610816918401610402565b606085015260a082013567ffffffffffffffff811161086a578161083b9184016106b3565b608085015260c082013567ffffffffffffffff81116108655761085e9201610717565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b90916060828403126108d25761089c8360008401610074565b9260208301359067ffffffffffffffff82116108cd576108c1816108ca938601610782565b93604001610347565b90565b610043565b61003e565b6108e09061032f565b9052565b91906108f8906000602085019401906108d7565b565b3461092b57610927610916610910366004610883565b91610c5d565b61091e610033565b918291826108e4565b0390f35b610039565b600080fd5b600090565b60001c90565b60018060a01b031690565b61095761095c9161093a565b610940565b90565b610969905461094b565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b6109d0603560409261096c565b6109d981610975565b0190565b6109f390602081019060008183039101526109c3565b90565b156109fd57565b610a05610033565b62461bcd60e51b815280610a1b600482016109dd565b0390fd5b610a29905161032f565b90565b610a36905161024f565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b90610a5d82610a4f565b811015610a6e576020809102010190565b610a39565b90565b90565b610a8d610a88610a9292610a73565b610a76565b61024f565b90565b60018060a01b031690565b610aac610ab19161093a565b610a95565b90565b610abe9054610aa0565b90565b610ad5610ad0610ada92610048565b610a76565b610048565b90565b610ae690610ac1565b90565b610af290610add565b90565b610afe90610293565b9052565b610b0b906102c0565b9052565b90602080610b3393610b2960008201516000860190610af5565b0151910190610b02565b565b610b3e9061024f565b9052565b610b78610b7f94610b6e608094989795610b6460a086019a6000870190610b0f565b60408501906108d7565b6060830190610b35565b0190610b35565b565b60e01b90565b90505190610b9482610332565b565b90602082820312610bb057610bad91600001610b87565b90565b61003e565b610bbe90610053565b9052565b5190565b60209181520190565b60005b838110610be3575050906000910152565b806020918301518185015201610bd2565b610c13610c1c602093610c2193610c0a81610bc2565b93848093610bc6565b95869101610bcf565b610088565b0190565b91610c4992610c3c60408201936000830190610bb5565b6020818403910152610bf4565b90565b610c54610033565b3d6000823e3d90fd5b9091610c67610935565b50610c72600161095f565b9083610c7d92610dad565b50610c87906109f6565b8160400151918060a0015160200151602001610ca290610a1f565b918160a0015160200151600001610cb890610a2c565b91602001516000610cc890610a79565b610cd191610a53565b51600001610cde90610a2c565b91610ce96000610ab4565b610cf290610ae9565b93631789cd639295909193610d05610033565b9485936020850193610d1694610b42565b602082018103825203610d2990836100a8565b610d31610033565b938492610d3e8493610b81565b83526004830191610d4e92610c25565b03815a602094600091f1908115610d9957600091610d6b575b5090565b610d8c915060203d8111610d92575b610d8481836100a8565b810190610b96565b38610d67565b503d610d7a565b610c4c565b600090565b600090565b151590565b91610ddf610de79493610dbe610d9e565b50610dc7610da3565b506060840151608085015160a0860151918593610fa1565b949015610da8565b610e1957610e13929350600082015191602081015160408201519060806060840151930151939461113d565b91909190565b505060009190565b610e2a90610add565b90565b610e3681610da8565b03610e3d57565b600080fd5b90505190610e4f82610e2d565b565b90602082820312610e6b57610e6891600001610e42565b90565b61003e565b610e799061024f565b9052565b610e869061032f565b9052565b90602080610eae93610ea460008201516000860190610e70565b0151910190610e7d565b565b5190565b60209181520190565b60200190565b90610ed081602093610e7d565b0190565b60200190565b90610ef7610ef1610eea84610eb0565b8093610eb4565b92610ebd565b9060005b818110610f085750505090565b909192610f21610f1b6001928651610ec3565b94610ed4565b9101919091610efb565b90610f6990604080610f4c6060840160008701518582036000870152610eda565b94610f5f60208201516020860190610e70565b0151910190610e70565b90565b610f91610f9e949293610f8760808401956000850190610b35565b6020830190610e8a565b6060818403910152610f2b565b90565b610fc36020919593949295610fb4610d9e565b50610fbd610da3565b50610e21565b631f3302a990610ff9610fd860008601610a2c565b92611004604086880151970151610fed610033565b97889687958695610b81565b855260048501610f6c565b03915afa80156110705761102191600091611042575b5015610da8565b6110375761103192919091611410565b91909190565b505050600090600490565b611063915060203d8111611069575b61105b81836100a8565b810190610e51565b3861101a565b503d611051565b610c4c565b5190565b6001611085910161024f565b90565b634e487b7160e01b600052601160045260246000fd5b6110ad6110b39193929361024f565b9261024f565b82039182116110be57565b611088565b6110d26110d89193929361024f565b9261024f565b82018092116110e357565b611088565b5190565b634e487b7160e01b600052602160045260246000fd5b600b111561110c57565b6110ec565b9061111b82611102565b565b9061112782611075565b811015611138576020809102010190565b610a39565b936111639061116b929796611150610d9e565b50611159610da3565b5085919091611410565b919015610da8565b61137c575061117985610a4f565b61119361118d61118885611075565b61024f565b9161024f565b0361136f576111a26000610a79565b926111ad6000610a79565b935b846111ca6111c46111bf8a610a4f565b61024f565b9161024f565b10156112205761121461121a9161120e6111f160206111ea8c8b90610a53565b5101610a2c565b61120860006112018d8c90610a53565b5101610a2c565b9061109e565b906110c3565b94611079565b936111af565b909350949093919461124361123d611237866110e8565b9261024f565b9161024f565b03611362576112526000610a79565b9461125d6000610a79565b955b8661127a61127461126f86610a4f565b61024f565b9161024f565b1015611353576112b761129a6020611293868b90610a53565b5101610a2c565b6112b160006112aa878c90610a53565b5101610a2c565b9061109e565b6112cd86836112c78585906110c3565b916115cd565b806112e16112db6000611111565b91611111565b03611343575061130f611315916112f9868c9061111d565b5190611306888d90610a53565b518b91926117c6565b15610da8565b6113335761132d9161132791906110c3565b96611079565b9561125f565b5050505092505050600090600190565b9850505050505091505060009190565b50505092505050600190600090565b5092505050600090600790565b5050509050600090600590565b945050505060009190565b5190565b62ffffff191690565b90565b6113a36113a89161138b565b611394565b9052565b90565b6113bb6113c09161032f565b6113ac565b9052565b602093926113e4601d836113dc82956113ec97611397565b018092611397565b0180926113af565b0190565b906113fa82611387565b81101561140b576020809102010190565b610a39565b91909161141b610d9e565b50611424610da3565b5061142e83611387565b61144861144261143d84611075565b61024f565b9161024f565b03611536576114576000610a79565b5b8061147361146d61146887611387565b61024f565b9161024f565b101561152a5761150c611505611497600061148f86869061111d565b51015161192b565b6114f06114b260206114aa88889061111d565b51015161192b565b916114e16114cd60406114c68a8a9061111d565b5101610a1f565b6114d5610033565b948593602085016113c4565b602082018103825203826100a8565b85906114fd8886906113f0565b5190916119c1565b5015610da8565b61151e5761151990611079565b611458565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b90611558611553836100f0565b6100d1565b918252565b606090565b60005b82811061157157505050565b60209061157c61155d565b8184015201611565565b906115ab61159383611546565b926020806115a186936100f0565b9201910390611562565b565b906115b7826110e8565b8110156115c8576020809102010190565b610a39565b9291926115d8611541565b506115e1610da3565b50816115f56115ef8661024f565b9161024f565b116116c3578161161561160f61160a846110e8565b61024f565b9161024f565b1180156116a1575b6116975761163461162f85849061109e565b611586565b92825b8061164a6116448861024f565b9161024f565b101561168c57611687906116806116628583906115ad565b518761166f84899061109e565b9161167a83836115ad565b526115ad565b5150611079565b611637565b509350505090600090565b9192505090600a90565b50836116bd6116b76116b2846110e8565b61024f565b9161024f565b1161161d565b9192505090600990565b906116df6116da83610276565b6100d1565b918252565b6116ee60606100d1565b90565b6116fb60406100d1565b90565b600090565b600090565b6117106116f1565b906020808361171d6116fe565b815201611728611703565b81525050565b611736611708565b90565b600090565b6117466116e4565b90602080808461175461172e565b81520161175f61172e565b81520161176a611739565b81525050565b61177861173e565b90565b60005b82811061178a57505050565b602090611795611770565b818401520161177e565b906117c46117ac836116cd565b926020806117ba8693610276565b920191039061177b565b565b929190936117d2610d9e565b506117e46117df846110e8565b61179f565b946117ef6000610a79565b5b8061180b611805611800886110e8565b61024f565b9161024f565b101561184d576118489061184161182e866118278985906115ad565b5190611c5c565b89839161183b838361111d565b5261111d565b5150611079565b6117f0565b50925093905061185f92919091611d75565b90565b600090565b6118719051610293565b90565b61187e90516102c0565b90565b90565b61189061189591610293565b611881565b9052565b90565b6118a86118ad916102c0565b611899565b9052565b6001816118c46118cc93601c9695611884565b01809261189c565b0190565b60200190565b6118e0905161138b565b90565b1b90565b6119016118fc6118f683610bc2565b926118d0565b6118d6565b90601d811061190f575b5090565b6119249062ffffff1990601d036008026118e3565b163861190b565b61197f90611937611862565b5061197a611953602061194c60008501611867565b9301611874565b9161196b61195f610033565b938492602084016118b1565b602082018103825203826100a8565b6118e7565b90565b600090565b90565b61199e6119996119a392611987565b610a76565b61024f565b90565b600611156119b057565b6110ec565b906119bf826119a6565b565b90916119cb610d9e565b506119d4611982565b506119e160408401610a2c565b6119f46119ee600161198a565b9161024f565b1115600014611b4b57611a0a6000840151610eb0565b611a1d611a176000610a79565b9161024f565b03611b40575b611a2f60208401610a2c565b611a4c611a46611a4160408701610a2c565b61024f565b9161024f565b1015611b3557611a5b906120c2565b91611a696000820151610eb0565b611a7c611a766000610a79565b9161024f565b14611aea579182611a936020611aac949501610a2c565b916000611aa260408401610a2c565b9192015192612151565b80611ac0611aba60006119b5565b916119b5565b03611ae05750611ad3611ad9919261032f565b9161032f565b1490600090565b9291505060009190565b6040611af69101610a2c565b611b09611b03600161198a565b9161024f565b14600014611b2b57611b1e611b24919261032f565b9161032f565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611b586000840151610eb0565b611b8a611b84611b7f611b6d60208801610a2c565b611b7960408901610a2c565b90611f97565b61024f565b9161024f565b0315611a2357505050600090600190565b611ba361173e565b90565b60f81b90565b611bc0611bbb611bc592610a73565b611ba6565b610293565b90565b611bd26000611bac565b90565b905090565b611bff611bf692602092611bed81610bc2565b94858093611bd5565b93849101610bcf565b0190565b91611c22600184611c1a611c299796601d96611884565b018092611397565b0190611bda565b90565b60001b90565b611c3b91611bda565b90565b611c4860606100d1565b90565b52565b90611c589061032f565b9052565b906000611cb8602092611c6d611b9b565b50611ca7611c79611bc8565b611c99611c858861192b565b93611c8e610033565b948593898501611c03565b8682018103825203826100a8565b611caf610033565b91829182611c32565b039060025afa15611cff57611cfc611cd1600051611c2c565b611cf383611cea611ce0611c3e565b9560008701611c4b565b60208501611c4b565b60408301611c4e565b90565b610c4c565b611d0d9061024f565b6000198114611d1c5760010190565b611088565b90565b611d38611d33611d3d92611d21565b610a76565b61024f565b90565b611d4f611d559193929361024f565b9261024f565b91611d6183820261024f565b928184041490151715611d7057565b611088565b611d7d610d9e565b50611d886000610a79565b93611d9e611d996040850151611075565b61179f565b91611da96000610a79565b955b80611dc9611dc3611dbe60008901610a2c565b61024f565b9161024f565b141580611f18575b15611e2d57611e2181611df3611e2793611ded60008a01610a2c565b9061236f565b611e19611e0560408a01518c9061111d565b51888c91611e13838361111d565b5261111d565b5150906110c3565b96611d04565b95611dab565b5093909450611ea49150611e5e611e4e611e4960208601610a2c565b612445565b611e586002611d24565b90611d40565b80611e72611e6c600161198a565b9161024f565b10611f08575b839160009190600090611e9e611e98611e92600096610a79565b93610a79565b94610a79565b946124d2565b505093905b84611ec8611ec2611ebd6040870151611075565b61024f565b9161024f565b1015611ef757611eeb611ef191611ee46040860151889061111d565b5190612755565b94611079565b93611ea9565b909350611f059291506128c3565b90565b50611f13600161198a565b611e78565b5086611f38611f32611f2d6040890151611075565b61024f565b9161024f565b10611dd1565b600090565b90565b611f5a611f55611f5f92611f43565b610a76565b61024f565b90565b611f6d610100611f46565b90565b611f8f90611f89611f83611f949461024f565b9161024f565b906118e3565b61024f565b90565b611f9f611f3e565b5081611fb4611fae600161198a565b9161024f565b111561209857611fd4611fc5611f62565b611fce8461293e565b9061109e565b91611ffc6001611ff7611ff186611feb600161198a565b9061109e565b9161198a565b611f70565b908261202361201d61201885612012600161198a565b9061109e565b61024f565b9161024f565b11156000146120325750505090565b908092935061204a612044600161198a565b9161024f565b146000146120625750505061205f600161198a565b90565b61207c61208292612076600195829061109e565b9261109e565b90611f97565b90612090612095929161198a565b6110c3565b90565b50506120a46000610a79565b90565b806120b86001926120bf9594611884565b0190611bda565b90565b60006121136020926120d2610935565b506121026120de611bc8565b6120f46120e9610033565b9384928884016120a7565b8682018103825203826100a8565b61210a610033565b91829182611c32565b039060025afa1561212c57612129600051611c2c565b90565b610c4c565b9061213b82610eb0565b81101561214c576020809102010190565b610a39565b93929361215c610935565b50612165611982565b508161217a6121746000610a79565b9161024f565b14612364578161219361218d600161198a565b9161024f565b14612333576121a185610eb0565b6121b46121ae6000610a79565b9161024f565b14612328576121c282612445565b6121f4866000906121ee6121e86121d88b610eb0565b6121e2600161198a565b9061109e565b92610a79565b90612af6565b916121fd611982565b508061221161220b8461024f565b9161024f565b106122a4576122419392916122336122399261222b610935565b50829061109e565b9361109e565b849192612151565b90918161225761225160006119b5565b916119b5565b0361229c57505061229161228c84612286612276612296969792610eb0565b612280600161198a565b9061109e565b90612131565b610a1f565b612c4b565b90600090565b915092509190565b6122c493506000969496929192506122ba610935565b5091869192612151565b9093816122da6122d460006119b5565b916119b5565b0361232057505061231461230f61231a9394926123096122f982610eb0565b612303600161198a565b9061109e565b90612131565b610a1f565b90612c4b565b90600090565b915092509190565b505090915090600590565b5050909161234090610eb0565b61235361234d6000610a79565b9161024f565b0361235e5790600090565b90600490565b505090915090600390565b6123966123916123a692612381611f3e565b5061238b81612cbd565b9461109e565b612d44565b6123a0600161198a565b9061109e565b816123b96123b38361024f565b9161024f565b116123d557506123d2906123cd600161198a565b611f70565b90565b6123e991506123e4600161198a565b611f70565b90565b156123f357565b600080fd5b60ff1690565b61241261240d61241792611987565b610a76565b6123f8565b90565b1c90565b61243d90612437612431612442946123f8565b9161024f565b9061241a565b61024f565b90565b61244d611f3e565b5061246c8161246561245f600161198a565b9161024f565b10156123ec565b61249c61247882612d44565b61249761249160019261248b600161198a565b9061109e565b9161198a565b611f70565b906124b06124aa839261024f565b9161024f565b146124b9575b90565b6124cd906124c760016123fe565b9061241e565b6124b6565b919092939594956124e1611b9b565b506124ea611f3e565b506124f3611f3e565b506124fc610d9e565b5061250885839061109e565b61251b612515600161198a565b9161024f565b14612627578461253e61253861253360008701610a2c565b61024f565b9161024f565b11158015612601575b6125df5761257b9061256261255d87859061109e565b612445565b978491868590612573878d906110c3565b9293946124d2565b9161259e97939161259595935094919990949596926110c3565b919293946124d2565b949190929092946125b86125b26001610da8565b91610da8565b146125d2576125c691612755565b90929160009193929190565b5090929160009193929190565b93916125f79596935060409150015192909192612ddd565b9193909293929190565b508161262061261a61261560208701610a2c565b61024f565b9161024f565b1015612547565b93919061263a6000839895979801610a2c565b61264c6126468361024f565b9161024f565b11159081612699575b506126765761266c94506040015192909192612ddd565b9193909293929190565b5050908261268861268f949391611075565b9192612d99565b9193909293929190565b90506126b86126b26126ad60208501610a2c565b61024f565b9161024f565b1038612655565b6126c7611708565b90565b6126de6126d96126e392611987565b611ba6565b610293565b90565b6126f060016126ca565b90565b946127416020601d9661273988839c9b98612731826127499a6127296127519f80612721600192869f611884565b018092611397565b018092611397565b0180926113af565b018092611397565b018092611397565b0180926113af565b0190565b9061275e611b9b565b5060206000612832612777828601518386015190612e20565b936127806126bf565b5061279683870151612790612eb2565b90612ef8565b8314612880576128216127a7612eb2565b965b6128136127b46126e6565b916127c18782015161192b565b946127da60406127d38b85015161192b565b9301610a1f565b6127e68983015161192b565b906127ff60406127f88d86015161192b565b9401610a1f565b93612808610033565b9889978d89016126f3565b8682018103825203826100a8565b612829610033565b91829182611c32565b039060025afa1561287b576128789061286f61284f600051611c2c565b919361286661285c611c3e565b9560008701611c4b565b60208501611c4b565b60408301611c4e565b90565b610c4c565b6128958382015161288f612eb2565b90612ef8565b83146128a95761282184870151965b6127a9565b6128216128bd858801518684015190612f28565b966128a4565b906128cc610d9e565b506128e06000830151600083015190612ef8565b80612925575b91826128f2575b505090565b61291d919250612912604061290b816129179401610a1f565b9401610a1f565b61032f565b9161032f565b1438806128ed565b506129396020830151602083015190612ef8565b6128e6565b612946611f3e565b506129516000610a79565b5b6129666001612961839161198a565b611f70565b6129786129728461024f565b9161024f565b1015612997576129929061298c600161198a565b906110c3565b612952565b6129a991506129a4611f62565b61109e565b90565b606090565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612a0c602a60409261096c565b612a15816129b1565b0190565b612a2f90602081019060008183039101526129ff565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612a8d602f60409261096c565b612a9681612a32565b0190565b612ab09060208101906000818303910152612a80565b90565b90612ac5612ac083610540565b6100d1565b918252565b369037565b90612af4612adc83612ab3565b92602080612aea8693610540565b9201910390612aca565b565b929092612b016129ac565b5083612b15612b0f8561024f565b9161024f565b11612bfd5783612b35612b2f612b2a84610eb0565b61024f565b9161024f565b118015612bdb575b612bb957612b54612b4f84869061109e565b612acf565b91845b80612b6a612b648761024f565b9161024f565b1015612bb057612bab90612ba6612b8a612b85868490612131565b610a1f565b612ba18791612b9a858c9061109e565b9092612131565b611c4e565b611079565b612b57565b50935050905090565b612bc1610033565b62461bcd60e51b815280612bd760048201612a9a565b0390fd5b5082612bf7612bf1612bec84610eb0565b61024f565b9161024f565b11612b3d565b612c05610033565b62461bcd60e51b815280612c1b60048201612a19565b0390fd5b60209392612c3f600183612c378895612c4797611884565b0180926113af565b0180926113af565b0190565b612c9f602092612c8e600093612c5f610935565b50612c80612c6b6126e6565b9193612c75610033565b948593898501612c1f565b8682018103825203826100a8565b612c96610033565b91829182611c32565b039060025afa15612cb857612cb5600051611c2c565b90565b610c4c565b612cc5611f3e565b50612cd0600161198a565b91612cdb6000610a79565b5b82612cf0612cea6000610a79565b9161024f565b141580612d27575b15612d2057612d09612d1a91611d04565b92612d1460016123fe565b9061241e565b91612cdc565b9150915090565b50838316612d3e612d386000610a79565b9161024f565b14612cf8565b612d4c611f3e565b50612d576000610a79565b5b81612d6c612d666000610a79565b9161024f565b14612d9457612d7d612d8e91611d04565b91612d8860016123fe565b9061241e565b90612d58565b905090565b91612dcd92949394612da9611b9b565b50612db2611f3e565b50612dbb611f3e565b50612dc4610d9e565b50919091612f4d565b9391929093929193929193929190565b91612e1192949394612ded611b9b565b50612df6611f3e565b50612dff611f3e565b50612e08610d9e565b50919091612f4d565b91929091929193929193929190565b90612e296126bf565b50612e35828290613017565b600014612e40575090565b905090565b612e4f60406100d1565b90565b90565b612e69612e64612e6e92612e52565b611ba6565b610293565b90565b90612e7b90610293565b9052565b90565b60201b90565b612e9c612e97612ea192612e7f565b612e82565b6102c0565b90565b90612eae906102c0565b9052565b612eba6126bf565b5060ff612ef5612eec60018060e01b03612ee7612ede612ed8612e45565b95612e55565b60008601612e71565b612e88565b60208301612ea4565b90565b612f1e612f19612f13612f2493612f0d610d9e565b5061192b565b9361192b565b61138b565b9161138b565b1490565b90612f316126bf565b50612f3d828290613047565b600014612f48575090565b905090565b9091612f57611b9b565b50612f60611f3e565b50612f69610d9e565b50612f7382611075565b612f86612f806000610a79565b9161024f565b148015612ff4575b908115612fd7575b50612fc457612fa9612fbb91839061111d565b5191612fb5600161198a565b906110c3565b91600091929190565b50612fcd611b9b565b9091600191929190565b9050612fec612fe6849261024f565b9161024f565b101538612f96565b508261301061300a61300585611075565b61024f565b9161024f565b1015612f8e565b61303d6130386130326130439361302c610d9e565b5061192b565b9361192b565b61138b565b9161138b565b1090565b61306d6130686130626130739361305c610d9e565b5061192b565b9361192b565b61138b565b9161138b565b119056fea26469706673582212201ae3d0193439c0eccd6519edb9e8e35c8a110f6ee8f1a8c3467145a0ed311c7264736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_blobstreamX": "BlobstreamX contract where Celestia commitments are being stored",
          "_inputBox": "InputBox contract to send inputs to Cartesi DApps"
        }
      },
      "relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32)": {
        "details": "Called by clients to securely relay Celestia data to Cartesi DApps",
        "params": {
          "_dapp": "The address of the DApp",
          "_proof": "SharesProof object showing that a range of shares is committed to Celestia",
          "_root": "The Celestia \"data root\" for the block that contains the shares."
        },
        "returns": {
          "_0": "The hash of the input as returned by the Cartesi DApp's input box"
        }
      }
    },
    "title": "CelestiaRelay",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes32)": {
        "notice": "Relay the specified Celestia shares as an input to a DApp's input box"
      }
    },
    "notice": "Relays Celestia blocks as inputs to Cartesi DApps",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2744,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "inputBox",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IInputBox)49"
      },
      {
        "astId": 2747,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "blobstreamX",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDAOracle)87"
      }
    ],
    "types": {
      "t_contract(IDAOracle)87": {
        "encoding": "inplace",
        "label": "contract IDAOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IInputBox)49": {
        "encoding": "inplace",
        "label": "contract IInputBox",
        "numberOfBytes": "20"
      }
    }
  }
}