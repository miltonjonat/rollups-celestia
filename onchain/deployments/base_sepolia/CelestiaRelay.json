{
  "address": "0xAc4D5eeB63CCEA4195f34c8d6766594F99c9E00E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IInputBox",
          "name": "_inputBox",
          "type": "address"
        },
        {
          "internalType": "contract IDAOracle",
          "name": "_blobstreamX",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dapp",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "beginKey",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endKey",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "min",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "bytes1",
                          "name": "version",
                          "type": "bytes1"
                        },
                        {
                          "internalType": "bytes28",
                          "name": "id",
                          "type": "bytes28"
                        }
                      ],
                      "internalType": "struct Namespace",
                      "name": "max",
                      "type": "tuple"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "digest",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct NamespaceNode[]",
                  "name": "sideNodes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct NamespaceMerkleMultiproof[]",
              "name": "shareProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes1",
                  "name": "version",
                  "type": "bytes1"
                },
                {
                  "internalType": "bytes28",
                  "name": "id",
                  "type": "bytes28"
                }
              ],
              "internalType": "struct Namespace",
              "name": "namespace",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "min",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes1",
                      "name": "version",
                      "type": "bytes1"
                    },
                    {
                      "internalType": "bytes28",
                      "name": "id",
                      "type": "bytes28"
                    }
                  ],
                  "internalType": "struct Namespace",
                  "name": "max",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "digest",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct NamespaceNode[]",
              "name": "rowRoots",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "sideNodes",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256",
                  "name": "key",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "numLeaves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BinaryMerkleProof[]",
              "name": "rowProofs",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tupleRootNonce",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "height",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "dataRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct DataRootTuple",
                  "name": "tuple",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes32[]",
                      "name": "sideNodes",
                      "type": "bytes32[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "key",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "numLeaves",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct BinaryMerkleProof",
                  "name": "proof",
                  "type": "tuple"
                }
              ],
              "internalType": "struct AttestationProof",
              "name": "attestationProof",
              "type": "tuple"
            }
          ],
          "internalType": "struct SharesProof",
          "name": "_proof",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_execLayerData",
          "type": "bytes"
        }
      ],
      "name": "relayShares",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49968ee9bb56c6f6d611f9b396d8315bf850c66f98d9c4600593e2b222d5fb35",
  "receipt": {
    "to": "0x914d7Fec6aaC8cd542e72Bca78B30650d45643d7",
    "from": "0x18930e8a66a1DbE21D00581216789AAB7460Afd0",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "2848309",
    "logsBloom": "0x
    "blockHash": "0x5aaea137234f22ba325fa7cdcb6193daacc6accd5a58c2a93169614e6de4d258",
    "transactionHash": "0x49968ee9bb56c6f6d611f9b396d8315bf850c66f98d9c4600593e2b222d5fb35",
    "logs": [],
    "blockNumber": 11787554,
    "cumulativeGasUsed": "3726545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58Df21fE097d4bE5dCf61e01d9ea3f6B81c2E1dB",
    "0xc3e209eb245Fd59c8586777b499d6A665DF3ABD2"
  ],
  "numDeployments": 4,
  "solcInputHash": "a3ef51a5e145496b009c5dd07d3276ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IInputBox\",\"name\":\"_inputBox\",\"type\":\"address\"},{\"internalType\":\"contract IDAOracle\",\"name\":\"_blobstreamX\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginKey\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endKey\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"sideNodes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct NamespaceMerkleMultiproof[]\",\"name\":\"shareProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"namespace\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"min\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"version\",\"type\":\"bytes1\"},{\"internalType\":\"bytes28\",\"name\":\"id\",\"type\":\"bytes28\"}],\"internalType\":\"struct Namespace\",\"name\":\"max\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct NamespaceNode[]\",\"name\":\"rowRoots\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof[]\",\"name\":\"rowProofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tupleRootNonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataRootTuple\",\"name\":\"tuple\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"sideNodes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numLeaves\",\"type\":\"uint256\"}],\"internalType\":\"struct BinaryMerkleProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationProof\",\"name\":\"attestationProof\",\"type\":\"tuple\"}],\"internalType\":\"struct SharesProof\",\"name\":\"_proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_execLayerData\",\"type\":\"bytes\"}],\"name\":\"relayShares\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_blobstreamX\":\"BlobstreamX contract where Celestia commitments are being stored\",\"_inputBox\":\"InputBox contract to send inputs to Cartesi DApps\"}},\"relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)\":{\"details\":\"Called by clients to securely process Celestia data in Cartesi DApps\",\"params\":{\"_dapp\":\"The address of the DApp\",\"_execLayerData\":\"Additional data to be interpreted by the execution layer\",\"_proof\":\"SharesProof object showing that a range of shares is committed to Celestia\"},\"returns\":{\"_0\":\"The hash of the input as returned by the Cartesi DApp's input box\"}}},\"title\":\"CelestiaRelay\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)\":{\"notice\":\"Relay a pointer to the specified Celestia shares as an input to a DApp's input box\"}},\"notice\":\"Relays Celestia blocks as inputs to Cartesi DApps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CelestiaRelay.sol\":\"CelestiaRelay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@cartesi/rollups/contracts/inputs/IInputBox.sol\":{\"content\":\"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @notice Provides data availability of inputs for applications.\\n/// @notice Each application has its own append-only list of inputs.\\n/// @notice Off-chain, inputs can be retrieved via events.\\n/// @notice On-chain, only the input hashes are stored.\\n/// @notice See `LibInput` for more details on how such hashes are computed.\\ninterface IInputBox {\\n    /// @notice MUST trigger when an input is added.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @param input The input blob\\n    event InputAdded(\\n        address indexed appContract,\\n        uint256 indexed index,\\n        bytes input\\n    );\\n\\n    /// @notice Input is too large.\\n    /// @param appContract The application contract address\\n    /// @param inputLength The input length\\n    /// @param maxInputLength The maximum input length\\n    error InputTooLarge(\\n        address appContract,\\n        uint256 inputLength,\\n        uint256 maxInputLength\\n    );\\n\\n    /// @notice Send an input to an application.\\n    /// @param appContract The application contract address\\n    /// @param payload The input payload\\n    /// @return The hash of the input blob\\n    /// @dev MUST fire an `InputAdded` event.\\n    function addInput(\\n        address appContract,\\n        bytes calldata payload\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs sent to an application.\\n    /// @param appContract The application contract address\\n    function getNumberOfInputs(\\n        address appContract\\n    ) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in an application's input box.\\n    /// @param appContract The application contract address\\n    /// @param index The input index\\n    /// @dev The provided index must be valid.\\n    function getInputHash(\\n        address appContract,\\n        uint256 index\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xae7730cd7ab2b31a86d7c4933215853ea6c0b1b4dc60d4ec24e5cfc2ec005fe3\",\"license\":\"Apache-2.0 (see LICENSE)\"},\"blobstream-contracts/src/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @dev bytes32 encoding of the string \\\"checkpoint\\\"\\nbytes32 constant VALIDATOR_SET_HASH_DOMAIN_SEPARATOR =\\n    0x636865636b706f696e7400000000000000000000000000000000000000000000;\\n\\n/// @dev bytes32 encoding of the string \\\"transactionBatch\\\"\\nbytes32 constant DATA_ROOT_TUPLE_ROOT_DOMAIN_SEPARATOR =\\n    0x7472616e73616374696f6e426174636800000000000000000000000000000000;\\n\",\"keccak256\":\"0x0236491c1b01a038105ecfb270a39db52d7591f2200dbc1af079c4d8ed689f82\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/DataRootTuple.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A tuple of data root with metadata. Each data root is associated\\n///  with a Celestia block height.\\n/// @dev `availableDataRoot` in\\n///  https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#header\\nstruct DataRootTuple {\\n    // Celestia block height the data root was included in.\\n    // Genesis block is height = 0.\\n    // First queryable block is height = 1.\\n    uint256 height;\\n    // Data root.\\n    bytes32 dataRoot;\\n}\\n\",\"keccak256\":\"0x0526597d14a6d7f258ec48e434a9b60c9a8781764a8f23c878d49926daeb5d1c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/IDAOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport \\\"./DataRootTuple.sol\\\";\\nimport \\\"./lib/tree/binary/BinaryMerkleProof.sol\\\";\\n\\n/// @notice Data Availability Oracle interface.\\ninterface IDAOracle {\\n    /// @notice Verify a Data Availability attestation.\\n    /// @param _tupleRootNonce Nonce of the tuple root to prove against.\\n    /// @param _tuple Data root tuple to prove inclusion of.\\n    /// @param _proof Binary Merkle tree proof that `tuple` is in the root at `_tupleRootNonce`.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    function verifyAttestation(uint256 _tupleRootNonce, DataRootTuple memory _tuple, BinaryMerkleProof memory _proof)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xc35648b17d3587bc3a627f67a328874db536ee24c11b970c3c57226d69a32eec\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Types.sol\\\";\\n\\nlibrary Constants {\\n    ///////////////\\n    // Constants //\\n    ///////////////\\n\\n    /// @dev Maximum tree height\\n    uint256 internal constant MAX_HEIGHT = 256;\\n\\n    /// @dev The prefixes of leaves and nodes\\n    bytes1 internal constant LEAF_PREFIX = 0x00;\\n    bytes1 internal constant NODE_PREFIX = 0x01;\\n}\\n\\n/// @dev Parity share namespace.\\n/// utility function to provide the parity share namespace as a Namespace struct.\\nfunction PARITY_SHARE_NAMESPACE() pure returns (Namespace memory) {\\n    return Namespace(0xFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n}\\n\",\"keccak256\":\"0x2050b2be8a739ce250cc5cea1556936c7937915b5d7fde269dd70e8e7eb660c4\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice A representation of the Celestia-app namespace ID and its version.\\n/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html\\nstruct Namespace {\\n    // The namespace version.\\n    bytes1 version;\\n    // The namespace ID.\\n    bytes28 id;\\n}\\n\\nusing {equalTo, lessThan, greaterThan, toBytes} for Namespace global;\\n\\nfunction equalTo(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() == r.toBytes();\\n}\\n\\nfunction lessThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() < r.toBytes();\\n}\\n\\nfunction greaterThan(Namespace memory l, Namespace memory r) pure returns (bool) {\\n    return l.toBytes() > r.toBytes();\\n}\\n\\nfunction toBytes(Namespace memory n) pure returns (bytes29) {\\n    return bytes29(abi.encodePacked(n.version, n.id));\\n}\\n\\nfunction toNamespace(bytes29 n) pure returns (Namespace memory) {\\n    bytes memory id = new bytes(28);\\n    for (uint256 i = 1; i < 29; i++) {\\n        id[i - 1] = n[i];\\n    }\\n    return Namespace(n[0], bytes28(id));\\n}\\n\",\"keccak256\":\"0xa47e9e20fef88264acdf1fc6bc0b3bb9f23c7022f5de8d203a1014895a606958\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./Constants.sol\\\";\\n\\n/// @notice Calculate the starting bit of the path to a leaf\\n/// @param numLeaves : The total number of leaves in the tree\\n/// @return startingBit : The starting bit of the path\\n// solhint-disable-next-line func-visibility\\nfunction getStartingBit(uint256 numLeaves) pure returns (uint256 startingBit) {\\n    // Determine height of the left subtree. This is the maximum path length, so all paths start at this offset from the right-most bit\\n    startingBit = 0;\\n    while ((1 << startingBit) < numLeaves) {\\n        startingBit += 1;\\n    }\\n    return Constants.MAX_HEIGHT - startingBit;\\n}\\n\\n/// @notice Calculate the length of the path to a leaf\\n/// @param key: The key of the leaf\\n/// @param numLeaves: The total number of leaves in the tree\\n/// @return pathLength : The length of the path to the leaf\\n// solhint-disable-next-line func-visibility\\nfunction pathLengthFromKey(uint256 key, uint256 numLeaves) pure returns (uint256 pathLength) {\\n    if (numLeaves <= 1) {\\n        // if the number of leaves of the tree is 1 or 0, the path always is 0.\\n        return 0;\\n    }\\n    // Get the height of the left subtree. This is equal to the offset of the starting bit of the path\\n    pathLength = Constants.MAX_HEIGHT - getStartingBit(numLeaves);\\n\\n    // Determine the number of leaves in the left subtree\\n    uint256 numLeavesLeftSubTree = (1 << (pathLength - 1));\\n\\n    // If leaf is in left subtree, path length is full height of left subtree\\n    if (key <= numLeavesLeftSubTree - 1) {\\n        return pathLength;\\n    }\\n    // If left sub tree has only one leaf but key is not there, path has one additional step\\n    else if (numLeavesLeftSubTree == 1) {\\n        return 1;\\n    }\\n    // Otherwise, add 1 to height and recurse into right subtree\\n    else {\\n        return 1 + pathLengthFromKey(key - numLeavesLeftSubTree, numLeaves - numLeavesLeftSubTree);\\n    }\\n}\\n\\n/// @notice Returns the minimum number of bits required to represent `x`; the\\n/// result is 0 for `x` == 0.\\n/// @param x Number.\\nfunction _bitsLen(uint256 x) pure returns (uint256) {\\n    uint256 count = 0;\\n\\n    while (x != 0) {\\n        count++;\\n        x >>= 1;\\n    }\\n\\n    return count;\\n}\\n\\n/// @notice Returns the largest power of 2 less than `x`.\\n/// @param x Number.\\nfunction _getSplitPoint(uint256 x) pure returns (uint256) {\\n    // Note: since `x` is always an unsigned int * 2, the only way for this\\n    // to be violated is if the input == 0. Since the input is the end\\n    // index exclusive, an input of 0 is guaranteed to be invalid (it would\\n    // be a proof of inclusion of nothing, which is vacuous).\\n    require(x >= 1);\\n\\n    uint256 bitLen = _bitsLen(x);\\n    uint256 k = 1 << (bitLen - 1);\\n    if (k == x) {\\n        k >>= 1;\\n    }\\n    return k;\\n}\\n\",\"keccak256\":\"0x9760cb3ab3d4f412949b9be1bbdf5d9e7954cad44a94a4f7fe90fcffb86fe7fa\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\n/// @notice Merkle Tree Proof structure.\\nstruct BinaryMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    bytes32[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x9fb953284b455b544091f058fdb11ac73928093517333909c0744d9319410688\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/BinaryMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\nimport \\\"./BinaryMerkleProof.sol\\\";\\n\\n/// @title Binary Merkle Tree.\\nlibrary BinaryMerkleTree {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The provided side nodes count is invalid for the proof.\\n        InvalidNumberOfSideNodes,\\n        /// @notice The provided proof key is not part of the tree.\\n        KeyNotInTree,\\n        /// @notice Invalid number of leaves in proof.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The proof contains unexpected side nodes.\\n        UnexpectedInnerHashes,\\n        /// @notice The proof verification expected at least one inner hash.\\n        ExpectedAtLeastOneInnerHash\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which verify the given leaf.\\n    /// @param proof Binary Merkle proof for the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` is proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(bytes32 root, BinaryMerkleProof memory proof, bytes memory data)\\n        internal\\n        pure\\n        returns (bool, ErrorCodes)\\n    {\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n            }\\n        } else if (proof.sideNodes.length != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return (false, ErrorCodes.InvalidNumberOfSideNodes);\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return (false, ErrorCodes.KeyNotInTree);\\n        }\\n\\n        // A sibling at height 1 is created by getting the hash of the data to prove.\\n        bytes32 digest = leafDigest(data);\\n\\n        // Null proof is only valid if numLeaves = 1\\n        // If so, just verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return (root == digest, ErrorCodes.NoError);\\n            } else {\\n                return (false, ErrorCodes.NoError);\\n            }\\n        }\\n\\n        (bytes32 computedHash, ErrorCodes error) = computeRootHash(proof.key, proof.numLeaves, digest, proof.sideNodes);\\n\\n        if (error != ErrorCodes.NoError) {\\n            return (false, error);\\n        }\\n\\n        return (computedHash == root, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Use the leafHash and innerHashes to get the root merkle hash.\\n    /// If the length of the innerHashes slice isn't exactly correct, the result is nil.\\n    /// Recursive impl.\\n    function computeRootHash(uint256 key, uint256 numLeaves, bytes32 leafHash, bytes32[] memory sideNodes)\\n        private\\n        pure\\n        returns (bytes32, ErrorCodes)\\n    {\\n        if (numLeaves == 0) {\\n            return (leafHash, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        if (numLeaves == 1) {\\n            if (sideNodes.length != 0) {\\n                return (leafHash, ErrorCodes.UnexpectedInnerHashes);\\n            }\\n            return (leafHash, ErrorCodes.NoError);\\n        }\\n        if (sideNodes.length == 0) {\\n            return (leafHash, ErrorCodes.ExpectedAtLeastOneInnerHash);\\n        }\\n        uint256 numLeft = _getSplitPoint(numLeaves);\\n        bytes32[] memory sideNodesLeft = slice(sideNodes, 0, sideNodes.length - 1);\\n        ErrorCodes error;\\n        if (key < numLeft) {\\n            bytes32 leftHash;\\n            (leftHash, error) = computeRootHash(key, numLeft, leafHash, sideNodesLeft);\\n            if (error != ErrorCodes.NoError) {\\n                return (leafHash, error);\\n            }\\n            return (nodeDigest(leftHash, sideNodes[sideNodes.length - 1]), ErrorCodes.NoError);\\n        }\\n        bytes32 rightHash;\\n        (rightHash, error) = computeRootHash(key - numLeft, numLeaves - numLeft, leafHash, sideNodesLeft);\\n        if (error != ErrorCodes.NoError) {\\n            return (leafHash, error);\\n        }\\n        return (nodeDigest(sideNodes[sideNodes.length - 1], rightHash), ErrorCodes.NoError);\\n    }\\n\\n    /// @notice creates a slice of bytes32 from the data slice of bytes32 containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes32[] memory _data, uint256 _begin, uint256 _end) internal pure returns (bytes32[] memory) {\\n        if (_begin > _end) {\\n            revert(\\\"Invalid range: _begin is greater than _end\\\");\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            revert(\\\"Invalid range: _begin or _end are out of bounds\\\");\\n        }\\n        bytes32[] memory out = new bytes32[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return out;\\n    }\\n}\\n\",\"keccak256\":\"0x90dc9ac613014c2d3fcebbd23f2b5af67188b7de80b2ef853f20c91a14ce68fd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/binary/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\n\\n/// @notice Calculate the digest of a node.\\n/// @param left The left child.\\n/// @param right The right child.\\n/// @return digest The node digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(bytes32 left, bytes32 right) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.NODE_PREFIX, left, right));\\n}\\n\\n/// @notice Calculate the digest of a leaf.\\n/// @param data The data of the leaf.\\n/// @return digest The leaf digest.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#binary-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(bytes memory data) pure returns (bytes32 digest) {\\n    digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, data));\\n}\\n\",\"keccak256\":\"0x2f16501eac14f6e2a61de29d3aa10e3aaf8e0a594fc9cf8dc2d955bb2f6d54e0\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleMultiproof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Multiproof structure. Proves multiple leaves.\\nstruct NamespaceMerkleMultiproof {\\n    // The beginning key of the leaves to verify.\\n    uint256 beginKey;\\n    // The ending key of the leaves to verify.\\n    uint256 endKey;\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n}\\n\",\"keccak256\":\"0x6ae0f3e8413808e06b570202a27a08e3f1236add1b00b5cb4b4ac17049e1960c\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Namespace Merkle Tree Proof structure.\\nstruct NamespaceMerkleProof {\\n    // List of side nodes to verify and calculate tree.\\n    NamespaceNode[] sideNodes;\\n    // The key of the leaf to verify.\\n    uint256 key;\\n    // The number of leaves in the tree\\n    uint256 numLeaves;\\n}\\n\",\"keccak256\":\"0x52eef9f87e34c11d6f8eda6f4a508b420c0193430c4035f49088069b6217ab40\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./NamespaceMerkleProof.sol\\\";\\nimport \\\"./NamespaceMerkleMultiproof.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\nimport \\\"./TreeHasher.sol\\\";\\n\\n/// @title Namespace Merkle Tree.\\nlibrary NamespaceMerkleTree {\\n    /// @notice Verify if element exists in Merkle tree, given data, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// @param namespace Namespace of the leaf.\\n    /// @param data The data of the leaf to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verify(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        Namespace memory namespace,\\n        bytes memory data\\n    ) internal pure returns (bool) {\\n        // A sibling at height 1 is created by getting the leafDigest of the original data.\\n        NamespaceNode memory node = leafDigest(namespace, data);\\n\\n        // Since we're verifying a leaf, height parameter is 1.\\n        return verifyInner(root, proof, node, 1);\\n    }\\n\\n    /// @notice Verify if inner node exists in Merkle tree, given node, proof, and root.\\n    /// @param root The root of the tree in which the given leaf is verified.\\n    /// @param proof Namespace Merkle proof for the leaf.\\n    /// proof.key is any key in the subtree rooted at the inner node.\\n    /// @param node The inner node to verify.\\n    /// @param startingHeight Starting height of the proof.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @dev proof.numLeaves is necessary to determine height of subtree containing the data to prove.\\n    function verifyInner(\\n        NamespaceNode memory root,\\n        NamespaceMerkleProof memory proof,\\n        NamespaceNode memory node,\\n        uint256 startingHeight\\n    ) internal pure returns (bool) {\\n        // Check starting height is at least 1\\n        if (startingHeight < 1) {\\n            return false;\\n        }\\n        uint256 heightOffset = startingHeight - 1;\\n\\n        // Check proof is correct length for the key it is proving\\n        if (proof.numLeaves <= 1) {\\n            if (proof.sideNodes.length != 0) {\\n                return false;\\n            }\\n        } else if (proof.sideNodes.length + heightOffset != pathLengthFromKey(proof.key, proof.numLeaves)) {\\n            return false;\\n        }\\n\\n        // Check key is in tree\\n        if (proof.key >= proof.numLeaves) {\\n            return false;\\n        }\\n        // Handle case where proof is empty: i.e, only one leaf exists, so verify hash(data) is root\\n        if (proof.sideNodes.length == 0) {\\n            if (proof.numLeaves == 1) {\\n                return namespaceNodeEquals(root, node);\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        // The case where inner node is actually the root of a tree with more than one node is not relevant\\n        // to our use case, since the only case where an inner node is the root of the tree is when the tree\\n        // has only one inner node. So, there is no need to handle that case.\\n\\n        uint256 height = startingHeight;\\n        uint256 stableEnd = proof.key;\\n\\n        // While the current subtree (of height 'height') is complete, determine\\n        // the position of the next sibling using the complete subtree algorithm.\\n        // 'stableEnd' tells us the ending index of the last full subtree. It gets\\n        // initialized to 'key' because the first full subtree was the\\n        // subtree of height 1, created above (and had an ending index of\\n        // 'key').\\n\\n        while (true) {\\n            // Determine if the subtree is complete. This is accomplished by\\n            // rounding down the key to the nearest 1 << 'height', adding 1\\n            // << 'height', and comparing the result to the number of leaves in the\\n            // Merkle tree.\\n\\n            uint256 subTreeStartIndex = (proof.key / (1 << height)) * (1 << height);\\n            uint256 subTreeEndIndex = subTreeStartIndex + (1 << height) - 1;\\n\\n            // If the Merkle tree does not have a leaf at index\\n            // 'subTreeEndIndex', then the subtree of the current height is not\\n            // a complete subtree.\\n            if (subTreeEndIndex >= proof.numLeaves) {\\n                break;\\n            }\\n            stableEnd = subTreeEndIndex;\\n\\n            // Determine if the key is in the first or the second half of\\n            // the subtree.\\n            if (proof.sideNodes.length + heightOffset <= height - 1) {\\n                return false;\\n            }\\n            if (proof.key - subTreeStartIndex < (1 << (height - 1))) {\\n                node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            } else {\\n                node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            }\\n\\n            height += 1;\\n        }\\n\\n        // Determine if the next hash belongs to an orphan that was elevated. This\\n        // is the case IFF 'stableEnd' (the last index of the largest full subtree)\\n        // is equal to the number of leaves in the Merkle tree.\\n        if (stableEnd != proof.numLeaves - 1) {\\n            if (proof.sideNodes.length <= height - heightOffset - 1) {\\n                return false;\\n            }\\n            node = nodeDigest(node, proof.sideNodes[height - heightOffset - 1]);\\n            height += 1;\\n        }\\n        // All remaining elements in the proof set will belong to a left sibling.\\n        while (height - heightOffset - 1 < proof.sideNodes.length) {\\n            node = nodeDigest(proof.sideNodes[height - heightOffset - 1], node);\\n            height += 1;\\n        }\\n\\n        return namespaceNodeEquals(root, node);\\n    }\\n\\n    /// @notice Verify if contiguous elements exists in Merkle tree, given leaves, mutliproof, and root.\\n    /// @param root The root of the tree in which the given leaves are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param namespace Namespace of the leaves. All leaves must have the same namespace.\\n    /// @param data The leaves to verify. Note: leaf data must be the _entire_ share (including namespace prefixing).\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMulti(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        Namespace memory namespace,\\n        bytes[] memory data\\n    ) internal pure returns (bool) {\\n        // Hash all the leaves to get leaf nodes.\\n        NamespaceNode[] memory nodes = new NamespaceNode[](data.length);\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            nodes[i] = leafDigest(namespace, data[i]);\\n        }\\n\\n        // Verify inclusion of leaf nodes.\\n        return verifyMultiHashes(root, proof, nodes);\\n    }\\n\\n    /// @notice Verify if contiguous leaf hashes exists in Merkle tree, given leaf nodes, multiproof, and root.\\n    /// @param root The root of the tree in which the given leaf nodes are verified.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes The leaf nodes to verify.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    function verifyMultiHashes(\\n        NamespaceNode memory root,\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes\\n    ) internal pure returns (bool) {\\n        uint256 leafIndex = 0;\\n        NamespaceNode[] memory leftSubtrees = new NamespaceNode[](proof.sideNodes.length);\\n\\n        for (uint256 i = 0; leafIndex != proof.beginKey && i < proof.sideNodes.length; ++i) {\\n            uint256 subtreeSize = _nextSubtreeSize(leafIndex, proof.beginKey);\\n            leftSubtrees[i] = proof.sideNodes[i];\\n            leafIndex += subtreeSize;\\n        }\\n\\n        // estimate the leaf size of the subtree containing the proof range\\n        uint256 proofRangeSubtreeEstimate = _getSplitPoint(proof.endKey) * 2;\\n        if (proofRangeSubtreeEstimate < 1) {\\n            proofRangeSubtreeEstimate = 1;\\n        }\\n\\n        (NamespaceNode memory rootHash, uint256 proofHead,,) =\\n            _computeRoot(proof, leafNodes, 0, proofRangeSubtreeEstimate, 0, 0);\\n        for (uint256 i = proofHead; i < proof.sideNodes.length; ++i) {\\n            rootHash = nodeDigest(rootHash, proof.sideNodes[i]);\\n        }\\n\\n        return namespaceNodeEquals(rootHash, root);\\n    }\\n\\n    /// @notice Returns the size of the subtree adjacent to `begin` that does\\n    /// not overlap `end`.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    function _nextSubtreeSize(uint256 begin, uint256 end) private pure returns (uint256) {\\n        uint256 ideal = _bitsTrailingZeroes(begin);\\n        uint256 max = _bitsLen(end - begin) - 1;\\n        if (ideal > max) {\\n            return 1 << max;\\n        }\\n        return 1 << ideal;\\n    }\\n\\n    /// @notice Returns the number of trailing zero bits in `x`; the result is\\n    /// 256 for `x` == 0.\\n    /// @param x Number.\\n    function _bitsTrailingZeroes(uint256 x) private pure returns (uint256) {\\n        uint256 mask = 1;\\n        uint256 count = 0;\\n\\n        while (x != 0 && mask & x == 0) {\\n            count++;\\n            x >>= 1;\\n        }\\n\\n        return count;\\n    }\\n\\n    /// @notice Computes the NMT root recursively.\\n    /// @param proof Namespace Merkle multiproof for the leaves.\\n    /// @param leafNodes Leaf nodes for which inclusion is proven.\\n    /// @param begin Begin index, inclusive.\\n    /// @param end End index, exclusive.\\n    /// @param headProof Internal detail: head of proof sidenodes array. Used for recursion. Set to `0` on first call.\\n    /// @param headLeaves Internal detail: head of leaves array. Used for recursion. Set to `0` on first call.\\n    /// @return _ Subtree root.\\n    /// @return _ New proof sidenodes array head. Used for recursion.\\n    /// @return _ New leaves array head. Used for recursion.\\n    /// @return _ If the subtree root is \\\"nil.\\\"\\n    function _computeRoot(\\n        NamespaceMerkleMultiproof memory proof,\\n        NamespaceNode[] memory leafNodes,\\n        uint256 begin,\\n        uint256 end,\\n        uint256 headProof,\\n        uint256 headLeaves\\n    ) private pure returns (NamespaceNode memory, uint256, uint256, bool) {\\n        // reached a leaf\\n        if (end - begin == 1) {\\n            // if current range overlaps with proof range, pop and return a leaf\\n            if (proof.beginKey <= begin && begin < proof.endKey) {\\n                // Note: second return value is guaranteed to be `false` by\\n                // construction.\\n                return _popLeavesIfNonEmpty(leafNodes, headLeaves, leafNodes.length, headProof);\\n            }\\n\\n            // if current range does not overlap with proof range,\\n            // pop and return a proof node (leaf) if present,\\n            // else return nil because leaf doesn't exist\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // if current range does not overlap with proof range,\\n        // pop and return a proof node if present,\\n        // else return nil because subtree doesn't exist\\n        if (end <= proof.beginKey || begin >= proof.endKey) {\\n            return _popProofIfNonEmpty(proof.sideNodes, headProof, end, headLeaves);\\n        }\\n\\n        // Recursively get left and right subtree\\n        uint256 k = _getSplitPoint(end - begin);\\n        (NamespaceNode memory left, uint256 newHeadProofLeft, uint256 newHeadLeavesLeft,) =\\n            _computeRoot(proof, leafNodes, begin, begin + k, headProof, headLeaves);\\n        (NamespaceNode memory right, uint256 newHeadProof, uint256 newHeadLeaves, bool rightIsNil) =\\n            _computeRoot(proof, leafNodes, begin + k, end, newHeadProofLeft, newHeadLeavesLeft);\\n\\n        // only right leaf/subtree can be non-existent\\n        if (rightIsNil == true) {\\n            return (left, newHeadProof, newHeadLeaves, false);\\n        }\\n        NamespaceNode memory hash = nodeDigest(left, right);\\n        return (hash, newHeadProof, newHeadLeaves, false);\\n    }\\n\\n    /// @notice Pop from the leaf nodes array slice if it's not empty.\\n    /// @param nodes Entire leaf nodes array.\\n    /// @param headLeaves Head of leaf nodes array slice.\\n    /// @param end End of leaf nodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ New head of leaf nodes array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popLeavesIfNonEmpty(NamespaceNode[] memory nodes, uint256 headLeaves, uint256 end, uint256 headProof)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headLeaves, end);\\n        return (node, headProof, newHead, isNil);\\n    }\\n\\n    /// @notice Pop from the proof sidenodes array slice if it's not empty.\\n    /// @param nodes Entire proof sidenodes array.\\n    /// @param headLeaves Head of proof sidenodes array slice.\\n    /// @param end End of proof sidenodes array slice.\\n    /// @param headProof Used only to return for recursion.\\n    /// @return _ Popped node.\\n    /// @return _ New head of proof sidenodes array slice.\\n    /// @return _ Head of proof sidenodes array slice (unchanged).\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popProofIfNonEmpty(NamespaceNode[] memory nodes, uint256 headProof, uint256 end, uint256 headLeaves)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, uint256, bool)\\n    {\\n        (NamespaceNode memory node, uint256 newHead, bool isNil) = _popIfNonEmpty(nodes, headProof, end);\\n        return (node, newHead, headLeaves, isNil);\\n    }\\n\\n    /// @notice Pop from an array slice if it's not empty.\\n    /// @param nodes Entire array.\\n    /// @param head Head of array slice.\\n    /// @param end End of array slice.\\n    /// @return _ Popped node.\\n    /// @return _ New head of array slice.\\n    /// @return _ If the popped node is \\\"nil.\\\"\\n    function _popIfNonEmpty(NamespaceNode[] memory nodes, uint256 head, uint256 end)\\n        private\\n        pure\\n        returns (NamespaceNode memory, uint256, bool)\\n    {\\n        if (nodes.length == 0 || head >= nodes.length || head >= end) {\\n            NamespaceNode memory node;\\n            return (node, head, true);\\n        }\\n        return (nodes[head], head + 1, false);\\n    }\\n}\\n\",\"keccak256\":\"0xe893ae809f062ad1b77e4e3382f6f34fd78d7dffb55853cfc47b0ffd2d56d590\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/NamespaceNode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Types.sol\\\";\\n\\n/// @notice Namespace Merkle Tree node.\\nstruct NamespaceNode {\\n    // Minimum namespace.\\n    Namespace min;\\n    // Maximum namespace.\\n    Namespace max;\\n    // Node value.\\n    bytes32 digest;\\n}\\n\\n/// @notice Compares two `NamespaceNode`s.\\n/// @param first First node.\\n/// @param second Second node.\\n/// @return `true` is equal, `false otherwise.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceNodeEquals(NamespaceNode memory first, NamespaceNode memory second) pure returns (bool) {\\n    return first.min.equalTo(second.min) && first.max.equalTo(second.max) && (first.digest == second.digest);\\n}\\n\",\"keccak256\":\"0xdffc1a51e6dbe88cbe1b89f947290b93070b4e4094fbb412d157c0862a2cee55\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/tree/namespace/TreeHasher.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"../Constants.sol\\\";\\nimport \\\"../Types.sol\\\";\\nimport \\\"./NamespaceNode.sol\\\";\\n\\n/// @notice Get the minimum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMin(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.lessThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Get the maximum namespace.\\n// solhint-disable-next-line func-visibility\\nfunction namespaceMax(Namespace memory l, Namespace memory r) pure returns (Namespace memory) {\\n    if (l.greaterThan(r)) {\\n        return l;\\n    } else {\\n        return r;\\n    }\\n}\\n\\n/// @notice Hash a leaf node.\\n/// @param namespace Namespace of the leaf.\\n/// @param data Raw data of the leaf.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction leafDigest(Namespace memory namespace, bytes memory data) pure returns (NamespaceNode memory) {\\n    bytes32 digest = sha256(abi.encodePacked(Constants.LEAF_PREFIX, namespace.toBytes(), data));\\n    NamespaceNode memory node = NamespaceNode(namespace, namespace, digest);\\n    return node;\\n}\\n\\n/// @notice Hash an internal node.\\n/// @param l Left child.\\n/// @param r Right child.\\n/// @dev More details in https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#namespace-merkle-tree\\n// solhint-disable-next-line func-visibility\\nfunction nodeDigest(NamespaceNode memory l, NamespaceNode memory r) pure returns (NamespaceNode memory) {\\n    Namespace memory min = namespaceMin(l.min, r.min);\\n    Namespace memory max;\\n    if (l.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = PARITY_SHARE_NAMESPACE();\\n    } else if (r.min.equalTo(PARITY_SHARE_NAMESPACE())) {\\n        max = l.max;\\n    } else {\\n        max = namespaceMax(l.max, r.max);\\n    }\\n\\n    bytes32 digest = sha256(\\n        abi.encodePacked(\\n            Constants.NODE_PREFIX,\\n            l.min.toBytes(),\\n            l.max.toBytes(),\\n            l.digest,\\n            r.min.toBytes(),\\n            r.max.toBytes(),\\n            r.digest\\n        )\\n    );\\n\\n    NamespaceNode memory node = NamespaceNode(min, max, digest);\\n    return node;\\n}\\n\",\"keccak256\":\"0x068b2ef59d4b63bbc495494e21bd95371af0e8bac3ae38b739d8cfe4df6722cd\",\"license\":\"Apache-2.0\"},\"blobstream-contracts/src/lib/verifier/DAVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.22;\\n\\nimport \\\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../../Constants.sol\\\";\\nimport \\\"../../DataRootTuple.sol\\\";\\nimport \\\"../../IDAOracle.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleProof.sol\\\";\\nimport \\\"../tree/binary/BinaryMerkleTree.sol\\\";\\nimport \\\"../tree/namespace/NamespaceMerkleTree.sol\\\";\\nimport \\\"../tree/Types.sol\\\";\\n\\n/// @notice Contains the necessary parameters to prove that some shares, which were posted to\\n/// the Celestia network, were committed to by the Blobstream smart contract.\\nstruct SharesProof {\\n    // The shares that were committed to.\\n    bytes[] data;\\n    // The shares proof to the row roots. If the shares span multiple rows, we will have multiple nmt proofs.\\n    NamespaceMerkleMultiproof[] shareProofs;\\n    // The namespace of the shares.\\n    Namespace namespace;\\n    // The rows where the shares belong. If the shares span multiple rows, we will have multiple rows.\\n    NamespaceNode[] rowRoots;\\n    // The proofs of the rowRoots to the data root.\\n    BinaryMerkleProof[] rowProofs;\\n    // The proof of the data root tuple to the data root tuple root that was posted to the Blobstream contract.\\n    AttestationProof attestationProof;\\n}\\n\\n/// @notice Contains the necessary parameters needed to verify that a data root tuple\\n/// was committed to, by the Blobstream smart contract, at some specif nonce.\\nstruct AttestationProof {\\n    // the attestation nonce that commits to the data root tuple.\\n    uint256 tupleRootNonce;\\n    // the data root tuple that was committed to.\\n    DataRootTuple tuple;\\n    // the binary merkle proof of the tuple to the commitment.\\n    BinaryMerkleProof proof;\\n}\\n\\n/// @title DAVerifier: Celestia -> EVM, Data Availability verifier.\\n/// @dev The DAVerifier verifies that some shares, which were posted on Celestia, were committed to\\n/// by the Blobstream smart contract.\\nlibrary DAVerifier {\\n    /////////////////\\n    // Error codes //\\n    /////////////////\\n\\n    enum ErrorCodes {\\n        NoError,\\n        /// @notice The shares to the rows proof is invalid.\\n        InvalidSharesToRowsProof,\\n        /// @notice The rows to the data root proof is invalid.\\n        InvalidRowsToDataRootProof,\\n        /// @notice The row to the data root proof is invalid.\\n        InvalidRowToDataRootProof,\\n        /// @notice The data root tuple to the data root tuple roof proof is invalid.\\n        InvalidDataRootTupleToDataRootTupleRootProof,\\n        /// @notice The number of share proofs isn't equal to the number of rows roots.\\n        UnequalShareProofsAndRowRootsNumber,\\n        /// @notice The number of rows proofs isn't equal to the number of rows roots.\\n        UnequalRowProofsAndRowRootsNumber,\\n        /// @notice The verifier data length isn't equal to the number of shares in the shares proofs.\\n        UnequalDataLengthAndNumberOfSharesProofs,\\n        /// @notice The number of leaves in the binary merkle proof is not divisible by 4.\\n        InvalidNumberOfLeavesInProof,\\n        /// @notice The provided range is invalid.\\n        InvalidRange,\\n        /// @notice The provided range is out of bounds.\\n        OutOfBoundsRange\\n    }\\n\\n    ///////////////\\n    // Functions //\\n    ///////////////\\n\\n    /// @notice Verifies that the shares, which were posted to Celestia, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _sharesProof The proof of the shares to the data root tuple root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRoot(IDAOracle _bridge, SharesProof memory _sharesProof, bytes32 _root)\\n        internal\\n        view\\n        returns (bool, ErrorCodes)\\n    {\\n        // checking that the data root was committed to by the Blobstream smart contract.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRoot(\\n            _bridge, _sharesProof.rowRoots, _sharesProof.rowProofs, _sharesProof.attestationProof, _root\\n        );\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifySharesToDataRootTupleRootProof(\\n            _sharesProof.data,\\n            _sharesProof.shareProofs,\\n            _sharesProof.namespace,\\n            _sharesProof.rowRoots,\\n            _sharesProof.rowProofs,\\n            _root\\n        );\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the shares to data root tuple root proof.\\n    /// @param _data The data that needs to proven.\\n    /// @param _shareProofs The share to the row roots proof.\\n    /// @param _namespace The namespace of the shares.\\n    /// @param _rowRoots The row roots where the shares belong.\\n    /// @param _rowProofs The proofs of the rowRoots to the data root.\\n    /// @param _root The data root of the block that contains the shares.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifySharesToDataRootTupleRootProof(\\n        bytes[] memory _data,\\n        NamespaceMerkleMultiproof[] memory _shareProofs,\\n        Namespace memory _namespace,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // verifying the row root to data root tuple root proof.\\n        (bool success, ErrorCodes errorCode) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n        if (!success) {\\n            return (false, errorCode);\\n        }\\n\\n        // checking that the shares were committed to by the rows roots.\\n        if (_shareProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalShareProofsAndRowRootsNumber);\\n        }\\n\\n        uint256 numberOfSharesInProofs = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            numberOfSharesInProofs += _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n        }\\n\\n        if (_data.length != numberOfSharesInProofs) {\\n            return (false, ErrorCodes.UnequalDataLengthAndNumberOfSharesProofs);\\n        }\\n\\n        uint256 cursor = 0;\\n        for (uint256 i = 0; i < _shareProofs.length; i++) {\\n            uint256 sharesUsed = _shareProofs[i].endKey - _shareProofs[i].beginKey;\\n            (bytes[] memory s, ErrorCodes err) = slice(_data, cursor, cursor + sharesUsed);\\n            if (err != ErrorCodes.NoError) {\\n                return (false, err);\\n            }\\n            if (!NamespaceMerkleTree.verifyMulti(_rowRoots[i], _shareProofs[i], _namespace, s)) {\\n                return (false, ErrorCodes.InvalidSharesToRowsProof);\\n            }\\n            cursor += sharesUsed;\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a row/column root, from a Celestia block, was committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        (bool valid, ErrorCodes error) = verifyRowRootToDataRootTupleRootProof(_rowRoot, _rowProof, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies that a row/column root proof, from a Celestia block, to the data root tuple root.\\n    /// @param _rowRoot The row/column root to be proven.\\n    /// @param _rowProof The proof of the row/column root to the data root.\\n    /// @param _root The data root of the block that contains the row.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyRowRootToDataRootTupleRootProof(\\n        NamespaceNode memory _rowRoot,\\n        BinaryMerkleProof memory _rowProof,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        bytes memory rowRoot = abi.encodePacked(_rowRoot.min.toBytes(), _rowRoot.max.toBytes(), _rowRoot.digest);\\n        (bool valid,) = BinaryMerkleTree.verify(_root, _rowProof, rowRoot);\\n        if (!valid) {\\n            return (false, ErrorCodes.InvalidRowToDataRootProof);\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice Verifies that a set of rows/columns, from a Celestia block, were committed to by the Blobstream smart contract.\\n    /// @param _bridge The Blobstream smart contract instance.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRoot(\\n        IDAOracle _bridge,\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        AttestationProof memory _attestationProof,\\n        bytes32 _root\\n    ) internal view returns (bool, ErrorCodes) {\\n        // checking that the data root was committed to by the Blobstream smart contract\\n        if (\\n            !_bridge.verifyAttestation(\\n                _attestationProof.tupleRootNonce, _attestationProof.tuple, _attestationProof.proof\\n            )\\n        ) {\\n            return (false, ErrorCodes.InvalidDataRootTupleToDataRootTupleRootProof);\\n        }\\n\\n        // checking that the rows roots commit to the data root.\\n        (bool valid, ErrorCodes error) = verifyMultiRowRootsToDataRootTupleRootProof(_rowRoots, _rowProofs, _root);\\n\\n        return (valid, error);\\n    }\\n\\n    /// @notice Verifies the proof a set of rows/columns, from a Celestia block, to their corresponding data root.\\n    /// @param _rowRoots The set of row/column roots to be proved.\\n    /// @param _rowProofs The set of proofs of the _rowRoots in the same order.\\n    /// @param _root The data root of the block that contains the rows.\\n    /// @return `true` if the proof is valid, `false` otherwise.\\n    /// @return an error code if the proof is invalid, ErrorCodes.NoError otherwise.\\n    function verifyMultiRowRootsToDataRootTupleRootProof(\\n        NamespaceNode[] memory _rowRoots,\\n        BinaryMerkleProof[] memory _rowProofs,\\n        bytes32 _root\\n    ) internal pure returns (bool, ErrorCodes) {\\n        // checking that the rows roots commit to the data root.\\n        if (_rowProofs.length != _rowRoots.length) {\\n            return (false, ErrorCodes.UnequalRowProofsAndRowRootsNumber);\\n        }\\n\\n        for (uint256 i = 0; i < _rowProofs.length; i++) {\\n            bytes memory rowRoot =\\n                abi.encodePacked(_rowRoots[i].min.toBytes(), _rowRoots[i].max.toBytes(), _rowRoots[i].digest);\\n            (bool valid,) = BinaryMerkleTree.verify(_root, _rowProofs[i], rowRoot);\\n            if (!valid) {\\n                return (false, ErrorCodes.InvalidRowsToDataRootProof);\\n            }\\n        }\\n\\n        return (true, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a row/column root to data root binary merkle proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and was successfully committed to using\\n    //  the `DAVerifier.verifyRowRootToDataRootTupleRoot()` method\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof to have number of leaves equal to 0.\\n    /// @param _proof The proof of the row/column root to the data root.\\n    /// @return The square size of the corresponding block.\\n    /// @return an error code if the _proof is invalid, Errors.NoError otherwise.\\n    function computeSquareSizeFromRowProof(BinaryMerkleProof memory _proof)\\n        internal\\n        pure\\n        returns (uint256, ErrorCodes)\\n    {\\n        if (_proof.numLeaves % 4 != 0) {\\n            return (0, ErrorCodes.InvalidNumberOfLeavesInProof);\\n        }\\n        // we divide the number of leaves of the proof by 4 because the rows/columns tree is constructed\\n        // from the extended block row roots and column roots.\\n        return (_proof.numLeaves / 4, ErrorCodes.NoError);\\n    }\\n\\n    /// @notice computes the Celestia block square size from a shares to row/column root proof.\\n    /// Note: the provided proof is not authenticated to the Blobstream smart contract. It is the user's responsibility\\n    /// to verify that the proof is valid and that the shares were successfully committed to using\\n    /// the `DAVerifier.verifySharesToDataRootTupleRoot()` method.\\n    /// Note: the minimum square size is 1. Thus, we don't expect the proof not to contain any side node.\\n    /// @param _proof The proof of the shares to the row/column root.\\n    /// @return The square size of the corresponding block.\\n    function computeSquareSizeFromShareProof(NamespaceMerkleMultiproof memory _proof) internal pure returns (uint256) {\\n        uint256 extendedSquareRowSize = 2 ** _proof.sideNodes.length;\\n        // we divide the extended square row size by 2 because the square size is the\\n        // the size of the row of the original square size.\\n        return extendedSquareRowSize / 2;\\n    }\\n\\n    /// @notice creates a slice of bytes from the data slice of bytes containing the elements\\n    /// that correspond to the provided range.\\n    /// It selects a half-open range which includes the begin element, but excludes the end one.\\n    /// @param _data The slice that we want to select data from.\\n    /// @param _begin The beginning of the range (inclusive).\\n    /// @param _end The ending of the range (exclusive).\\n    /// @return _ the sliced data.\\n    function slice(bytes[] memory _data, uint256 _begin, uint256 _end)\\n        internal\\n        pure\\n        returns (bytes[] memory, ErrorCodes)\\n    {\\n        if (_begin > _end) {\\n            return (_data, ErrorCodes.InvalidRange);\\n        }\\n        if (_begin > _data.length || _end > _data.length) {\\n            return (_data, ErrorCodes.OutOfBoundsRange);\\n        }\\n        bytes[] memory out = new bytes[](_end - _begin);\\n        for (uint256 i = _begin; i < _end; i++) {\\n            out[i - _begin] = _data[i];\\n        }\\n        return (out, ErrorCodes.NoError);\\n    }\\n}\\n\",\"keccak256\":\"0x7015893047e509bfe8637df5ce17e658998259aa709d0e653358f774a77e9e7b\",\"license\":\"Apache-2.0\"},\"contracts/CelestiaRelay.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {IInputBox} from \\\"@cartesi/rollups/contracts/inputs/IInputBox.sol\\\";\\nimport \\\"../blobstream-contracts/src/IDAOracle.sol\\\";\\nimport \\\"../blobstream-contracts/src/lib/verifier/DAVerifier.sol\\\";\\n\\n\\n/// @title CelestiaRelay\\n/// @notice Relays Celestia blocks as inputs to Cartesi DApps\\ncontract CelestiaRelay {\\n\\n    IInputBox internal inputBox;\\n    IDAOracle internal blobstreamX;\\n\\n    /// @notice Constructor\\n    /// @param _inputBox InputBox contract to send inputs to Cartesi DApps\\n    /// @param _blobstreamX BlobstreamX contract where Celestia commitments are being stored\\n    constructor(IInputBox _inputBox, IDAOracle _blobstreamX) {\\n        inputBox = _inputBox;\\n        blobstreamX = _blobstreamX;\\n    }\\n\\n    /// @notice Relay a pointer to the specified Celestia shares as an input to a DApp's input box\\n    /// @dev Called by clients to securely process Celestia data in Cartesi DApps\\n    /// @param _dapp The address of the DApp\\n    /// @param _proof SharesProof object showing that a range of shares is committed to Celestia\\n    /// @param _execLayerData Additional data to be interpreted by the execution layer\\n    /// @return The hash of the input as returned by the Cartesi DApp's input box\\n    function relayShares(\\n        address _dapp,\\n        SharesProof memory _proof,\\n        bytes calldata _execLayerData\\n    ) external returns (bytes32)\\n    {\\n        // retrieve \\\"dataRoot\\\" from proof (commitment for Celestia block that contains the shares)\\n        bytes32 dataRoot = _proof.attestationProof.tuple.dataRoot;\\n\\n        // verify if shares are committed to the Celestia Blobstream contract\\n        (bool verified, DAVerifier.ErrorCodes errorCode) =\\n            DAVerifier.verifySharesToDataRootTupleRoot(\\n                blobstreamX,\\n                _proof,\\n                dataRoot\\n            );\\n        require(verified, \\\"Shares not committed to Celestia BlobstreamX contract\\\");\\n\\n        // relay data specification as a Cartesi DApp input\\n        // input payload corresponds to the ABI encoding of the following fields:\\n        // - namespace: Celestia identifier for the DApp (29 bytes)\\n        // - dataRoot: commitment for the Celestia block that contains the relayed data (32 bytes)\\n        // - blockHeight: height of the Celestia block that contains the relayed data (32 bytes)\\n        // - start: index of the initial \\\"share\\\" (chunk) for the relayed data within the given Celestia block (32 bytes)\\n        // - end: index of the final \\\"share\\\" (chunk) for the relayed data within the given Celestia block (32 bytes)\\n        // - execLayerData: arbitrary additional data to be interpreted by the DApp code\\n        Namespace memory namespace = _proof.namespace;\\n        uint256 blockHeight = _proof.attestationProof.tuple.height;\\n        uint256 start = _proof.shareProofs[0].beginKey;\\n        uint256 end = _proof.shareProofs[_proof.shareProofs.length-1].endKey;\\n        return inputBox.addInput(_dapp, abi.encode(namespace, dataRoot, blockHeight, start, end, _execLayerData));\\n    }\\n}\\n\",\"keccak256\":\"0x22a5528378876ad30e5c8fc7750e3c16c805da60b9add566017a4f0aac7cac58\",\"license\":\"UNLICENSED\"},\"openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346100305761001a610014610146565b9061021e565b610022610035565b613177610237823961317790f35b61003b565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061006a90610040565b810190811060018060401b0382111761008257604052565b61004a565b9061009a610093610035565b9283610060565b565b600080fd5b60018060a01b031690565b6100b5906100a1565b90565b6100c1906100ac565b90565b6100cd816100b8565b036100d457565b600080fd5b905051906100e6826100c4565b565b6100f1906100ac565b90565b6100fd816100e8565b0361010457565b600080fd5b90505190610116826100f4565b565b9190604083820312610141578061013561013e92600086016100d9565b93602001610109565b90565b61009c565b6101646133ae8038038061015981610087565b928339810190610118565b9091565b60001b90565b9061017f60018060a01b0391610168565b9181191691161790565b90565b6101a061019b6101a5926100a1565b610189565b6100a1565b90565b6101b19061018c565b90565b6101bd906101a8565b90565b90565b906101d86101d36101df926101b4565b6101c0565b825461016e565b9055565b6101ec9061018c565b90565b6101f8906101e3565b90565b90565b9061021361020e61021a926101ef565b6101fb565b825461016e565b9055565b9061022d6102349260006101c3565b60016101fe565b56fe60806040526004361015610013575b61098e565b61001e60003561002d565b63989823890361000e57610955565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b600080fd5b67ffffffffffffffff811161013557610131602091610088565b0190565b610092565b90826000939282370152565b9092919261015b61015682610117565b6100d1565b93818552602085019082840111610177576101759261013a565b565b610112565b9080601f8301121561019a5781602061019793359101610146565b90565b6100eb565b9291906101b36101ae826100f0565b6100d1565b938185526020808601920281019183831161020a5781905b8382106101d9575050505050565b813567ffffffffffffffff8111610205576020916101fa878493870161017c565b8152019101906101cb565b6100eb565b61010d565b9080601f8301121561022d5781602061022a9335910161019f565b90565b6100eb565b67ffffffffffffffff811161024a5760208091020190565b610092565b90565b61025b8161024f565b0361026257565b600080fd5b9050359061027482610252565b565b67ffffffffffffffff811161028e5760208091020190565b610092565b60ff60f81b1690565b6102a581610293565b036102ac57565b600080fd5b905035906102be8261029c565b565b63ffffffff191690565b6102d3816102c0565b036102da57565b600080fd5b905035906102ec826102ca565b565b919060408382031261032a576103239061030860406100d1565b9361031682600083016102b1565b60008601526020016102df565b6020830152565b610083565b90565b61033b8161032f565b0361034257565b600080fd5b9050359061035482610332565b565b919060a0838203126103a45761039d9061037060606100d1565b9361037e82600083016102ee565b600086015261039082604083016102ee565b6020860152608001610347565b6040830152565b610083565b909291926103be6103b982610276565b6100d1565b9381855260a06020860192028301928184116103fd57915b8383106103e35750505050565b602060a0916103f28486610356565b8152019201916103d6565b61010d565b9080601f830112156104205781602061041d933591016103a9565b90565b6100eb565b91909160608184031261048b5761043c60606100d1565b9261044a8160008401610267565b600085015261045c8160208401610267565b6020850152604082013567ffffffffffffffff81116104865761047f9201610402565b6040830152565b6100e6565b610083565b9291906104a461049f82610232565b6100d1565b93818552602080860192028101918383116104fb5781905b8382106104ca575050505050565b813567ffffffffffffffff81116104f6576020916104eb8784938701610425565b8152019101906104bc565b6100eb565b61010d565b9080601f8301121561051e5781602061051b93359101610490565b90565b6100eb565b67ffffffffffffffff811161053b5760208091020190565b610092565b67ffffffffffffffff81116105585760208091020190565b610092565b9092919261057261056d82610540565b6100d1565b93818552602080860192028301928184116105af57915b8383106105965750505050565b602080916105a48486610347565b815201920191610589565b61010d565b9080601f830112156105d2578160206105cf9335910161055d565b90565b6100eb565b91909160608184031261063e576105ee60606100d1565b9260008201359167ffffffffffffffff831161063957610613826106329483016105b4565b60008601526106258260208301610267565b6020860152604001610267565b6040830152565b6100e6565b610083565b92919061065761065282610523565b6100d1565b93818552602080860192028101918383116106ae5781905b83821061067d575050505050565b813567ffffffffffffffff81116106a95760209161069e87849387016105d7565b81520191019061066f565b6100eb565b61010d565b9080601f830112156106d1578160206106ce93359101610643565b90565b6100eb565b91906040838203126107125761070b906106f060406100d1565b936106fe8260008301610267565b6000860152602001610347565b6020830152565b610083565b91909160808184031261077d5761072e60606100d1565b9261073c8160008401610267565b600085015261074e81602084016106d6565b6020850152606082013567ffffffffffffffff81116107785761077192016105d7565b6040830152565b6100e6565b610083565b91909160e08184031261087e5761079960c06100d1565b92600082013567ffffffffffffffff811161087957816107ba91840161020f565b6000850152602082013567ffffffffffffffff811161087457816107df918401610500565b60208501526107f181604084016102ee565b6040850152608082013567ffffffffffffffff811161086f5781610816918401610402565b606085015260a082013567ffffffffffffffff811161086a578161083b9184016106b3565b608085015260c082013567ffffffffffffffff81116108655761085e9201610717565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b600080fd5b909182601f830112156108c25781359167ffffffffffffffff83116108bd5760200192600183028401116108b857565b61010d565b610883565b6100eb565b9160608383031261092d576108df8260008501610074565b92602081013567ffffffffffffffff81116109285783610900918301610782565b92604082013567ffffffffffffffff81116109235761091f9201610888565b9091565b610043565b610043565b61003e565b61093b9061032f565b9052565b919061095390600060208501940190610932565b565b346109895761098561097461096b3660046108c7565b92919091610d5a565b61097c610033565b9182918261093f565b0390f35b610039565b600080fd5b600090565b6109a2905161032f565b90565b60001c90565b60018060a01b031690565b6109c26109c7916109a5565b6109ab565b90565b6109d490546109b6565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b610a3b60356040926109d7565b610a44816109e0565b0190565b610a5e9060208101906000818303910152610a2e565b90565b15610a6857565b610a70610033565b62461bcd60e51b815280610a8660048201610a48565b0390fd5b610a94905161024f565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b90610abb82610aad565b811015610acc576020809102010190565b610a97565b90565b90565b610aeb610ae6610af092610ad1565b610ad4565b61024f565b90565b90565b610b0a610b05610b0f92610af3565b610ad4565b61024f565b90565b634e487b7160e01b600052601160045260246000fd5b610b37610b3d9193929361024f565b9261024f565b8203918211610b4857565b610b12565b60018060a01b031690565b610b64610b69916109a5565b610b4d565b90565b610b769054610b58565b90565b610b8d610b88610b9292610048565b610ad4565b610048565b90565b610b9e90610b79565b90565b610baa90610b95565b90565b610bb690610293565b9052565b610bc3906102c0565b9052565b90602080610beb93610be160008201516000860190610bad565b0151910190610bba565b565b610bf69061024f565b9052565b60209181520190565b9190610c1d81610c1681610c2295610bfa565b809561013a565b610088565b0190565b92610c849795919694610c63610c6d92610c59610c7796610c4f60e08a019c60008b0190610bc7565b6040890190610932565b6060870190610bed565b6080850190610bed565b60a0830190610bed565b60c0818503910152610c03565b90565b60e01b90565b90505190610c9a82610332565b565b90602082820312610cb657610cb391600001610c8d565b90565b61003e565b610cc490610053565b9052565b5190565b60005b838110610ce0575050906000910152565b806020918301518185015201610ccf565b610d10610d19602093610d1e93610d0781610cc8565b93848093610bfa565b95869101610ccc565b610088565b0190565b91610d4692610d3960408201936000830190610cbb565b6020818403910152610cf1565b90565b610d51610033565b3d6000823e3d90fd5b91610e6d6000602094610d6b610993565b50610e56610d81878060a0890151015101610998565b610d9f610d99610d9160016109ca565b898491610ed1565b50610a61565b610e48604088015197610dba868b60a0840151015101610a8a565b9a610e148b610e0d610de38a610ddc84880151610dd683610ad7565b90610ab1565b5101610a8a565b94610e07610df78480840151930151610aad565b610e016001610af6565b90610b28565b90610ab1565b5101610a8a565b98610e26610e2189610b6c565b610ba1565b99631789cd63979b959d9390919293610e3d610033565b9e8f978f8901610c26565b8882018103825203886100a8565b610e78610e61610033565b97889687958694610c87565b845260048401610d22565b03925af1908115610ebd57600091610e8f575b5090565b610eb0915060203d8111610eb6575b610ea881836100a8565b810190610c9c565b38610e8b565b503d610e9e565b610d49565b600090565b600090565b151590565b91610f03610f0b9493610ee2610ec2565b50610eeb610ec7565b506060840151608085015160a08601519185936110c5565b949015610ecc565b610f3d57610f379293506000820151916020810151604082015190608060608401519301519394611226565b91909190565b505060009190565b610f4e90610b95565b90565b610f5a81610ecc565b03610f6157565b600080fd5b90505190610f7382610f51565b565b90602082820312610f8f57610f8c91600001610f66565b90565b61003e565b610f9d9061024f565b9052565b610faa9061032f565b9052565b90602080610fd293610fc860008201516000860190610f94565b0151910190610fa1565b565b5190565b60209181520190565b60200190565b90610ff481602093610fa1565b0190565b60200190565b9061101b61101561100e84610fd4565b8093610fd8565b92610fe1565b9060005b81811061102c5750505090565b90919261104561103f6001928651610fe7565b94610ff8565b910191909161101f565b9061108d906040806110706060840160008701518582036000870152610ffe565b9461108360208201516020860190610f94565b0151910190610f94565b90565b6110b56110c29492936110ab60808401956000850190610bed565b6020830190610fae565b606081840391015261104f565b90565b6110e760209195939492956110d8610ec2565b506110e1610ec7565b50610f45565b631f3302a99061111d6110fc60008601610a8a565b92611128604086880151970151611111610033565b97889687958695610c87565b855260048501611090565b03915afa80156111945761114591600091611166575b5015610ecc565b61115b57611155929190916114f9565b91909190565b505050600090600490565b611187915060203d811161118d575b61117f81836100a8565b810190610f75565b3861113e565b503d611175565b610d49565b5190565b60016111a9910161024f565b90565b6111bb6111c19193929361024f565b9261024f565b82018092116111cc57565b610b12565b5190565b634e487b7160e01b600052602160045260246000fd5b600b11156111f557565b6111d5565b90611204826111eb565b565b9061121082611199565b811015611221576020809102010190565b610a97565b9361124c90611254929796611239610ec2565b50611242610ec7565b50859190916114f9565b919015610ecc565b611465575061126285610aad565b61127c61127661127185611199565b61024f565b9161024f565b036114585761128b6000610ad7565b926112966000610ad7565b935b846112b36112ad6112a88a610aad565b61024f565b9161024f565b1015611309576112fd611303916112f76112da60206112d38c8b90610ab1565b5101610a8a565b6112f160006112ea8d8c90610ab1565b5101610a8a565b90610b28565b906111ac565b9461119d565b93611298565b909350949093919461132c611326611320866111d1565b9261024f565b9161024f565b0361144b5761133b6000610ad7565b946113466000610ad7565b955b8661136361135d61135886610aad565b61024f565b9161024f565b101561143c576113a0611383602061137c868b90610ab1565b5101610a8a565b61139a6000611393878c90610ab1565b5101610a8a565b90610b28565b6113b686836113b08585906111ac565b916116b6565b806113ca6113c460006111fa565b916111fa565b0361142c57506113f86113fe916113e2868c90611206565b51906113ef888d90610ab1565b518b91926118af565b15610ecc565b61141c576114169161141091906111ac565b9661119d565b95611348565b5050505092505050600090600190565b9850505050505091505060009190565b50505092505050600190600090565b5092505050600090600790565b5050509050600090600590565b945050505060009190565b5190565b62ffffff191690565b90565b61148c61149191611474565b61147d565b9052565b90565b6114a46114a99161032f565b611495565b9052565b602093926114cd601d836114c582956114d597611480565b018092611480565b018092611498565b0190565b906114e382611470565b8110156114f4576020809102010190565b610a97565b919091611504610ec2565b5061150d610ec7565b5061151783611470565b61153161152b61152684611199565b61024f565b9161024f565b0361161f576115406000610ad7565b5b8061155c61155661155187611470565b61024f565b9161024f565b1015611613576115f56115ee6115806000611578868690611206565b510151611a14565b6115d961159b6020611593888890611206565b510151611a14565b916115ca6115b660406115af8a8a90611206565b5101610998565b6115be610033565b948593602085016114ad565b602082018103825203826100a8565b85906115e68886906114d9565b519091611a8b565b5015610ecc565b611607576116029061119d565b611541565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b9061164161163c836100f0565b6100d1565b918252565b606090565b60005b82811061165a57505050565b602090611665611646565b818401520161164e565b9061169461167c8361162f565b9260208061168a86936100f0565b920191039061164b565b565b906116a0826111d1565b8110156116b1576020809102010190565b610a97565b9291926116c161162a565b506116ca610ec7565b50816116de6116d88661024f565b9161024f565b116117ac57816116fe6116f86116f3846111d1565b61024f565b9161024f565b11801561178a575b6117805761171d611718858490610b28565b61166f565b92825b8061173361172d8861024f565b9161024f565b1015611775576117709061176961174b858390611696565b5187611758848990610b28565b916117638383611696565b52611696565b515061119d565b611720565b509350505090600090565b9192505090600a90565b50836117a66117a061179b846111d1565b61024f565b9161024f565b11611706565b9192505090600990565b906117c86117c383610276565b6100d1565b918252565b6117d760606100d1565b90565b6117e460406100d1565b90565b600090565b600090565b6117f96117da565b90602080836118066117e7565b8152016118116117ec565b81525050565b61181f6117f1565b90565b600090565b61182f6117cd565b90602080808461183d611817565b815201611848611817565b815201611853611822565b81525050565b611861611827565b90565b60005b82811061187357505050565b60209061187e611859565b8184015201611867565b906118ad611895836117b6565b926020806118a38693610276565b9201910390611864565b565b929190936118bb610ec2565b506118cd6118c8846111d1565b611888565b946118d86000610ad7565b5b806118f46118ee6118e9886111d1565b61024f565b9161024f565b1015611936576119319061192a61191786611910898590611696565b5190611d26565b8983916119248383611206565b52611206565b515061119d565b6118d9565b50925093905061194892919091611e3f565b90565b600090565b61195a9051610293565b90565b61196790516102c0565b90565b90565b61197961197e91610293565b61196a565b9052565b90565b611991611996916102c0565b611982565b9052565b6001816119ad6119b593601c969561196d565b018092611985565b0190565b60200190565b6119c99051611474565b90565b1b90565b6119ea6119e56119df83610cc8565b926119b9565b6119bf565b90601d81106119f8575b5090565b611a0d9062ffffff1990601d036008026119cc565b16386119f4565b611a6890611a2061194b565b50611a63611a3c6020611a3560008501611950565b930161195d565b91611a54611a48610033565b9384926020840161199a565b602082018103825203826100a8565b6119d0565b90565b600090565b60061115611a7a57565b6111d5565b90611a8982611a70565b565b9091611a95610ec2565b50611a9e611a6b565b50611aab60408401610a8a565b611abe611ab86001610af6565b9161024f565b1115600014611c1557611ad46000840151610fd4565b611ae7611ae16000610ad7565b9161024f565b03611c0a575b611af960208401610a8a565b611b16611b10611b0b60408701610a8a565b61024f565b9161024f565b1015611bff57611b259061218c565b91611b336000820151610fd4565b611b46611b406000610ad7565b9161024f565b14611bb4579182611b5d6020611b76949501610a8a565b916000611b6c60408401610a8a565b919201519261221b565b80611b8a611b846000611a7f565b91611a7f565b03611baa5750611b9d611ba3919261032f565b9161032f565b1490600090565b9291505060009190565b6040611bc09101610a8a565b611bd3611bcd6001610af6565b9161024f565b14600014611bf557611be8611bee919261032f565b9161032f565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611c226000840151610fd4565b611c54611c4e611c49611c3760208801610a8a565b611c4360408901610a8a565b90612061565b61024f565b9161024f565b0315611aed57505050600090600190565b611c6d611827565b90565b60f81b90565b611c8a611c85611c8f92610ad1565b611c70565b610293565b90565b611c9c6000611c76565b90565b905090565b611cc9611cc092602092611cb781610cc8565b94858093611c9f565b93849101610ccc565b0190565b91611cec600184611ce4611cf39796601d9661196d565b018092611480565b0190611ca4565b90565b60001b90565b611d0591611ca4565b90565b611d1260606100d1565b90565b52565b90611d229061032f565b9052565b906000611d82602092611d37611c65565b50611d71611d43611c92565b611d63611d4f88611a14565b93611d58610033565b948593898501611ccd565b8682018103825203826100a8565b611d79610033565b91829182611cfc565b039060025afa15611dc957611dc6611d9b600051611cf6565b611dbd83611db4611daa611d08565b9560008701611d15565b60208501611d15565b60408301611d18565b90565b610d49565b611dd79061024f565b6000198114611de65760010190565b610b12565b90565b611e02611dfd611e0792611deb565b610ad4565b61024f565b90565b611e19611e1f9193929361024f565b9261024f565b91611e2b83820261024f565b928184041490151715611e3a57565b610b12565b611e47610ec2565b50611e526000610ad7565b93611e68611e636040850151611199565b611888565b91611e736000610ad7565b955b80611e93611e8d611e8860008901610a8a565b61024f565b9161024f565b141580611fe2575b15611ef757611eeb81611ebd611ef193611eb760008a01610a8a565b90612439565b611ee3611ecf60408a01518c90611206565b51888c91611edd8383611206565b52611206565b5150906111ac565b96611dce565b95611e75565b5093909450611f6e9150611f28611f18611f1360208601610a8a565b61250f565b611f226002611dee565b90611e0a565b80611f3c611f366001610af6565b9161024f565b10611fd2575b839160009190600090611f68611f62611f5c600096610ad7565b93610ad7565b94610ad7565b9461259c565b505093905b84611f92611f8c611f876040870151611199565b61024f565b9161024f565b1015611fc157611fb5611fbb91611fae60408601518890611206565b519061281f565b9461119d565b93611f73565b909350611fcf92915061298d565b90565b50611fdd6001610af6565b611f42565b5086612002611ffc611ff76040890151611199565b61024f565b9161024f565b10611e9b565b600090565b90565b61202461201f6120299261200d565b610ad4565b61024f565b90565b612037610100612010565b90565b6120599061205361204d61205e9461024f565b9161024f565b906119cc565b61024f565b90565b612069612008565b508161207e6120786001610af6565b9161024f565b11156121625761209e61208f61202c565b61209884612a08565b90610b28565b916120c660016120c16120bb866120b56001610af6565b90610b28565b91610af6565b61203a565b90826120ed6120e76120e2856120dc6001610af6565b90610b28565b61024f565b9161024f565b11156000146120fc5750505090565b908092935061211461210e6001610af6565b9161024f565b1460001461212c575050506121296001610af6565b90565b61214661214c926121406001958290610b28565b92610b28565b90612061565b9061215a61215f9291610af6565b6111ac565b90565b505061216e6000610ad7565b90565b80612182600192612189959461196d565b0190611ca4565b90565b60006121dd60209261219c610993565b506121cc6121a8611c92565b6121be6121b3610033565b938492888401612171565b8682018103825203826100a8565b6121d4610033565b91829182611cfc565b039060025afa156121f6576121f3600051611cf6565b90565b610d49565b9061220582610fd4565b811015612216576020809102010190565b610a97565b939293612226610993565b5061222f611a6b565b508161224461223e6000610ad7565b9161024f565b1461242e578161225d6122576001610af6565b9161024f565b146123fd5761226b85610fd4565b61227e6122786000610ad7565b9161024f565b146123f25761228c8261250f565b6122be866000906122b86122b26122a28b610fd4565b6122ac6001610af6565b90610b28565b92610ad7565b90612bc0565b916122c7611a6b565b50806122db6122d58461024f565b9161024f565b1061236e5761230b9392916122fd612303926122f5610993565b508290610b28565b93610b28565b84919261221b565b90918161232161231b6000611a7f565b91611a7f565b0361236657505061235b61235684612350612340612360969792610fd4565b61234a6001610af6565b90610b28565b906121fb565b610998565b612d15565b90600090565b915092509190565b61238e9350600096949692919250612384610993565b509186919261221b565b9093816123a461239e6000611a7f565b91611a7f565b036123ea5750506123de6123d96123e49394926123d36123c382610fd4565b6123cd6001610af6565b90610b28565b906121fb565b610998565b90612d15565b90600090565b915092509190565b505090915090600590565b5050909161240a90610fd4565b61241d6124176000610ad7565b9161024f565b036124285790600090565b90600490565b505090915090600390565b61246061245b6124709261244b612008565b5061245581612d87565b94610b28565b612e0e565b61246a6001610af6565b90610b28565b8161248361247d8361024f565b9161024f565b1161249f575061249c906124976001610af6565b61203a565b90565b6124b391506124ae6001610af6565b61203a565b90565b156124bd57565b600080fd5b60ff1690565b6124dc6124d76124e192610af3565b610ad4565b6124c2565b90565b1c90565b612507906125016124fb61250c946124c2565b9161024f565b906124e4565b61024f565b90565b612517612008565b506125368161252f6125296001610af6565b9161024f565b10156124b6565b61256661254282612e0e565b61256161255b6001926125556001610af6565b90610b28565b91610af6565b61203a565b9061257a612574839261024f565b9161024f565b14612583575b90565b6125979061259160016124c8565b906124e8565b612580565b919092939594956125ab611c65565b506125b4612008565b506125bd612008565b506125c6610ec2565b506125d2858390610b28565b6125e56125df6001610af6565b9161024f565b146126f157846126086126026125fd60008701610a8a565b61024f565b9161024f565b111580156126cb575b6126a9576126459061262c612627878590610b28565b61250f565b97849186859061263d878d906111ac565b92939461259c565b9161266897939161265f95935094919990949596926111ac565b9192939461259c565b9491909290929461268261267c6001610ecc565b91610ecc565b1461269c576126909161281f565b90929160009193929190565b5090929160009193929190565b93916126c19596935060409150015192909192612ea7565b9193909293929190565b50816126ea6126e46126df60208701610a8a565b61024f565b9161024f565b1015612611565b9391906127046000839895979801610a8a565b6127166127108361024f565b9161024f565b11159081612763575b506127405761273694506040015192909192612ea7565b9193909293929190565b50509082612752612759949391611199565b9192612e63565b9193909293929190565b905061278261277c61277760208501610a8a565b61024f565b9161024f565b103861271f565b6127916117f1565b90565b6127a86127a36127ad92610af3565b611c70565b610293565b90565b6127ba6001612794565b90565b9461280b6020601d9661280388839c9b986127fb826128139a6127f361281b9f806127eb600192869f61196d565b018092611480565b018092611480565b018092611498565b018092611480565b018092611480565b018092611498565b0190565b90612828611c65565b50602060006128fc612841828601518386015190612eea565b9361284a612789565b506128608387015161285a612f7c565b90612fc2565b831461294a576128eb612871612f7c565b965b6128dd61287e6127b0565b9161288b87820151611a14565b946128a4604061289d8b850151611a14565b9301610998565b6128b089830151611a14565b906128c960406128c28d860151611a14565b9401610998565b936128d2610033565b9889978d89016127bd565b8682018103825203826100a8565b6128f3610033565b91829182611cfc565b039060025afa156129455761294290612939612919600051611cf6565b9193612930612926611d08565b9560008701611d15565b60208501611d15565b60408301611d18565b90565b610d49565b61295f83820151612959612f7c565b90612fc2565b8314612973576128eb84870151965b612873565b6128eb612987858801518684015190612ff2565b9661296e565b90612996610ec2565b506129aa6000830151600083015190612fc2565b806129ef575b91826129bc575b505090565b6129e79192506129dc60406129d5816129e19401610998565b9401610998565b61032f565b9161032f565b1438806129b7565b50612a036020830151602083015190612fc2565b6129b0565b612a10612008565b50612a1b6000610ad7565b5b612a306001612a2b8391610af6565b61203a565b612a42612a3c8461024f565b9161024f565b1015612a6157612a5c90612a566001610af6565b906111ac565b612a1c565b612a739150612a6e61202c565b610b28565b90565b606090565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612ad6602a6040926109d7565b612adf81612a7b565b0190565b612af99060208101906000818303910152612ac9565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612b57602f6040926109d7565b612b6081612afc565b0190565b612b7a9060208101906000818303910152612b4a565b90565b90612b8f612b8a83610540565b6100d1565b918252565b369037565b90612bbe612ba683612b7d565b92602080612bb48693610540565b9201910390612b94565b565b929092612bcb612a76565b5083612bdf612bd98561024f565b9161024f565b11612cc75783612bff612bf9612bf484610fd4565b61024f565b9161024f565b118015612ca5575b612c8357612c1e612c19848690610b28565b612b99565b91845b80612c34612c2e8761024f565b9161024f565b1015612c7a57612c7590612c70612c54612c4f8684906121fb565b610998565b612c6b8791612c64858c90610b28565b90926121fb565b611d18565b61119d565b612c21565b50935050905090565b612c8b610033565b62461bcd60e51b815280612ca160048201612b64565b0390fd5b5082612cc1612cbb612cb684610fd4565b61024f565b9161024f565b11612c07565b612ccf610033565b62461bcd60e51b815280612ce560048201612ae3565b0390fd5b60209392612d09600183612d018895612d119761196d565b018092611498565b018092611498565b0190565b612d69602092612d58600093612d29610993565b50612d4a612d356127b0565b9193612d3f610033565b948593898501612ce9565b8682018103825203826100a8565b612d60610033565b91829182611cfc565b039060025afa15612d8257612d7f600051611cf6565b90565b610d49565b612d8f612008565b50612d9a6001610af6565b91612da56000610ad7565b5b82612dba612db46000610ad7565b9161024f565b141580612df1575b15612dea57612dd3612de491611dce565b92612dde60016124c8565b906124e8565b91612da6565b9150915090565b50838316612e08612e026000610ad7565b9161024f565b14612dc2565b612e16612008565b50612e216000610ad7565b5b81612e36612e306000610ad7565b9161024f565b14612e5e57612e47612e5891611dce565b91612e5260016124c8565b906124e8565b90612e22565b905090565b91612e9792949394612e73611c65565b50612e7c612008565b50612e85612008565b50612e8e610ec2565b50919091613017565b9391929093929193929193929190565b91612edb92949394612eb7611c65565b50612ec0612008565b50612ec9612008565b50612ed2610ec2565b50919091613017565b91929091929193929193929190565b90612ef3612789565b50612eff8282906130e1565b600014612f0a575090565b905090565b612f1960406100d1565b90565b90565b612f33612f2e612f3892612f1c565b611c70565b610293565b90565b90612f4590610293565b9052565b90565b60201b90565b612f66612f61612f6b92612f49565b612f4c565b6102c0565b90565b90612f78906102c0565b9052565b612f84612789565b5060ff612fbf612fb660018060e01b03612fb1612fa8612fa2612f0f565b95612f1f565b60008601612f3b565b612f52565b60208301612f6e565b90565b612fe8612fe3612fdd612fee93612fd7610ec2565b50611a14565b93611a14565b611474565b91611474565b1490565b90612ffb612789565b50613007828290613111565b600014613012575090565b905090565b9091613021611c65565b5061302a612008565b50613033610ec2565b5061303d82611199565b61305061304a6000610ad7565b9161024f565b1480156130be575b9081156130a1575b5061308e57613073613085918390611206565b519161307f6001610af6565b906111ac565b91600091929190565b50613097611c65565b9091600191929190565b90506130b66130b0849261024f565b9161024f565b101538613060565b50826130da6130d46130cf85611199565b61024f565b9161024f565b1015613058565b6131076131026130fc61310d936130f6610ec2565b50611a14565b93611a14565b611474565b91611474565b1090565b61313761313261312c61313d93613126610ec2565b50611a14565b93611a14565b611474565b91611474565b119056fea2646970667358221220b1d786395ad4837d247f3fbaef6886d3aa6cfbdcfe1cd85269bdce327aa5dd0e64736f6c634300081a0033",
  "deployedBytecode": "0x60806040526004361015610013575b61098e565b61001e60003561002d565b63989823890361000e57610955565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b61005c90610048565b90565b61006881610053565b0361006f57565b600080fd5b905035906100818261005f565b565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100b290610088565b810190811067ffffffffffffffff8211176100cc57604052565b610092565b906100e46100dd610033565b92836100a8565b565b600080fd5b600080fd5b67ffffffffffffffff81116101085760208091020190565b610092565b600080fd5b600080fd5b67ffffffffffffffff811161013557610131602091610088565b0190565b610092565b90826000939282370152565b9092919261015b61015682610117565b6100d1565b93818552602085019082840111610177576101759261013a565b565b610112565b9080601f8301121561019a5781602061019793359101610146565b90565b6100eb565b9291906101b36101ae826100f0565b6100d1565b938185526020808601920281019183831161020a5781905b8382106101d9575050505050565b813567ffffffffffffffff8111610205576020916101fa878493870161017c565b8152019101906101cb565b6100eb565b61010d565b9080601f8301121561022d5781602061022a9335910161019f565b90565b6100eb565b67ffffffffffffffff811161024a5760208091020190565b610092565b90565b61025b8161024f565b0361026257565b600080fd5b9050359061027482610252565b565b67ffffffffffffffff811161028e5760208091020190565b610092565b60ff60f81b1690565b6102a581610293565b036102ac57565b600080fd5b905035906102be8261029c565b565b63ffffffff191690565b6102d3816102c0565b036102da57565b600080fd5b905035906102ec826102ca565b565b919060408382031261032a576103239061030860406100d1565b9361031682600083016102b1565b60008601526020016102df565b6020830152565b610083565b90565b61033b8161032f565b0361034257565b600080fd5b9050359061035482610332565b565b919060a0838203126103a45761039d9061037060606100d1565b9361037e82600083016102ee565b600086015261039082604083016102ee565b6020860152608001610347565b6040830152565b610083565b909291926103be6103b982610276565b6100d1565b9381855260a06020860192028301928184116103fd57915b8383106103e35750505050565b602060a0916103f28486610356565b8152019201916103d6565b61010d565b9080601f830112156104205781602061041d933591016103a9565b90565b6100eb565b91909160608184031261048b5761043c60606100d1565b9261044a8160008401610267565b600085015261045c8160208401610267565b6020850152604082013567ffffffffffffffff81116104865761047f9201610402565b6040830152565b6100e6565b610083565b9291906104a461049f82610232565b6100d1565b93818552602080860192028101918383116104fb5781905b8382106104ca575050505050565b813567ffffffffffffffff81116104f6576020916104eb8784938701610425565b8152019101906104bc565b6100eb565b61010d565b9080601f8301121561051e5781602061051b93359101610490565b90565b6100eb565b67ffffffffffffffff811161053b5760208091020190565b610092565b67ffffffffffffffff81116105585760208091020190565b610092565b9092919261057261056d82610540565b6100d1565b93818552602080860192028301928184116105af57915b8383106105965750505050565b602080916105a48486610347565b815201920191610589565b61010d565b9080601f830112156105d2578160206105cf9335910161055d565b90565b6100eb565b91909160608184031261063e576105ee60606100d1565b9260008201359167ffffffffffffffff831161063957610613826106329483016105b4565b60008601526106258260208301610267565b6020860152604001610267565b6040830152565b6100e6565b610083565b92919061065761065282610523565b6100d1565b93818552602080860192028101918383116106ae5781905b83821061067d575050505050565b813567ffffffffffffffff81116106a95760209161069e87849387016105d7565b81520191019061066f565b6100eb565b61010d565b9080601f830112156106d1578160206106ce93359101610643565b90565b6100eb565b91906040838203126107125761070b906106f060406100d1565b936106fe8260008301610267565b6000860152602001610347565b6020830152565b610083565b91909160808184031261077d5761072e60606100d1565b9261073c8160008401610267565b600085015261074e81602084016106d6565b6020850152606082013567ffffffffffffffff81116107785761077192016105d7565b6040830152565b6100e6565b610083565b91909160e08184031261087e5761079960c06100d1565b92600082013567ffffffffffffffff811161087957816107ba91840161020f565b6000850152602082013567ffffffffffffffff811161087457816107df918401610500565b60208501526107f181604084016102ee565b6040850152608082013567ffffffffffffffff811161086f5781610816918401610402565b606085015260a082013567ffffffffffffffff811161086a578161083b9184016106b3565b608085015260c082013567ffffffffffffffff81116108655761085e9201610717565b60a0830152565b6100e6565b6100e6565b6100e6565b6100e6565b6100e6565b610083565b600080fd5b909182601f830112156108c25781359167ffffffffffffffff83116108bd5760200192600183028401116108b857565b61010d565b610883565b6100eb565b9160608383031261092d576108df8260008501610074565b92602081013567ffffffffffffffff81116109285783610900918301610782565b92604082013567ffffffffffffffff81116109235761091f9201610888565b9091565b610043565b610043565b61003e565b61093b9061032f565b9052565b919061095390600060208501940190610932565b565b346109895761098561097461096b3660046108c7565b92919091610d5a565b61097c610033565b9182918261093f565b0390f35b610039565b600080fd5b600090565b6109a2905161032f565b90565b60001c90565b60018060a01b031690565b6109c26109c7916109a5565b6109ab565b90565b6109d490546109b6565b90565b60209181520190565b60207f20426c6f6273747265616d5820636f6e74726163740000000000000000000000917f536861726573206e6f7420636f6d6d697474656420746f2043656c657374696160008201520152565b610a3b60356040926109d7565b610a44816109e0565b0190565b610a5e9060208101906000818303910152610a2e565b90565b15610a6857565b610a70610033565b62461bcd60e51b815280610a8660048201610a48565b0390fd5b610a94905161024f565b90565b634e487b7160e01b600052603260045260246000fd5b5190565b90610abb82610aad565b811015610acc576020809102010190565b610a97565b90565b90565b610aeb610ae6610af092610ad1565b610ad4565b61024f565b90565b90565b610b0a610b05610b0f92610af3565b610ad4565b61024f565b90565b634e487b7160e01b600052601160045260246000fd5b610b37610b3d9193929361024f565b9261024f565b8203918211610b4857565b610b12565b60018060a01b031690565b610b64610b69916109a5565b610b4d565b90565b610b769054610b58565b90565b610b8d610b88610b9292610048565b610ad4565b610048565b90565b610b9e90610b79565b90565b610baa90610b95565b90565b610bb690610293565b9052565b610bc3906102c0565b9052565b90602080610beb93610be160008201516000860190610bad565b0151910190610bba565b565b610bf69061024f565b9052565b60209181520190565b9190610c1d81610c1681610c2295610bfa565b809561013a565b610088565b0190565b92610c849795919694610c63610c6d92610c59610c7796610c4f60e08a019c60008b0190610bc7565b6040890190610932565b6060870190610bed565b6080850190610bed565b60a0830190610bed565b60c0818503910152610c03565b90565b60e01b90565b90505190610c9a82610332565b565b90602082820312610cb657610cb391600001610c8d565b90565b61003e565b610cc490610053565b9052565b5190565b60005b838110610ce0575050906000910152565b806020918301518185015201610ccf565b610d10610d19602093610d1e93610d0781610cc8565b93848093610bfa565b95869101610ccc565b610088565b0190565b91610d4692610d3960408201936000830190610cbb565b6020818403910152610cf1565b90565b610d51610033565b3d6000823e3d90fd5b91610e6d6000602094610d6b610993565b50610e56610d81878060a0890151015101610998565b610d9f610d99610d9160016109ca565b898491610ed1565b50610a61565b610e48604088015197610dba868b60a0840151015101610a8a565b9a610e148b610e0d610de38a610ddc84880151610dd683610ad7565b90610ab1565b5101610a8a565b94610e07610df78480840151930151610aad565b610e016001610af6565b90610b28565b90610ab1565b5101610a8a565b98610e26610e2189610b6c565b610ba1565b99631789cd63979b959d9390919293610e3d610033565b9e8f978f8901610c26565b8882018103825203886100a8565b610e78610e61610033565b97889687958694610c87565b845260048401610d22565b03925af1908115610ebd57600091610e8f575b5090565b610eb0915060203d8111610eb6575b610ea881836100a8565b810190610c9c565b38610e8b565b503d610e9e565b610d49565b600090565b600090565b151590565b91610f03610f0b9493610ee2610ec2565b50610eeb610ec7565b506060840151608085015160a08601519185936110c5565b949015610ecc565b610f3d57610f379293506000820151916020810151604082015190608060608401519301519394611226565b91909190565b505060009190565b610f4e90610b95565b90565b610f5a81610ecc565b03610f6157565b600080fd5b90505190610f7382610f51565b565b90602082820312610f8f57610f8c91600001610f66565b90565b61003e565b610f9d9061024f565b9052565b610faa9061032f565b9052565b90602080610fd293610fc860008201516000860190610f94565b0151910190610fa1565b565b5190565b60209181520190565b60200190565b90610ff481602093610fa1565b0190565b60200190565b9061101b61101561100e84610fd4565b8093610fd8565b92610fe1565b9060005b81811061102c5750505090565b90919261104561103f6001928651610fe7565b94610ff8565b910191909161101f565b9061108d906040806110706060840160008701518582036000870152610ffe565b9461108360208201516020860190610f94565b0151910190610f94565b90565b6110b56110c29492936110ab60808401956000850190610bed565b6020830190610fae565b606081840391015261104f565b90565b6110e760209195939492956110d8610ec2565b506110e1610ec7565b50610f45565b631f3302a99061111d6110fc60008601610a8a565b92611128604086880151970151611111610033565b97889687958695610c87565b855260048501611090565b03915afa80156111945761114591600091611166575b5015610ecc565b61115b57611155929190916114f9565b91909190565b505050600090600490565b611187915060203d811161118d575b61117f81836100a8565b810190610f75565b3861113e565b503d611175565b610d49565b5190565b60016111a9910161024f565b90565b6111bb6111c19193929361024f565b9261024f565b82018092116111cc57565b610b12565b5190565b634e487b7160e01b600052602160045260246000fd5b600b11156111f557565b6111d5565b90611204826111eb565b565b9061121082611199565b811015611221576020809102010190565b610a97565b9361124c90611254929796611239610ec2565b50611242610ec7565b50859190916114f9565b919015610ecc565b611465575061126285610aad565b61127c61127661127185611199565b61024f565b9161024f565b036114585761128b6000610ad7565b926112966000610ad7565b935b846112b36112ad6112a88a610aad565b61024f565b9161024f565b1015611309576112fd611303916112f76112da60206112d38c8b90610ab1565b5101610a8a565b6112f160006112ea8d8c90610ab1565b5101610a8a565b90610b28565b906111ac565b9461119d565b93611298565b909350949093919461132c611326611320866111d1565b9261024f565b9161024f565b0361144b5761133b6000610ad7565b946113466000610ad7565b955b8661136361135d61135886610aad565b61024f565b9161024f565b101561143c576113a0611383602061137c868b90610ab1565b5101610a8a565b61139a6000611393878c90610ab1565b5101610a8a565b90610b28565b6113b686836113b08585906111ac565b916116b6565b806113ca6113c460006111fa565b916111fa565b0361142c57506113f86113fe916113e2868c90611206565b51906113ef888d90610ab1565b518b91926118af565b15610ecc565b61141c576114169161141091906111ac565b9661119d565b95611348565b5050505092505050600090600190565b9850505050505091505060009190565b50505092505050600190600090565b5092505050600090600790565b5050509050600090600590565b945050505060009190565b5190565b62ffffff191690565b90565b61148c61149191611474565b61147d565b9052565b90565b6114a46114a99161032f565b611495565b9052565b602093926114cd601d836114c582956114d597611480565b018092611480565b018092611498565b0190565b906114e382611470565b8110156114f4576020809102010190565b610a97565b919091611504610ec2565b5061150d610ec7565b5061151783611470565b61153161152b61152684611199565b61024f565b9161024f565b0361161f576115406000610ad7565b5b8061155c61155661155187611470565b61024f565b9161024f565b1015611613576115f56115ee6115806000611578868690611206565b510151611a14565b6115d961159b6020611593888890611206565b510151611a14565b916115ca6115b660406115af8a8a90611206565b5101610998565b6115be610033565b948593602085016114ad565b602082018103825203826100a8565b85906115e68886906114d9565b519091611a8b565b5015610ecc565b611607576116029061119d565b611541565b50505050600090600290565b50505050600190600090565b505050600090600690565b606090565b9061164161163c836100f0565b6100d1565b918252565b606090565b60005b82811061165a57505050565b602090611665611646565b818401520161164e565b9061169461167c8361162f565b9260208061168a86936100f0565b920191039061164b565b565b906116a0826111d1565b8110156116b1576020809102010190565b610a97565b9291926116c161162a565b506116ca610ec7565b50816116de6116d88661024f565b9161024f565b116117ac57816116fe6116f86116f3846111d1565b61024f565b9161024f565b11801561178a575b6117805761171d611718858490610b28565b61166f565b92825b8061173361172d8861024f565b9161024f565b1015611775576117709061176961174b858390611696565b5187611758848990610b28565b916117638383611696565b52611696565b515061119d565b611720565b509350505090600090565b9192505090600a90565b50836117a66117a061179b846111d1565b61024f565b9161024f565b11611706565b9192505090600990565b906117c86117c383610276565b6100d1565b918252565b6117d760606100d1565b90565b6117e460406100d1565b90565b600090565b600090565b6117f96117da565b90602080836118066117e7565b8152016118116117ec565b81525050565b61181f6117f1565b90565b600090565b61182f6117cd565b90602080808461183d611817565b815201611848611817565b815201611853611822565b81525050565b611861611827565b90565b60005b82811061187357505050565b60209061187e611859565b8184015201611867565b906118ad611895836117b6565b926020806118a38693610276565b9201910390611864565b565b929190936118bb610ec2565b506118cd6118c8846111d1565b611888565b946118d86000610ad7565b5b806118f46118ee6118e9886111d1565b61024f565b9161024f565b1015611936576119319061192a61191786611910898590611696565b5190611d26565b8983916119248383611206565b52611206565b515061119d565b6118d9565b50925093905061194892919091611e3f565b90565b600090565b61195a9051610293565b90565b61196790516102c0565b90565b90565b61197961197e91610293565b61196a565b9052565b90565b611991611996916102c0565b611982565b9052565b6001816119ad6119b593601c969561196d565b018092611985565b0190565b60200190565b6119c99051611474565b90565b1b90565b6119ea6119e56119df83610cc8565b926119b9565b6119bf565b90601d81106119f8575b5090565b611a0d9062ffffff1990601d036008026119cc565b16386119f4565b611a6890611a2061194b565b50611a63611a3c6020611a3560008501611950565b930161195d565b91611a54611a48610033565b9384926020840161199a565b602082018103825203826100a8565b6119d0565b90565b600090565b60061115611a7a57565b6111d5565b90611a8982611a70565b565b9091611a95610ec2565b50611a9e611a6b565b50611aab60408401610a8a565b611abe611ab86001610af6565b9161024f565b1115600014611c1557611ad46000840151610fd4565b611ae7611ae16000610ad7565b9161024f565b03611c0a575b611af960208401610a8a565b611b16611b10611b0b60408701610a8a565b61024f565b9161024f565b1015611bff57611b259061218c565b91611b336000820151610fd4565b611b46611b406000610ad7565b9161024f565b14611bb4579182611b5d6020611b76949501610a8a565b916000611b6c60408401610a8a565b919201519261221b565b80611b8a611b846000611a7f565b91611a7f565b03611baa5750611b9d611ba3919261032f565b9161032f565b1490600090565b9291505060009190565b6040611bc09101610a8a565b611bd3611bcd6001610af6565b9161024f565b14600014611bf557611be8611bee919261032f565b9161032f565b1490600090565b5050600090600090565b505050600090600290565b505050600090600190565b611c226000840151610fd4565b611c54611c4e611c49611c3760208801610a8a565b611c4360408901610a8a565b90612061565b61024f565b9161024f565b0315611aed57505050600090600190565b611c6d611827565b90565b60f81b90565b611c8a611c85611c8f92610ad1565b611c70565b610293565b90565b611c9c6000611c76565b90565b905090565b611cc9611cc092602092611cb781610cc8565b94858093611c9f565b93849101610ccc565b0190565b91611cec600184611ce4611cf39796601d9661196d565b018092611480565b0190611ca4565b90565b60001b90565b611d0591611ca4565b90565b611d1260606100d1565b90565b52565b90611d229061032f565b9052565b906000611d82602092611d37611c65565b50611d71611d43611c92565b611d63611d4f88611a14565b93611d58610033565b948593898501611ccd565b8682018103825203826100a8565b611d79610033565b91829182611cfc565b039060025afa15611dc957611dc6611d9b600051611cf6565b611dbd83611db4611daa611d08565b9560008701611d15565b60208501611d15565b60408301611d18565b90565b610d49565b611dd79061024f565b6000198114611de65760010190565b610b12565b90565b611e02611dfd611e0792611deb565b610ad4565b61024f565b90565b611e19611e1f9193929361024f565b9261024f565b91611e2b83820261024f565b928184041490151715611e3a57565b610b12565b611e47610ec2565b50611e526000610ad7565b93611e68611e636040850151611199565b611888565b91611e736000610ad7565b955b80611e93611e8d611e8860008901610a8a565b61024f565b9161024f565b141580611fe2575b15611ef757611eeb81611ebd611ef193611eb760008a01610a8a565b90612439565b611ee3611ecf60408a01518c90611206565b51888c91611edd8383611206565b52611206565b5150906111ac565b96611dce565b95611e75565b5093909450611f6e9150611f28611f18611f1360208601610a8a565b61250f565b611f226002611dee565b90611e0a565b80611f3c611f366001610af6565b9161024f565b10611fd2575b839160009190600090611f68611f62611f5c600096610ad7565b93610ad7565b94610ad7565b9461259c565b505093905b84611f92611f8c611f876040870151611199565b61024f565b9161024f565b1015611fc157611fb5611fbb91611fae60408601518890611206565b519061281f565b9461119d565b93611f73565b909350611fcf92915061298d565b90565b50611fdd6001610af6565b611f42565b5086612002611ffc611ff76040890151611199565b61024f565b9161024f565b10611e9b565b600090565b90565b61202461201f6120299261200d565b610ad4565b61024f565b90565b612037610100612010565b90565b6120599061205361204d61205e9461024f565b9161024f565b906119cc565b61024f565b90565b612069612008565b508161207e6120786001610af6565b9161024f565b11156121625761209e61208f61202c565b61209884612a08565b90610b28565b916120c660016120c16120bb866120b56001610af6565b90610b28565b91610af6565b61203a565b90826120ed6120e76120e2856120dc6001610af6565b90610b28565b61024f565b9161024f565b11156000146120fc5750505090565b908092935061211461210e6001610af6565b9161024f565b1460001461212c575050506121296001610af6565b90565b61214661214c926121406001958290610b28565b92610b28565b90612061565b9061215a61215f9291610af6565b6111ac565b90565b505061216e6000610ad7565b90565b80612182600192612189959461196d565b0190611ca4565b90565b60006121dd60209261219c610993565b506121cc6121a8611c92565b6121be6121b3610033565b938492888401612171565b8682018103825203826100a8565b6121d4610033565b91829182611cfc565b039060025afa156121f6576121f3600051611cf6565b90565b610d49565b9061220582610fd4565b811015612216576020809102010190565b610a97565b939293612226610993565b5061222f611a6b565b508161224461223e6000610ad7565b9161024f565b1461242e578161225d6122576001610af6565b9161024f565b146123fd5761226b85610fd4565b61227e6122786000610ad7565b9161024f565b146123f25761228c8261250f565b6122be866000906122b86122b26122a28b610fd4565b6122ac6001610af6565b90610b28565b92610ad7565b90612bc0565b916122c7611a6b565b50806122db6122d58461024f565b9161024f565b1061236e5761230b9392916122fd612303926122f5610993565b508290610b28565b93610b28565b84919261221b565b90918161232161231b6000611a7f565b91611a7f565b0361236657505061235b61235684612350612340612360969792610fd4565b61234a6001610af6565b90610b28565b906121fb565b610998565b612d15565b90600090565b915092509190565b61238e9350600096949692919250612384610993565b509186919261221b565b9093816123a461239e6000611a7f565b91611a7f565b036123ea5750506123de6123d96123e49394926123d36123c382610fd4565b6123cd6001610af6565b90610b28565b906121fb565b610998565b90612d15565b90600090565b915092509190565b505090915090600590565b5050909161240a90610fd4565b61241d6124176000610ad7565b9161024f565b036124285790600090565b90600490565b505090915090600390565b61246061245b6124709261244b612008565b5061245581612d87565b94610b28565b612e0e565b61246a6001610af6565b90610b28565b8161248361247d8361024f565b9161024f565b1161249f575061249c906124976001610af6565b61203a565b90565b6124b391506124ae6001610af6565b61203a565b90565b156124bd57565b600080fd5b60ff1690565b6124dc6124d76124e192610af3565b610ad4565b6124c2565b90565b1c90565b612507906125016124fb61250c946124c2565b9161024f565b906124e4565b61024f565b90565b612517612008565b506125368161252f6125296001610af6565b9161024f565b10156124b6565b61256661254282612e0e565b61256161255b6001926125556001610af6565b90610b28565b91610af6565b61203a565b9061257a612574839261024f565b9161024f565b14612583575b90565b6125979061259160016124c8565b906124e8565b612580565b919092939594956125ab611c65565b506125b4612008565b506125bd612008565b506125c6610ec2565b506125d2858390610b28565b6125e56125df6001610af6565b9161024f565b146126f157846126086126026125fd60008701610a8a565b61024f565b9161024f565b111580156126cb575b6126a9576126459061262c612627878590610b28565b61250f565b97849186859061263d878d906111ac565b92939461259c565b9161266897939161265f95935094919990949596926111ac565b9192939461259c565b9491909290929461268261267c6001610ecc565b91610ecc565b1461269c576126909161281f565b90929160009193929190565b5090929160009193929190565b93916126c19596935060409150015192909192612ea7565b9193909293929190565b50816126ea6126e46126df60208701610a8a565b61024f565b9161024f565b1015612611565b9391906127046000839895979801610a8a565b6127166127108361024f565b9161024f565b11159081612763575b506127405761273694506040015192909192612ea7565b9193909293929190565b50509082612752612759949391611199565b9192612e63565b9193909293929190565b905061278261277c61277760208501610a8a565b61024f565b9161024f565b103861271f565b6127916117f1565b90565b6127a86127a36127ad92610af3565b611c70565b610293565b90565b6127ba6001612794565b90565b9461280b6020601d9661280388839c9b986127fb826128139a6127f361281b9f806127eb600192869f61196d565b018092611480565b018092611480565b018092611498565b018092611480565b018092611480565b018092611498565b0190565b90612828611c65565b50602060006128fc612841828601518386015190612eea565b9361284a612789565b506128608387015161285a612f7c565b90612fc2565b831461294a576128eb612871612f7c565b965b6128dd61287e6127b0565b9161288b87820151611a14565b946128a4604061289d8b850151611a14565b9301610998565b6128b089830151611a14565b906128c960406128c28d860151611a14565b9401610998565b936128d2610033565b9889978d89016127bd565b8682018103825203826100a8565b6128f3610033565b91829182611cfc565b039060025afa156129455761294290612939612919600051611cf6565b9193612930612926611d08565b9560008701611d15565b60208501611d15565b60408301611d18565b90565b610d49565b61295f83820151612959612f7c565b90612fc2565b8314612973576128eb84870151965b612873565b6128eb612987858801518684015190612ff2565b9661296e565b90612996610ec2565b506129aa6000830151600083015190612fc2565b806129ef575b91826129bc575b505090565b6129e79192506129dc60406129d5816129e19401610998565b9401610998565b61032f565b9161032f565b1438806129b7565b50612a036020830151602083015190612fc2565b6129b0565b612a10612008565b50612a1b6000610ad7565b5b612a306001612a2b8391610af6565b61203a565b612a42612a3c8461024f565b9161024f565b1015612a6157612a5c90612a566001610af6565b906111ac565b612a1c565b612a739150612a6e61202c565b610b28565b90565b606090565b60207f207468616e205f656e6400000000000000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206973206772656174657260008201520152565b612ad6602a6040926109d7565b612adf81612a7b565b0190565b612af99060208101906000818303910152612ac9565b90565b60207f65206f7574206f6620626f756e64730000000000000000000000000000000000917f496e76616c69642072616e67653a205f626567696e206f72205f656e6420617260008201520152565b612b57602f6040926109d7565b612b6081612afc565b0190565b612b7a9060208101906000818303910152612b4a565b90565b90612b8f612b8a83610540565b6100d1565b918252565b369037565b90612bbe612ba683612b7d565b92602080612bb48693610540565b9201910390612b94565b565b929092612bcb612a76565b5083612bdf612bd98561024f565b9161024f565b11612cc75783612bff612bf9612bf484610fd4565b61024f565b9161024f565b118015612ca5575b612c8357612c1e612c19848690610b28565b612b99565b91845b80612c34612c2e8761024f565b9161024f565b1015612c7a57612c7590612c70612c54612c4f8684906121fb565b610998565b612c6b8791612c64858c90610b28565b90926121fb565b611d18565b61119d565b612c21565b50935050905090565b612c8b610033565b62461bcd60e51b815280612ca160048201612b64565b0390fd5b5082612cc1612cbb612cb684610fd4565b61024f565b9161024f565b11612c07565b612ccf610033565b62461bcd60e51b815280612ce560048201612ae3565b0390fd5b60209392612d09600183612d018895612d119761196d565b018092611498565b018092611498565b0190565b612d69602092612d58600093612d29610993565b50612d4a612d356127b0565b9193612d3f610033565b948593898501612ce9565b8682018103825203826100a8565b612d60610033565b91829182611cfc565b039060025afa15612d8257612d7f600051611cf6565b90565b610d49565b612d8f612008565b50612d9a6001610af6565b91612da56000610ad7565b5b82612dba612db46000610ad7565b9161024f565b141580612df1575b15612dea57612dd3612de491611dce565b92612dde60016124c8565b906124e8565b91612da6565b9150915090565b50838316612e08612e026000610ad7565b9161024f565b14612dc2565b612e16612008565b50612e216000610ad7565b5b81612e36612e306000610ad7565b9161024f565b14612e5e57612e47612e5891611dce565b91612e5260016124c8565b906124e8565b90612e22565b905090565b91612e9792949394612e73611c65565b50612e7c612008565b50612e85612008565b50612e8e610ec2565b50919091613017565b9391929093929193929193929190565b91612edb92949394612eb7611c65565b50612ec0612008565b50612ec9612008565b50612ed2610ec2565b50919091613017565b91929091929193929193929190565b90612ef3612789565b50612eff8282906130e1565b600014612f0a575090565b905090565b612f1960406100d1565b90565b90565b612f33612f2e612f3892612f1c565b611c70565b610293565b90565b90612f4590610293565b9052565b90565b60201b90565b612f66612f61612f6b92612f49565b612f4c565b6102c0565b90565b90612f78906102c0565b9052565b612f84612789565b5060ff612fbf612fb660018060e01b03612fb1612fa8612fa2612f0f565b95612f1f565b60008601612f3b565b612f52565b60208301612f6e565b90565b612fe8612fe3612fdd612fee93612fd7610ec2565b50611a14565b93611a14565b611474565b91611474565b1490565b90612ffb612789565b50613007828290613111565b600014613012575090565b905090565b9091613021611c65565b5061302a612008565b50613033610ec2565b5061303d82611199565b61305061304a6000610ad7565b9161024f565b1480156130be575b9081156130a1575b5061308e57613073613085918390611206565b519161307f6001610af6565b906111ac565b91600091929190565b50613097611c65565b9091600191929190565b90506130b66130b0849261024f565b9161024f565b101538613060565b50826130da6130d46130cf85611199565b61024f565b9161024f565b1015613058565b6131076131026130fc61310d936130f6610ec2565b50611a14565b93611a14565b611474565b91611474565b1090565b61313761313261312c61313d93613126610ec2565b50611a14565b93611a14565b611474565b91611474565b119056fea2646970667358221220b1d786395ad4837d247f3fbaef6886d3aa6cfbdcfe1cd85269bdce327aa5dd0e64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_blobstreamX": "BlobstreamX contract where Celestia commitments are being stored",
          "_inputBox": "InputBox contract to send inputs to Cartesi DApps"
        }
      },
      "relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)": {
        "details": "Called by clients to securely process Celestia data in Cartesi DApps",
        "params": {
          "_dapp": "The address of the DApp",
          "_execLayerData": "Additional data to be interpreted by the execution layer",
          "_proof": "SharesProof object showing that a range of shares is committed to Celestia"
        },
        "returns": {
          "_0": "The hash of the input as returned by the Cartesi DApp's input box"
        }
      }
    },
    "title": "CelestiaRelay",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "relayShares(address,(bytes[],(uint256,uint256,((bytes1,bytes28),(bytes1,bytes28),bytes32)[])[],(bytes1,bytes28),((bytes1,bytes28),(bytes1,bytes28),bytes32)[],(bytes32[],uint256,uint256)[],(uint256,(uint256,bytes32),(bytes32[],uint256,uint256))),bytes)": {
        "notice": "Relay a pointer to the specified Celestia shares as an input to a DApp's input box"
      }
    },
    "notice": "Relays Celestia blocks as inputs to Cartesi DApps",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2744,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "inputBox",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IInputBox)49"
      },
      {
        "astId": 2747,
        "contract": "contracts/CelestiaRelay.sol:CelestiaRelay",
        "label": "blobstreamX",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDAOracle)87"
      }
    ],
    "types": {
      "t_contract(IDAOracle)87": {
        "encoding": "inplace",
        "label": "contract IDAOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IInputBox)49": {
        "encoding": "inplace",
        "label": "contract IInputBox",
        "numberOfBytes": "20"
      }
    }
  }
}